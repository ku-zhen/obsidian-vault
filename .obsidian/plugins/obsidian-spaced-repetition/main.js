/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to2, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/pagerank.js/lib/index.js
var require_lib = __commonJS({
  "node_modules/pagerank.js/lib/index.js"(exports, module2) {
    "use strict";
    function forOwn(object, callback2) {
      if (typeof object === "object" && typeof callback2 === "function") {
        for (var key in object) {
          if (object.hasOwnProperty(key) === true) {
            if (callback2(key, object[key]) === false) {
              break;
            }
          }
        }
      }
    }
    module2.exports = function() {
      var self = {
        count: 0,
        edges: {},
        nodes: {}
      };
      self.link = function(source, target, weight) {
        if (isFinite(weight) !== true || weight === null) {
          weight = 1;
        }
        weight = parseFloat(weight);
        if (self.nodes.hasOwnProperty(source) !== true) {
          self.count++;
          self.nodes[source] = {
            weight: 0,
            outbound: 0
          };
        }
        self.nodes[source].outbound += weight;
        if (self.nodes.hasOwnProperty(target) !== true) {
          self.count++;
          self.nodes[target] = {
            weight: 0,
            outbound: 0
          };
        }
        if (self.edges.hasOwnProperty(source) !== true) {
          self.edges[source] = {};
        }
        if (self.edges[source].hasOwnProperty(target) !== true) {
          self.edges[source][target] = 0;
        }
        self.edges[source][target] += weight;
      };
      self.rank = function(alpha2, epsilon, callback2) {
        var delta = 1, inverse = 1 / self.count;
        forOwn(self.edges, function(source) {
          if (self.nodes[source].outbound > 0) {
            forOwn(self.edges[source], function(target) {
              self.edges[source][target] /= self.nodes[source].outbound;
            });
          }
        });
        forOwn(self.nodes, function(key) {
          self.nodes[key].weight = inverse;
        });
        while (delta > epsilon) {
          var leak = 0, nodes = {};
          forOwn(self.nodes, function(key, value) {
            nodes[key] = value.weight;
            if (value.outbound === 0) {
              leak += value.weight;
            }
            self.nodes[key].weight = 0;
          });
          leak *= alpha2;
          forOwn(self.nodes, function(source) {
            forOwn(self.edges[source], function(target, weight) {
              self.nodes[target].weight += alpha2 * nodes[source] * weight;
            });
            self.nodes[source].weight += (1 - alpha2) * inverse + leak * inverse;
          });
          delta = 0;
          forOwn(self.nodes, function(key, value) {
            delta += Math.abs(value.weight - nodes[key]);
          });
        }
        forOwn(self.nodes, function(key) {
          return callback2(key, self.nodes[key].weight);
        });
      };
      self.reset = function() {
        self.count = 0;
        self.edges = {};
        self.nodes = {};
      };
      return self;
    }();
  }
});

// node_modules/vhtml/dist/vhtml.js
var require_vhtml = __commonJS({
  "node_modules/vhtml/dist/vhtml.js"(exports, module2) {
    (function(global, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.vhtml = factory();
    })(exports, function() {
      "use strict";
      var emptyTags = ["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"];
      var esc = function esc2(str) {
        return String(str).replace(/[&<>"']/g, function(s) {
          return "&" + map3[s] + ";";
        });
      };
      var map3 = { "&": "amp", "<": "lt", ">": "gt", '"': "quot", "'": "apos" };
      var setInnerHTMLAttr = "dangerouslySetInnerHTML";
      var DOMAttributeNames = {
        className: "class",
        htmlFor: "for"
      };
      var sanitized = {};
      function h4(name2, attrs) {
        var stack = [], s = "";
        attrs = attrs || {};
        for (var i = arguments.length; i-- > 2; ) {
          stack.push(arguments[i]);
        }
        if (typeof name2 === "function") {
          attrs.children = stack.reverse();
          return name2(attrs);
        }
        if (name2) {
          s += "<" + name2;
          if (attrs)
            for (var _i in attrs) {
              if (attrs[_i] !== false && attrs[_i] != null && _i !== setInnerHTMLAttr) {
                s += " " + (DOMAttributeNames[_i] ? DOMAttributeNames[_i] : esc(_i)) + '="' + esc(attrs[_i]) + '"';
              }
            }
          s += ">";
        }
        if (emptyTags.indexOf(name2) === -1) {
          if (attrs[setInnerHTMLAttr]) {
            s += attrs[setInnerHTMLAttr].__html;
          } else
            while (stack.length) {
              var child = stack.pop();
              if (child) {
                if (child.pop) {
                  for (var _i2 = child.length; _i2--; ) {
                    stack.push(child[_i2]);
                  }
                } else {
                  s += sanitized[child] === true ? child : esc(child);
                }
              }
            }
          s += name2 ? "</" + name2 + ">" : "";
        }
        sanitized[s] = true;
        return s;
      }
      return h4;
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SRPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");
var graph = __toESM(require_lib());

// src/settings.ts
var import_obsidian2 = require("obsidian");

// src/lang/helpers.ts
var import_obsidian = require("obsidian");

// src/lang/locale/af.ts
var af_default = {};

// src/lang/locale/ar.ts
var ar_default = {
  // flashcard-modal.tsx
  DECKS: "\u0627\u0644\u0631\u064F\u0632\u0645\u064E\u0627\u062A",
  DUE_CARDS: "\u0628\u0637\u0627\u0642\u0627\u062A \u0645\u064F\u0633\u062A\u062D\u0642\u0629",
  NEW_CARDS: "\u0628\u0637\u0627\u0642\u0627\u062A \u062C\u062F\u064A\u062F\u0629",
  TOTAL_CARDS: "\u0625\u062C\u0645\u0627\u0644\u064A \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A",
  BACK: "\u0631\u062C\u0648\u0639",
  SKIP: "Skip",
  EDIT_CARD: "\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0628\u0637\u0627\u0642\u0629",
  RESET_CARD_PROGRESS: "\u0625\u0639\u0627\u062F\u0629 \u062A\u0639\u064A\u064A\u0646 \u062A\u0642\u062F\u0651\u064F\u0645\u0652 \u0627\u0644\u0628\u0637\u0627\u0642\u0629",
  HARD: "\u0635\u0639\u0628",
  GOOD: "\u062C\u064A\u062F",
  EASY: "\u0633\u0647\u0644",
  SHOW_ANSWER: "\u0623\u0638\u0647\u0650\u0631 \u0627\u0644\u0625\u062C\u0627\u0628\u0629",
  CARD_PROGRESS_RESET: ".\u062A\u0645\u0651\u064E\u062A \u0625\u0639\u0627\u062F\u0629 \u062A\u0639\u064A\u064A\u0646 \u062A\u0642\u062F\u0651\u064F\u0645 \u0627\u0644\u0628\u0637\u0627\u0642\u0629",
  SAVE: "\u062D\u0641\u0638",
  CANCEL: "\u0625\u0644\u063A\u0627\u0621",
  NO_INPUT: ".\u0644\u0645 \u064A\u062A\u0650\u0645 \u062A\u0642\u062F\u064A\u0645 \u0623\u064A \u0645\u064F\u062F\u062E\u0644\u0627\u062A",
  CURRENT_EASE_HELP_TEXT: ":\u0627\u0644\u0633\u0647\u0648\u0644\u0629 \u0627\u0644\u062D\u0627\u0644\u064A\u0629",
  CURRENT_INTERVAL_HELP_TEXT: ":\u0627\u0644\u0641\u0627\u0635\u0644 \u0627\u0644\u0632\u0645\u0646\u064A \u0627\u0644\u062D\u0627\u0644\u064A",
  CARD_GENERATED_FROM: "${notePath} :\u062A\u0645 \u0625\u0646\u0634\u0627\u0624\u0647\u0627 \u0645\u0646",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "\u0627\u0641\u062A\u062D \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629 \u0644\u0644\u0645\u0631\u0627\u062C\u0639\u0629",
  REVIEW_CARDS: "\u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A",
  REVIEW_EASY_FILE_MENU: "\u0645\u0631\u0627\u062C\u0639\u0629: \u0633\u0647\u0644",
  REVIEW_GOOD_FILE_MENU: "\u0645\u0631\u0627\u062C\u0639\u0629: \u062C\u064A\u062F",
  REVIEW_HARD_FILE_MENU: "\u0645\u0631\u0627\u062C\u0639\u0629: \u0635\u0639\u0628",
  REVIEW_NOTE_EASY_CMD: "\u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629 \u0643\u0640 \u0633\u0647\u0644\u0629",
  REVIEW_NOTE_GOOD_CMD: "\u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629 \u0643\u0640 \u062C\u064A\u062F\u0629",
  REVIEW_NOTE_HARD_CMD: "\u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629 \u0643\u0640 \u0635\u0639\u0628\u0629",
  CRAM_ALL_CARDS: "\u062D\u062F\u062F \u0631\u064F\u0632\u0645\u064E\u0629 \u0644\u0644\u062D\u0634\u0631",
  REVIEW_ALL_CARDS: "\u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0645\u0646 \u062C\u0645\u064A\u0639 \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0627\u062A",
  REVIEW_CARDS_IN_NOTE: "\u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A  \u0645\u0646 \u0647\u0630\u0647 \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629",
  CRAM_CARDS_IN_NOTE: "\u0623\u062D\u0634\u0631 \u062C\u0645\u064A\u0639 \u0628\u0637\u0627\u0642\u0627\u062A \u0647\u0630\u0647 \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629",
  VIEW_STATS: "\u0639\u0631\u0636 \u0627\u0644\u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A",
  STATUS_BAR: "\u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062D\u0642\u0629 ${dueFlashcardsCount},\u0645\u0644\u0627\u062D\u0638\u0627\u062A ${dueNotesCount}:\u0645\u0631\u0627\u062C\u0639\u0629",
  SYNC_TIME_TAKEN: "${t}ms \u0627\u0633\u062A\u063A\u0631\u0627\u0642 \u0627\u0644\u0645\u0632\u0627\u0645\u0646\u0629",
  NOTE_IN_IGNORED_FOLDER: ".\u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629 \u064A\u062A\u0645 \u062D\u0641\u0638\u0647\u0627 \u0636\u0645\u0646 \u0627\u0644\u0645\u062C\u0644\u062F \u0627\u0644\u0630\u064A \u062A\u0645 \u062A\u062C\u0627\u0647\u0644\u0647 (\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A)",
  PLEASE_TAG_NOTE: ".\u064A\u0631\u062C\u0649 \u0648\u0636\u0639 \u0648\u0633\u0645 \u0639\u0644\u0649 \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629 \u0628\u0634\u0643\u0644 \u0645\u0646\u0627\u0633\u0628 \u0644\u0644\u0645\u0631\u0627\u062C\u0639\u0629 (\u0641\u064A \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A)",
  RESPONSE_RECEIVED: ".\u0627\u0633\u062A\u064F\u0644\u0645\u062A \u0627\u0644\u0627\u0633\u062A\u062C\u0627\u0628\u0629",
  NO_DECK_EXISTS: "${deckName} \u0644\u0627 \u064A\u0648\u062C\u062F \u0631\u064F\u0632\u0645\u064E\u0629",
  ALL_CAUGHT_UP: "\u{1F606} \u0644\u0642\u062F \u062A\u0645 \u0627\u0644\u0642\u0628\u0636 \u0639\u0644\u064A\u0643\u0645 \u062C\u0645\u064A\u0639\u0627 \u0627\u0644\u0622\u0646",
  // scheduling.ts
  DAYS_STR_IVL: "\u064A\u0648\u0645/\u0623\u064A\u0627\u0645 ${interval}",
  MONTHS_STR_IVL: "\u0634\u0647\u0631/\u0623\u0634\u0647\u0631 ${interval}",
  YEARS_STR_IVL: "\u0633\u0646\u0629/\u0633\u0646\u0648\u0627\u062A ${interval}",
  DAYS_STR_IVL_MOBILE: "\u064A${interval}",
  MONTHS_STR_IVL_MOBILE: "\u0634${interval}",
  YEARS_STR_IVL_MOBILE: "\u0633${interval}",
  // settings.ts
  SETTINGS_HEADER: "Spaced Repetition Plugin - Settings",
  CHECK_WIKI: '.<a href="${wiki_url}">wiki</a> \u0644\u0645\u0632\u064A\u062F \u0645\u0646 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062A \u060C \u062A\u062D\u0642\u0642 \u0645\u0646',
  FOLDERS_TO_IGNORE: "\u0645\u062C\u0644\u062F\u0627\u062A \u0644\u062A\u062C\u0627\u0647\u0644\u0647\u0627",
  FOLDERS_TO_IGNORE_DESC: "Templates Meta/Scripts : \u0623\u062F\u062E\u0644 \u0645\u0633\u0627\u0631\u0627\u062A \u0627\u0644\u0645\u062C\u0644\u062F \u0645\u0641\u0635\u0648\u0644\u0629 \u0628\u0648\u0627\u0633\u0637\u0629 \u0633\u0637\u0648\u0631 \u062C\u062F\u064A\u062F\u0629,\u0645\u062B\u0627\u0644",
  FLASHCARDS: "\u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A",
  FLASHCARD_EASY_LABEL: "\u0646\u0635 \u0627\u0644\u0632\u0631 \u0633\u0647\u0644",
  FLASHCARD_GOOD_LABEL: "\u0646\u0635 \u0627\u0644\u0632\u0631 \u062C\u064A\u062F",
  FLASHCARD_HARD_LABEL: "\u0646\u0635 \u0627\u0644\u0632\u0631 \u0635\u0639\u0628",
  FLASHCARD_EASY_DESC: '"\u062A\u062E\u0635\u064A\u0635 \u0627\u0644\u062A\u0633\u0645\u064A\u0629 \u0644\u0644\u0632\u0631 "\u0633\u0647\u0644',
  FLASHCARD_GOOD_DESC: '"\u062A\u062E\u0635\u064A\u0635 \u0627\u0644\u062A\u0633\u0645\u064A\u0629 \u0644\u0644\u0632\u0631 "\u062C\u064A\u062F',
  FLASHCARD_HARD_DESC: '"\u062A\u062E\u0635\u064A\u0635 \u0627\u0644\u062A\u0633\u0645\u064A\u0629 \u0644\u0644\u0632\u0631 "\u0635\u0639\u0628',
  FLASHCARD_TAGS: "\u0648\u064F\u0633\u0648\u0645 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A",
  FLASHCARD_TAGS_DESC: "#2\u0623\u062F\u062E\u0644 \u0627\u0644\u0648\u064F\u0633\u0648\u0645 \u0645\u0641\u0635\u0648\u0644\u0629 \u0628\u0645\u0633\u0627\u0641\u0627\u062A \u0623\u0648 \u0623\u0633\u0637\u0631 \u062C\u062F\u064A\u062F\u0629 \u060C \u0623\u064A \u0628\u0637\u0627\u0642\u0627\u062A# \u0631\u0632\u0645\u06293# \u0631\u0632\u0645\u0629",
  CONVERT_FOLDERS_TO_DECKS: "\u062A\u062D\u0648\u064A\u0644 \u0627\u0644\u0645\u062C\u0644\u062F\u0627\u062A \u0625\u0644\u0649 \u0645\u0644\u0641\u0627\u062A \u0623\u0635\u0644\u064A\u0629 \u0648 \u0645\u0644\u0641\u0627\u062A \u0627\u0644\u0641\u0631\u0639\u064A\u0629\u061F",
  CONVERT_FOLDERS_TO_DECKS_DESC: ".\u0647\u0630\u0627 \u0647\u0648 \u0628\u062F\u064A\u0644 \u0644\u062E\u064A\u0627\u0631 \u0648\u0633\u0648\u0645 \u0627\u0644\u0628\u0637\u0627\u0642\u0629 \u0623\u0639\u0644\u0627\u0647",
  INLINE_SCHEDULING_COMMENTS: "\u062D\u0641\u0638 \u062A\u0639\u0644\u064A\u0642 \u0627\u0644\u062C\u062F\u0648\u0644\u0629 \u0639\u0644\u0649 \u0646\u0641\u0633 \u0627\u0644\u0633\u0637\u0631 \u0645\u062B\u0644 \u0627\u0644\u0633\u0637\u0631 \u0627\u0644\u0623\u062E\u064A\u0631 \u0644\u0644\u0628\u0637\u0627\u0642\u0629 \u061F",
  INLINE_SCHEDULING_COMMENTS_DESC: "\u0644\u0627 \u062A\u0643\u0633\u0631 \u062A\u0646\u0633\u064A\u0642 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 HTML \u0633\u064A\u0624\u062F\u064A \u062A\u0634\u063A\u064A\u0644 \u0647\u0630\u0627 \u0625\u0644\u0649 \u062C\u0639\u0644 \u062A\u0639\u0644\u064A\u0642\u0627\u062A",
  BURY_SIBLINGS_TILL_NEXT_DAY: "\u0623\u062E\u0641\u064A \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0627\u0644\u0634\u0642\u064A\u0642\u0629 \u062D\u062A\u0649 \u0627\u0644\u064A\u0648\u0645 \u0627\u0644\u062A\u0627\u0644\u064A",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "cloze deletions : \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0627\u0644\u0634\u0642\u064A\u0642\u0629 \u0647\u064A \u0628\u0637\u0627\u0642\u0627\u062A \u062A\u0645 \u0625\u0646\u0634\u0627\u0624\u0647\u0627 \u0645\u0646 \u0646\u0641\u0633 \u0646\u0635 \u0627\u0644\u0628\u0637\u0627\u0642\u0629 \u0643\u0640",
  SHOW_CARD_CONTEXT: "\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u0633\u064A\u0627\u0642 \u0641\u064A \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A\u061F",
  SHOW_CARD_CONTEXT_DESC: "i.e. Title > Heading 1 > Subheading > ... > Subheading",
  CARD_MODAL_HEIGHT_PERCENT: "\u0646\u0633\u0628\u0629 \u0627\u0631\u062A\u0641\u0627\u0639 \u0627\u0644\u0628\u0637\u0627\u0642\u0629",
  CARD_MODAL_SIZE_PERCENT_DESC: "\u064A\u062C\u0628 \u0636\u0628\u0637\u0647\u0627 \u0639\u0644\u0649 100 \u066A \u0639\u0644\u0649 \u0627\u0644\u0647\u0627\u062A\u0641 \u0627\u0644\u0645\u062D\u0645\u0648\u0644 \u0623\u0648 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u062F\u064A\u0643 \u0635\u0648\u0631 \u0643\u0628\u064A\u0631\u0629 \u062C\u062F\u064B\u0627",
  RESET_DEFAULT: "\u0625\u0639\u0627\u062F\u0629 \u062A\u0639\u064A\u064A\u0646 \u0625\u0644\u0649 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A",
  CARD_MODAL_WIDTH_PERCENT: "\u0646\u0633\u0628\u0629 \u0639\u0631\u0636 \u0627\u0644\u0628\u0637\u0627\u0642\u0629",
  RANDOMIZE_CARD_ORDER: "\u062A\u0631\u062A\u064A\u0628 \u0628\u0637\u0627\u0642\u0629 \u0639\u0634\u0648\u0627\u0626\u064A \u0623\u062B\u0646\u0627\u0621 \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629\u061F",
  DISABLE_CLOZE_CARDS: "\u061Fcloze \u062A\u0639\u0637\u064A\u0644 \u0628\u0637\u0627\u0642\u0627\u062A",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "Convert ==hightlights== to clozes?",
  CONVERT_BOLD_TEXT_TO_CLOZES: "Convert **bolded text** to clozes?",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "Convert {{curly brackets}} to clozes?",
  INLINE_CARDS_SEPARATOR: "\u0641\u0627\u0635\u0644 \u0645\u0646 \u0623\u062C\u0644 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0627\u0644\u0645\u0636\u0645\u0646\u0629",
  FIX_SEPARATORS_MANUALLY_WARNING: "\u0636\u0639 \u0641\u064A \u062D\u0633\u0627\u0628\u0643 \u0623\u0646\u0647 \u0628\u0639\u062F \u062A\u063A\u064A\u064A\u0631 \u0647\u0630\u0627 \u060C \u064A\u062C\u0628 \u0639\u0644\u064A\u0643 \u062A\u0639\u062F\u064A\u0644 \u0623\u064A \u0628\u0637\u0627\u0642\u0627\u062A \u0644\u062F\u064A\u0643 \u0628\u0627\u0644\u0641\u0639\u0644 \u064A\u062F\u0648\u064A\u064B\u0627",
  INLINE_REVERSED_CARDS_SEPARATOR: "\u0641\u0627\u0635\u0644 \u0645\u0646 \u0623\u062C\u0644 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0627\u0644\u0639\u0643\u0633\u064A\u0629 \u0627\u0644\u0645\u0636\u0645\u0646\u0629",
  MULTILINE_CARDS_SEPARATOR: "\u0641\u0627\u0635\u0644 \u0645\u0646 \u0623\u062C\u0644 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0627\u0644\u0645\u062A\u0639\u062F\u062F\u0629",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "\u0641\u0627\u0635\u0644 \u0645\u0646 \u0623\u062C\u0644 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0627\u0644\u0639\u0643\u0633\u064A\u0629 \u0627\u0644\u0645\u062A\u0639\u062F\u062F\u0629",
  NOTES: "\u0645\u0644\u0627\u062D\u0638\u0627\u062A",
  REVIEW_PANE_ON_STARTUP: "\u062A\u0645\u0643\u064A\u0646 \u062C\u0632\u0621 \u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0627\u062A \u0639\u0646\u062F \u0628\u062F\u0621 \u0627\u0644\u062A\u0634\u063A\u064A\u0644",
  TAGS_TO_REVIEW: "\u0648\u0633\u0648\u0645 \u0644\u0644\u0645\u0631\u0627\u062C\u0639\u0629",
  TAGS_TO_REVIEW_DESC: "#\u0623\u062F\u062E\u0644 \u0627\u0644\u0648\u0633\u0648\u0645 \u0645\u0641\u0635\u0648\u0644\u0629 \u0628\u0645\u0633\u0627\u0641\u0627\u062A \u0623\u0648 \u062E\u0637\u0648\u0637 \u062C\u062F\u064A\u062F\u0629 \u060C \u0623\u064A : \u0645\u0631\u0627\u062C\u0639\u0629# \u0648\u0633\u06452# \u0648\u0633\u06453",
  OPEN_RANDOM_NOTE: "\u0627\u0641\u062A\u062D \u0645\u0644\u0627\u062D\u0638\u0629 \u0639\u0634\u0648\u0627\u0626\u064A\u0629 \u0644\u0644\u0645\u0631\u0627\u062C\u0639\u0629",
  OPEN_RANDOM_NOTE_DESC: "(Pagerank) \u0639\u0646\u062F \u062A\u0639\u0637\u064A\u0644 \u0647\u0630\u0627 \u0627\u0644\u062E\u064A\u0627\u0631 \u060C\u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0627\u062A \u0633\u064A\u062A\u0645 \u062A\u0631\u062A\u064A\u0628\u064F\u0647\u0627 \u062D\u0633\u0628 \u0627\u0644\u0623\u0647\u0645\u064A\u0629",
  AUTO_NEXT_NOTE: "\u0627\u0641\u062A\u062D \u0627\u0644\u0645\u0644\u0627\u062D\u0638\u0629 \u0627\u0644\u062A\u0627\u0644\u064A\u0629 \u062A\u0644\u0642\u0627\u0626\u064A\u064B\u0627 \u0628\u0639\u062F \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "\u062A\u0639\u0637\u064A\u0644 \u062E\u064A\u0627\u0631\u0627\u062A \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629 \u0641\u064A \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u0644\u0641\u0627\u062A \u060C \u0623\u064A \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629:\u0627\u0644\u0633\u0647\u0644 \u0627\u0644\u0635\u0639\u0628 \u0627\u0644\u062C\u064A\u062F",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "\u0639\u0646\u062F \u062A\u063A\u064A\u064A\u0631 \u0647\u0630\u0627 \u0627\u0644\u062E\u064A\u0627\u0631 Obsidian \u0623\u0639\u062F \u062A\u0634\u063A\u064A\u0644 , command hotkeys. \u0628\u0639\u062F \u0627\u0644\u062A\u0639\u0637\u064A\u0644 \u060C \u064A\u0645\u0643\u0646\u0643 \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629 \u0628\u0627\u0633\u062A\u062E\u062F\u0627\u0645",
  MAX_N_DAYS_REVIEW_QUEUE: "\u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0639\u062F\u062F \u0627\u0644\u0623\u064A\u0627\u0645 \u0627\u0644\u062A\u064A \u064A\u062C\u0628 \u0639\u0631\u0636\u0647\u0627 \u0639\u0644\u0649 \u0627\u0644\u0644\u0648\u062D\u0629 \u0627\u0644\u064A\u0645\u0646\u0649",
  MIN_ONE_DAY: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0639\u062F\u062F \u0627\u0644\u0623\u064A\u0627\u0645 1 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644",
  VALID_NUMBER_WARNING: "\u064A\u0631\u062C\u0649 \u062A\u0642\u062F\u064A\u0645 \u0631\u0642\u0645 \u0635\u0627\u0644\u062D",
  UI_PREFERENCES: "\u062A\u0641\u0636\u064A\u0644\u0627\u062A \u0648\u0627\u062C\u0647\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0627\u0644\u0639\u0631\u0636 \u0627\u0644\u0634\u062C\u0631\u064A \u0644\u0644\u0631\u064F\u0632\u0645 \u0645\u0648\u0633\u0639 \u0628\u062D\u064A\u062B \u062A\u0637\u0647\u0631 \u0627\u0644\u0645\u0644\u0641\u0627\u062A \u0627\u0644\u0641\u0631\u0639\u064A\u0629 \u0643\u0644\u0647\u0627",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: " \u0639\u0637\u0644 \u0647\u0630\u0627 \u0627\u0644\u062E\u064A\u0627\u0631 \u0644\u0637\u064A \u0627\u0644\u0631\u064F\u0632\u0645 \u0627\u0644\u0645\u062A\u062F\u0627\u062E\u0644\u0629 \u0641\u064A \u0646\u0641\u0633 \u0627\u0644\u0628\u0637\u0627\u0642\u0629 , \u0645\u0641\u064A\u062F \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u062F\u064A\u0643 \u0628\u0637\u0627\u0642\u0627\u062A \u062A\u0646\u062A\u0645\u064A \u0625\u0644\u0649 \u0627\u0644\u0639\u062F\u064A\u062F \u0645\u0646 \u0627\u0644\u0631\u064F\u0632\u0645 \u0641\u064A \u0646\u0641\u0633 \u0627\u0644\u0645\u0644\u0641",
  ALGORITHM: "\u062E\u0648\u0627\u0631\u0632\u0645\u064A\u0629",
  CHECK_ALGORITHM_WIKI: '<a href="${algo_url}">algorithm implementation</a> :\u0644\u0645\u0632\u064A\u062F \u0645\u0646 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062A \u062A\u062D\u0642\u0642 \u0645\u0646',
  BASE_EASE: "\u0633\u0647\u0648\u0644\u0629 \u0627\u0644\u0642\u0627\u0639\u062F\u0629",
  BASE_EASE_DESC: "\u0627\u0644\u062D\u062F \u0627\u0644\u0623\u062F\u0646\u0649 = 130 \u060C \u0648\u064A\u0641\u0636\u0644 \u062D\u0648\u0627\u0644\u064A 250.",
  BASE_EASE_MIN_WARNING: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0633\u0647\u0648\u0644\u0629 \u0627\u0644\u0642\u0627\u0639\u062F\u0629 130 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644.",
  LAPSE_INTERVAL_CHANGE: "\u0627\u0644\u0641\u0627\u0635\u0644 \u0627\u0644\u0632\u0645\u0646\u064A \u064A\u062A\u063A\u064A\u0631 \u0639\u0646\u062F \u0645\u0631\u0627\u062C\u0639\u0629 \u0628\u0637\u0627\u0642\u0629/\u0645\u0644\u0627\u062D\u0638\u0629 \u0635\u0639\u0628\u0629",
  LAPSE_INTERVAL_CHANGE_DESC: "newInterval = oldInterval * intervalChange / 100.",
  EASY_BONUS: "\u0645\u0643\u0627\u0641\u0623\u0629 \u0633\u0647\u0644\u0629",
  EASY_BONUS_DESC: "\u062A\u062A\u064A\u062D \u0644\u0643 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0633\u0647\u0644\u0629 \u0636\u0628\u0637 \u0627\u0644\u0641\u0631\u0642 \u0641\u064A \u0627\u0644\u0641\u0648\u0627\u0635\u0644 \u0627\u0644\u0632\u0645\u0646\u064A\u0629 \u0628\u064A\u0646 \u0627\u0644\u0631\u062F \u0627\u0644\u062C\u064A\u062F \u0648\u0627\u0644\u0633\u0647\u0644 \u0639\u0644\u0649 \u0628\u0637\u0627\u0642\u0629/\u0645\u0644\u0627\u062D\u0638\u0629 (\u0627\u0644\u062D\u062F \u0627\u0644\u0623\u062F\u0646\u0649 = 100 \u066A).",
  EASY_BONUS_MIN_WARNING: "\u064A\u062C\u0628 \u0623\u0646 \u062A\u0643\u0648\u0646 \u0627\u0644\u0645\u0643\u0627\u0641\u0623\u0629 \u0627\u0644\u0633\u0647\u0644\u0629 100 \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644.",
  MAX_INTERVAL: "\u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u0641\u0627\u0635\u0644",
  MAX_INTERVAL_DESC: "\u064A\u062A\u064A\u062D \u0644\u0643 \u0648\u0636\u0639 \u062D\u062F \u0623\u0639\u0644\u0649  \u0644\u0644\u0641\u0627\u0635\u0644 \u0627\u0644\u0632\u0645\u0646\u064A (\u0627\u0641\u062A\u0631\u0627\u0636\u064A = 100 \u0639\u0627\u0645).",
  MAX_INTERVAL_MIN_WARNING: "\u064A\u062C\u0628 \u0623\u0646 \u064A\u0643\u0648\u0646 \u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0644\u0641\u0627\u0635\u0644 \u0627\u0644\u0632\u0645\u0646\u064A \u0644\u0645\u062F\u0629 \u064A\u0648\u0645 \u0648\u0627\u062D\u062F \u0639\u0644\u0649 \u0627\u0644\u0623\u0642\u0644.",
  MAX_LINK_CONTRIB: "\u0623\u0642\u0635\u0649 \u0645\u0633\u0627\u0647\u0645\u0629 \u0627\u0631\u062A\u0628\u0627\u0637",
  MAX_LINK_CONTRIB_DESC: "\u0623\u0642\u0635\u0649 \u0645\u0633\u0627\u0647\u0645\u0629 \u0644\u0644\u0633\u0647\u0648\u0644\u0629 \u0627\u0644\u0645\u0631\u062C\u062D\u0629 \u0644\u0644\u0645\u0644\u0627\u062D\u0638\u0627\u062A \u0627\u0644\u0645\u0631\u062A\u0628\u0637\u0629 \u0628\u0627\u0644\u0633\u0647\u0648\u0644\u0629 \u0627\u0644\u0623\u0648\u0644\u064A\u0629.",
  LOGGING: "\u062A\u0633\u062C\u064A\u0644",
  DISPLAY_DEBUG_INFO: "\u0639\u0631\u0636 \u0645\u0639\u0644\u0648\u0645\u0627\u062A \u0627\u0644\u062A\u0635\u062D\u064A\u062D \u0639\u0644\u0649 \u0648\u062D\u062F\u0629 \u062A\u062D\u0643\u0645 \u0627\u0644\u0645\u0637\u0648\u0631\u061F",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "\u0645\u0644\u0627\u062D\u0638\u0627\u062A \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0629",
  CLOSE: "\u0623\u063A\u0644\u0642",
  NEW: "\u062C\u062F\u064A\u062F",
  YESTERDAY: "\u0627\u0644\u0628\u0627\u0631\u062D\u0629",
  TODAY: "\u0627\u0644\u064A\u0648\u0645",
  TOMORROW: "\u0627\u0644\u063A\u062F",
  // stats-modal.tsx
  STATS_TITLE: "\u0625\u062D\u0635\u0627\u0626\u064A\u0627\u062A",
  MONTH: "\u0634\u0647\u0631",
  QUARTER: "\u0631\u0628\u0639 \u0627\u0644\u0633\u0646\u0629",
  YEAR: "\u0633\u0646\u0629",
  LIFETIME: "",
  FORECAST: "",
  FORECAST_DESC: "\u0639\u062F\u062F \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0627\u0644\u0645\u0633\u062A\u062D\u0642\u0629 \u0641\u064A \u0627\u0644\u0645\u0633\u062A\u0642\u0628\u0644",
  SCHEDULED: "\u0627\u0644\u0645\u0642\u0631\u0631",
  DAYS: "\u0623\u064A\u0627\u0645",
  NUMBER_OF_CARDS: "\u0639\u062F\u062F \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A",
  REVIEWS_PER_DAY: "\u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0627\u062A/\u0627\u0644\u064A\u0648\u0645 ${avg} :\u0645\u062A\u0648\u0633\u0637",
  INTERVALS: "\u0641\u0648\u0627\u0635\u0644 \u0632\u0645\u0646\u064A\u0629",
  INTERVALS_DESC: "\u0627\u0644\u062A\u0623\u062E\u064A\u0631 \u062D\u062A\u0649 \u064A\u062A\u0645 \u0639\u0631\u0636 \u0627\u0644\u0645\u0631\u0627\u062C\u0639\u0627\u062A \u0645\u0631\u0629 \u0623\u062E\u0631\u0649",
  COUNT: "\u0639\u062F\u062F",
  INTERVALS_SUMMARY: "${longest} : \u0623\u0637\u0648\u0644 \u0641\u0627\u0635\u0644 \u0632\u0645\u0646\u064A ,${avg} :\u0645\u062A\u0648\u0633\u0637 \u0627\u0644\u0641\u0627\u0635\u0644 \u0627\u0644\u0632\u0645\u0646\u064A",
  EASES: "\u0627\u0644\u0633\u0647\u0648\u0644\u0629",
  EASES_SUMMARY: "${avgEase} :\u0645\u062A\u0648\u0633\u0637 \u0627\u0644\u0633\u0647\u0648\u0644\u0629",
  CARD_TYPES: "\u0623\u0646\u0648\u0627\u0639 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A",
  CARD_TYPES_DESC: "\u0648\u0647\u0630\u0627 \u064A\u0634\u0645\u0644 \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A \u0627\u0644\u0645\u062E\u0641\u064A\u0629 \u0643\u0630\u0644\u0643 \u060C \u0625\u0646 \u0648\u062C\u062F\u062A",
  CARD_TYPE_NEW: "\u062C\u062F\u064A\u062F\u0629",
  CARD_TYPE_YOUNG: "\u0635\u063A\u064A\u0631\u0629",
  CARD_TYPE_MATURE: "\u0646\u0627\u0636\u062C\u0629",
  CARD_TYPES_SUMMARY: " ${totalCardsCount} :\u0625\u062C\u0645\u0627\u0644\u064A \u0639\u062F\u062F \u0627\u0644\u0628\u0637\u0627\u0642\u0627\u062A"
};

// src/lang/locale/cz.ts
var cz_default = {
  // flashcard-modal.tsx
  DECKS: "Bal\xED\u010Dky",
  DUE_CARDS: "Karti\u010Dky po term\xEDnu",
  NEW_CARDS: "Nov\xE9 karti\u010Dky",
  TOTAL_CARDS: "Karti\u010Dek celkem",
  BACK: "Back",
  SKIP: "Skip",
  EDIT_CARD: "Edit Card",
  RESET_CARD_PROGRESS: "Vynulovat pokrok karti\u010Dky",
  HARD: "Te\u017Ek\xE9",
  GOOD: "Dobr\xE9",
  EASY: "Jednoduch\xE9",
  SHOW_ANSWER: "Uk\xE1zat odpov\u011B\u010F",
  CARD_PROGRESS_RESET: "Pokrok karti\u010Dky byl vynulov\xE1n.",
  SAVE: "Save",
  CANCEL: "Cancel",
  NO_INPUT: "No input provided.",
  CURRENT_EASE_HELP_TEXT: "Current Ease: ",
  CURRENT_INTERVAL_HELP_TEXT: "Current Interval: ",
  CARD_GENERATED_FROM: "Generated from: ${notePath}",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "Otev\u0159\xEDt pozn\xE1mku k revizi",
  REVIEW_CARDS: "Pozn\xE1mek k revizi",
  REVIEW_EASY_FILE_MENU: "Revize: Jednoduch\xE9",
  REVIEW_GOOD_FILE_MENU: "Revize: Dobr\xE9",
  REVIEW_HARD_FILE_MENU: "Revize: T\u011B\u017Ek\xE9",
  REVIEW_NOTE_EASY_CMD: "Ozna\u010Dit pozn\xE1mku jako jednoduchou",
  REVIEW_NOTE_GOOD_CMD: "Ozna\u010Dit pozn\xE1mku jako dobrou",
  REVIEW_NOTE_HARD_CMD: "Ozna\u010Dit pozn\xE1mku jako te\u017Ekou",
  REVIEW_ALL_CARDS: "Revidovat karti\u010Dky ve v\u0161ech pozn\xE1mk\xE1ch",
  CRAM_ALL_CARDS: "Select a deck to cram",
  REVIEW_CARDS_IN_NOTE: "Revidovat karti\u010Dky v t\xE9to pozn\xE1mce.",
  CRAM_CARDS_IN_NOTE: "Cram karti\u010Dky v t\xE9to pozn\xE1mce.",
  VIEW_STATS: "Uk\xE1zat statistiky",
  STATUS_BAR: "Revize: ${dueNotesCount} pozn\xE1mek, ${dueFlashcardsCount} karti\u010Dek po term\xEDnu",
  SYNC_TIME_TAKEN: "Synchronizace trvala ${t}ms",
  NOTE_IN_IGNORED_FOLDER: "Pozn\xE1mka je ulo\u017Eena v ignorovan\xE9 slo\u017Ece (zkontrolujte nastaven\xED).",
  PLEASE_TAG_NOTE: "Pros\xEDm ozna\u010Dne pozn\xE1mku odpov\xEDdaj\xEDc\xEDm tagem pro revizi (v nastaven\xED).",
  RESPONSE_RECEIVED: "Odpov\u011B\u010F p\u0159ijata.",
  NO_DECK_EXISTS: "Neexistuje \u017E\xE1dn\xFD bal\xED\u010Dek pro ${deckName}",
  ALL_CAUGHT_UP: "V\u0161e zrevidov\xE1no",
  // scheduling.ts
  DAYS_STR_IVL: "${interval} den/dn\xED",
  MONTHS_STR_IVL: "${interval} m\u011Bs\xEDc(\u016F)",
  YEARS_STR_IVL: "${interval} rok(\u016F)",
  DAYS_STR_IVL_MOBILE: "${interval}d",
  MONTHS_STR_IVL_MOBILE: "${interval}m",
  YEARS_STR_IVL_MOBILE: "${interval}r",
  // settings.ts
  SETTINGS_HEADER: "Spaced Repetition Plugin - Nastaven\xED",
  CHECK_WIKI: 'Pro v\xEDce informac\xED jd\u011Bte na <a href="${wiki_url}">wiki</a>.',
  FOLDERS_TO_IGNORE: "Ignorovan\xE9 slo\u017Eky",
  FOLDERS_TO_IGNORE_DESC: "Zadejte cesty ke slo\u017Ek\xE1m odd\u011Blen\xE9 od\u0159\xE1dkov\xE1n\xEDm nap\u0159\xEDkad. \u0160ablony Meta/Scripts",
  FLASHCARDS: "Karti\u010Dky",
  FLASHCARD_EASY_LABEL: "Easy Button Text",
  FLASHCARD_GOOD_LABEL: "Good Button Text",
  FLASHCARD_HARD_LABEL: "Hard Button Text",
  FLASHCARD_EASY_DESC: 'Customize the label for the "Easy" Button',
  FLASHCARD_GOOD_DESC: 'Customize the label for the "Good" Button',
  FLASHCARD_HARD_DESC: 'Customize the label for the "Hard" Button',
  FLASHCARD_TAGS: "Tag pro karti\u010Dky",
  FLASHCARD_TAGS_DESC: "Zadete tagy ood\u011Blen\xE9 mezerou nebo od\u0159\xE1dkov\xE1n\xEDm nap\u0159\xEDklad. #karti\u010Dky #bal\xED\u010Dke2 #bal\xED\u010Dek3.",
  CONVERT_FOLDERS_TO_DECKS: "P\u0159ev\xE9st slo\u017Eky na bal\xED\u010Dky a podbal\xED\u010Dky?",
  CONVERT_FOLDERS_TO_DECKS_DESC: "Toto je alternativa k tag\u016Fm karti\u010Dek viz nastaven\xED v\xFD\u0161e.",
  INLINE_SCHEDULING_COMMENTS: "Ulo\u017Eit pl\xE1novac\xED koment\xE1\u0159 na stejn\xFD \u0159\xE1dek jako posledn\xED polo\u017Eka karti\u010Dky?",
  INLINE_SCHEDULING_COMMENTS_DESC: "Zapnut\xED t\xE9to volby zp\u016Fsob\xED, \u017Ee HTML koment\xE1\u0159e nebudou rozb\xEDjet form\xE1tov\xE1n\xED list\u016F.",
  BURY_SIBLINGS_TILL_NEXT_DAY: "Odlo\u017Eit p\u0159\xEDbuzn\xE9 karti\u010Dky na dal\u0161\xED den?",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "P\u0159\xEDbuzn\xE9 karti\u010Dky jsou karti\u010Dky generovan\xE9 z textu stejn\xE9 pozn\xE1mky nap\u0159\xEDklad cloze smaz\xE1n\xED",
  SHOW_CARD_CONTEXT: "Uk\xE1zat kontext v karti\u010Dce?",
  SHOW_CARD_CONTEXT_DESC: "nap\u0159\xEDklad Titulek > Nadpis1 > Podnadpis > ... > Podnadpis",
  CARD_MODAL_HEIGHT_PERCENT: "V\xFD\u0161ka karti\u010Dek v procentech",
  CARD_MODAL_SIZE_PERCENT_DESC: "M\u011Blo by b\xFDt nastaveno na 100% na mobilu nebo kdy\u017E pou\u017E\xEDv\xE1te velk\xE9 obr\xE1zky",
  RESET_DEFAULT: "Resetovat v\xFDchoz\xED nastaven\xED",
  CARD_MODAL_WIDTH_PERCENT: "\u0160\xED\u0159ka karti\u010Dek v procentech",
  RANDOMIZE_CARD_ORDER: "N\xE1hodn\u011B zm\u011Bnit po\u0159ad\xED karti\u010Dek b\u011Bhem revize?",
  DISABLE_CLOZE_CARDS: "Vypnout cloze karti\u010Dky?",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "P\u0159ev\xE9st ==zv\xFDrazn\u011Bn\xED== na clozes?",
  CONVERT_BOLD_TEXT_TO_CLOZES: "P\u0159ev\xE9st **tu\u010Dn\xFD text** na clozes?",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "P\u0159ev\xE9st {{slo\u017Een\xE9 z\xE1vorky}} na clozes?",
  INLINE_CARDS_SEPARATOR: "Odd\u011Blova\u010D pro inline karti\u010Dky",
  FIX_SEPARATORS_MANUALLY_WARNING: "Pozor. Jakmile toto zm\u011Bn\xEDte, budete muset ru\u010Dn\u011B upravit v\u0161echny existuj\xEDc\xED karti\u010Dky.",
  INLINE_REVERSED_CARDS_SEPARATOR: "Odd\u011Blova\u010D pro oto\u010Den\xE9 inline karti\u010Dky",
  MULTILINE_CARDS_SEPARATOR: "Odd\u011Blova\u010D pro v\xEDce\u0159\xE1dkov\xE9 karti\u010Dky",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "Odd\u011Blova\u010D pro v\xEDce\u0159\xE1dkove oto\u010Den\xE9 karti\u010Dky",
  NOTES: "Pozn\xE1mky",
  REVIEW_PANE_ON_STARTUP: "Enable note review pane on startup",
  TAGS_TO_REVIEW: "Tag pro revizi",
  TAGS_TO_REVIEW_DESC: "Zadejte tagy odd\u011Blen\xE9 mezerami nebo od\u0159\xE1dkov\xE1n\xEDm nap\u0159\xEDklad #review #tag2 #tag3.",
  OPEN_RANDOM_NOTE: "Otev\u0159\xEDt n\xE1hodnou pozn\xE1mku pro revizi",
  OPEN_RANDOM_NOTE_DESC: "Pokud toto vypnete, pozn\xE1mky budou \u0159azeny dle d\u016Fle\u017Eitosti (PageRank).",
  AUTO_NEXT_NOTE: "Otev\u0159\xEDt automaticky dal\u0161\xED pozn\xE1mku po dokon\u010Den\xED revize",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "Vypnout volby revize v menu souboru nap\u0159\xEDklad 'Revize: Jednoduch\xE9'",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "Po vypnut\xED m\u016F\u017Eete pou\u017E\xEDvat kl\xE1vesov\xE9 zkratky. Restartujte Obsidian po zm\u011Bn\u011B nastaven\xED.",
  MAX_N_DAYS_REVIEW_QUEUE: "Maxim\xE1ln\xED po\u010Det dn\xED zobrazen\xFDch v prav\xE9m panelu",
  MIN_ONE_DAY: "Po\u010Det dn\xED mus\xED b\xFDt minim\xE1ln\u011B 1.",
  VALID_NUMBER_WARNING: "Pros\xEDm zadejte validn\xED \u010D\xEDslo.",
  UI_PREFERENCES: "P\u0159edvolby u\u017Eivatelsk\xE9ho rozhran\xED",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "Stromy bal\xED\u010Dky by m\u011Bly b\xFDt zpo\u010D\xE1tku zobrazeny jako rozbalen\xE9",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: "Vypn\u011Bte toto, chcete-li sbalit vno\u0159en\xE9 bal\xED\u010Dky na stejn\xE9 kart\u011B. To je u\u017Eite\u010Dn\xE9, pokud m\xE1te karti\u010Dky, kter\xE9 pat\u0159\xED k mnoha bal\xED\u010Dk\u016Fm ve stejn\xE9m souboru.",
  ALGORITHM: "Algoritmus",
  CHECK_ALGORITHM_WIKI: 'Pro v\xEDce informac\xED jd\u011Bte na <a href="${algo_url}">popis algoritmu</a>.',
  BASE_EASE: "Z\xE1kladn\xED slo\u017Eitost",
  BASE_EASE_DESC: "minimum = 130, nejl\xE9pe p\u0159ibli\u017En\u011B 250.",
  BASE_EASE_MIN_WARNING: "Z\xE1kladn\xED slo\u017Eitost mus\xED b\xFDt minim\xE1ln\u011B 130.",
  LAPSE_INTERVAL_CHANGE: "Zm\u011Bna intervalu pokud karti\u010Dku/pozn\xE1mku ozna\u010D\xEDte jako slo\u017Eitou",
  LAPSE_INTERVAL_CHANGE_DESC: "nov\xFD_inteval = star\xFD_interval * zm\u011Bna_intevalu / 100.",
  EASY_BONUS: "Bonus pro jednoduch\xE9",
  EASY_BONUS_DESC: "Tento bonus umo\u017E\u0148uje nastavit rozd\xEDl intervalu mezi jednoduch\xFDmi a dobr\xFDmi karti\u010Dkami/pozn\xE1mkami (minimum = 100%).",
  EASY_BONUS_MIN_WARNING: "Bonus pro jednoduchost mus\xED b\xFDt minim\xE1ln\u011B 100.",
  MAX_INTERVAL: "Maxim\xE1ln\xED interval",
  MAX_INTERVAL_DESC: "Umo\u017E\u0148uje nastavit horn\xED limit pro interval (defaultn\u011B = 100 let).",
  MAX_INTERVAL_MIN_WARNING: "Maxim\xE1ln\xED interval mus\xED b\xFDt alespo\u0148 1 den.",
  MAX_LINK_CONTRIB: "Maxim\xE1ln\xED p\u0159\xEDsp\u011Bv\u011Bk prolinkov\xE1n\xED",
  MAX_LINK_CONTRIB_DESC: "Maxim\xE1ln\xED p\u0159\xEDsp\u011Bvek v\xE1\u017Een\xE9 slo\u017Eitosti prolinkovan\xFDch pozn\xE1mek pou\u017Eit\xFD pro ur\u010Den\xED po\u010D\xE1te\u010Dn\xED slo\u017Eitosti.",
  LOGGING: "Zaznamen\xE1v\xE1m",
  DISPLAY_DEBUG_INFO: "Zobrazit informace pro lad\u011Bn\xED na v\xFDvoj\xE1\u0159sk\xE9 konzoli?",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "Fronta pozn\xE1mek k revizi",
  CLOSE: "Uzav\u0159en\xE9",
  NEW: "Nov\xE9",
  YESTERDAY: "V\u010Dera",
  TODAY: "Dnes",
  TOMORROW: "Z\xEDtra",
  // stats-modal.tsx
  STATS_TITLE: "Statistiky",
  MONTH: "M\u011Bs\xEDc",
  QUARTER: "\u010Ctvrtlet\xED",
  YEAR: "Rok",
  LIFETIME: "Celkov\u011B",
  FORECAST: "P\u0159edpov\u011B\u010F",
  FORECAST_DESC: "Celkov\xFD po\u010Det karti\u010Dek, kter\xFDm vypr\u0161\xED term\xEDn",
  SCHEDULED: "Napl\xE1nov\xE1no",
  DAYS: "Dn\xED",
  NUMBER_OF_CARDS: "Po\u010Det karti\u010Dek",
  REVIEWS_PER_DAY: "Pr\u016Fm\u011Br: ${avg} revize/den",
  INTERVALS: "Intervaly",
  INTERVALS_DESC: "Doba, za kterou bude znovu zobrazeno k revize",
  COUNT: "Po\u010Det",
  INTERVALS_SUMMARY: "Pr\u016Fm\u011Brn\xFD interval: ${avg}, Nejdel\u0161\xED interval: ${longest}",
  EASES: "Slo\u017Eitost",
  EASES_SUMMARY: "Pr\u016Fm\u011Brn\xE1 slo\u017Eitost: ${avgEase}",
  CARD_TYPES: "Typy karti\u010Dek",
  CARD_TYPES_DESC: "Obsahuje i odlo\u017Een\xE9 karti\u010Dky (pokud existuj\xED)",
  CARD_TYPE_NEW: "Nov\xE1",
  CARD_TYPE_YOUNG: "Mlad\xE1",
  CARD_TYPE_MATURE: "Dosp\u011Bl\xE1",
  CARD_TYPES_SUMMARY: "Karti\u010Dek celkem: ${totalCardsCount}"
};

// src/lang/locale/bn.ts
var bn_default = {};

// src/lang/locale/da.ts
var da_default = {};

// src/lang/locale/de.ts
var de_default = {
  // flashcard-modal.tsx
  DECKS: "Stapel",
  DUE_CARDS: "Anstehende Karten",
  NEW_CARDS: "Neue Karten",
  TOTAL_CARDS: "Alle Karten",
  BACK: "Back",
  SKIP: "Skip",
  EDIT_CARD: "Edit Card",
  RESET_CARD_PROGRESS: "Kartenfortschritt zur\xFCcksetzten",
  HARD: "Schwer",
  GOOD: "Gut",
  EASY: "Einfach",
  SHOW_ANSWER: "Zeige Antwort",
  CARD_PROGRESS_RESET: "Kartenfortschritt wurde zur\xFCckgesetzt.",
  SAVE: "Save",
  CANCEL: "Cancel",
  NO_INPUT: "No input provided.",
  CURRENT_EASE_HELP_TEXT: "Current Ease: ",
  CURRENT_INTERVAL_HELP_TEXT: "Current Interval: ",
  CARD_GENERATED_FROM: "Generated from: ${notePath}",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "Notiz zur Wiederholung \xF6ffnen",
  REVIEW_CARDS: "Lernkarten wiederholen",
  REVIEW_EASY_FILE_MENU: "Notiz abschliessen als: Einfach",
  REVIEW_GOOD_FILE_MENU: "Notiz abschliessen als: Gut",
  REVIEW_HARD_FILE_MENU: "Notiz abschliessen als: Schwer",
  REVIEW_NOTE_EASY_CMD: "Notiz abschliessen als: Einfach",
  REVIEW_NOTE_GOOD_CMD: "Notiz abschliessen als: Gut",
  REVIEW_NOTE_HARD_CMD: "Notiz abschliessen als: Schwer",
  REVIEW_ALL_CARDS: "Alle Lernkarten wiederholen",
  CRAM_ALL_CARDS: "Select a deck to cram",
  REVIEW_CARDS_IN_NOTE: "Lernkarten in dieser Notiz wiederholen",
  CRAM_CARDS_IN_NOTE: "Lernkarten in dieser Notiz pauken.",
  VIEW_STATS: "Statistiken anzeigen",
  STATUS_BAR: "Wiederholung: ${dueNotesCount} Notiz(en), ${dueFlashcardsCount} Karte(n) anstehend",
  SYNC_TIME_TAKEN: "Sync dauerte ${t}ms",
  NOTE_IN_IGNORED_FOLDER: "Notiz befindet sich in einem ausgeschlossenen Ordner (siehe Einstellungen).",
  PLEASE_TAG_NOTE: "Bitte die Notiz f\xFCr Wiederholungen entsprechend taggen (siehe Einstellungen).",
  RESPONSE_RECEIVED: "Antwort erhalten.",
  NO_DECK_EXISTS: "Kein Stapel f\xFCr ${deckName} gefunden.",
  ALL_CAUGHT_UP: "Yuhu! Alles geschafft! :D.",
  // scheduling.ts
  DAYS_STR_IVL: "${interval} Tag(e)",
  MONTHS_STR_IVL: "${interval} Monat(e)",
  YEARS_STR_IVL: "${interval} Jahr(e)",
  DAYS_STR_IVL_MOBILE: "${interval}d",
  MONTHS_STR_IVL_MOBILE: "${interval}m",
  YEARS_STR_IVL_MOBILE: "${interval}y",
  // settings.ts
  SETTINGS_HEADER: "Spaced Repetition Plugin - Einstellungen",
  CHECK_WIKI: 'Weitere Informationen gibt es im <a href="${wiki_url}">Wiki</a> (english).',
  FOLDERS_TO_IGNORE: "Ausgeschlossene Ordner",
  FOLDERS_TO_IGNORE_DESC: "Mehrere Ordner mit Zeilenumbr\xFCchen getrennt angeben. Bsp. OrdnerA[Zeilenumbruch]OrdnerB/Unterordner",
  FLASHCARDS: "Lernkarten",
  FLASHCARD_EASY_LABEL: "Easy Button Text",
  FLASHCARD_GOOD_LABEL: "Good Button Text",
  FLASHCARD_HARD_LABEL: "Hard Button Text",
  FLASHCARD_EASY_DESC: 'Customize the label for the "Easy" Button',
  FLASHCARD_GOOD_DESC: 'Customize the label for the "Good" Button',
  FLASHCARD_HARD_DESC: 'Customize the label for the "Hard" Button',
  FLASHCARD_TAGS: "Lernkarten Tags",
  FLASHCARD_TAGS_DESC: "Mehrere Tags mit Leerzeichen oder Zeilenumbr\xFCchen getrennt angeben. Bsp. #karte #stapel2 #stapel3.",
  CONVERT_FOLDERS_TO_DECKS: "Ordner in Stapel und Substapel umwandeln?",
  CONVERT_FOLDERS_TO_DECKS_DESC: 'Eine Alternative zur oberen "Lernkarten Tags" Option.',
  INLINE_SCHEDULING_COMMENTS: "Den Fortschritt in der gleichen Zeile wie die letzte Zeile einer Lernkartei speichern?",
  INLINE_SCHEDULING_COMMENTS_DESC: "Wenn aktiviert, wird der HTML Kommentar die umgebende Liste nicht aufbrechen.",
  BURY_SIBLINGS_TILL_NEXT_DAY: "Verwandte Karten auf den n\xE4chsten Tag verlegen?",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "Verwandte Karten sind aus der gleichen Karte generiert worden (z.B. L\xFCckentextkarten oder beidseitige Karten).",
  SHOW_CARD_CONTEXT: "Kontext in den Karten anzeigen?",
  SHOW_CARD_CONTEXT_DESC: "Bsp. Titel > \xDCberschrift 1 > Sektion > ... > Untersektion",
  CARD_MODAL_HEIGHT_PERCENT: "H\xF6he der Lernkartei in Prozent",
  CARD_MODAL_SIZE_PERCENT_DESC: "Auf kleinen Bildschirmen (z.B. Smartphones) oder bei sehr grossen Bildern sollte dieser Wert auf 100% gesetzt werden.",
  RESET_DEFAULT: "Standardeinstellung wiederherstellen",
  CARD_MODAL_WIDTH_PERCENT: "Breite einer Lernkarte in Prozent",
  RANDOMIZE_CARD_ORDER: "W\xE4hrend der Wiederhoung die Reihenfolge zuf\xE4llig mischen?",
  DISABLE_CLOZE_CARDS: "L\xFCckentextkarten (cloze deletions) deaktivieren?",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "==Hervorgehobenen== Text in L\xFCckentextkarten umwandeln?",
  CONVERT_BOLD_TEXT_TO_CLOZES: "**Fettgedruckten** Text in L\xFCckentextkarten umwandeln?",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "{{Geschweifte Klammern}} Text in L\xFCckentextkarten umwandeln?",
  INLINE_CARDS_SEPARATOR: "Trennzeichen f\xFCr einzeilige Lernkarten",
  FIX_SEPARATORS_MANUALLY_WARNING: "Wenn diese Einstellung ge\xE4ndert wird, dann m\xFCssen die entsprechenden Lernkarten manuell angepasst werden.",
  INLINE_REVERSED_CARDS_SEPARATOR: "Trennzeichen f\xFCr einzeilige beidseitige Lernkarten",
  MULTILINE_CARDS_SEPARATOR: "Trennzeichen f\xFCr mehrzeilige Lernkarten",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "Trennzeichen f\xFCr mehrzeilige beidseitige Lernkarten",
  NOTES: "Notizen",
  REVIEW_PANE_ON_STARTUP: "Enable note review pane on startup",
  TAGS_TO_REVIEW: "Zu wiederholende Tags",
  TAGS_TO_REVIEW_DESC: "Mehrere Tags k\xF6nnen mit Leerzeichen oder Zeilenumbr\xFCchen getrennt angegeben werden. Bsp. #karte #tag1 #tag2.",
  OPEN_RANDOM_NOTE: "Zuf\xE4llige Karten wiederholen",
  OPEN_RANDOM_NOTE_DESC: "Wenn dies deaktiviert wird, dann werden die Notizen nach Wichtigkeit wiederholt (PageRank).",
  AUTO_NEXT_NOTE: "Nach einer Wiederholung automatisch die n\xE4chste Karte \xF6ffnen",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "Optionen zur Wiederholung im Men\xFC einer Datei deaktivieren. Bsp. Wiederholen: Einfach Gut Schwer",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "Nach dem Deaktivieren k\xF6nnen die Tastenk\xFCrzel zur Wiederholung verwendet werden. Obsidian muss nach einer \xC4nderung neu geladen weren.",
  MAX_N_DAYS_REVIEW_QUEUE: "Maximale Anzahl anstehender Notizen, die im rechten Fensterbereich angezeigt werden",
  MIN_ONE_DAY: "Anzahl der Tage muss mindestens 1 sein.",
  VALID_NUMBER_WARNING: "Bitte eine g\xFCltige Zahl eingeben.",
  UI_PREFERENCES: "Einstellungen der Benutzeroberfl\xE4che",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "Deckb\xE4ume sollten anf\xE4nglich erweitert angezeigt werden",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: "Deaktivieren Sie dies, um verschachtelte Decks in derselben Karte zu reduzieren. N\xFCtzlich, wenn Sie Karten haben, die zu vielen Decks in derselben Datei geh\xF6ren.",
  ALGORITHM: "Algorithmus",
  CHECK_ALGORITHM_WIKI: 'Weiterf\xFChrende Informationen: <a href="${algo_url}">Implementierung des Algorithmus</a> (english).',
  BASE_EASE: "Basis der Einfachheit",
  BASE_EASE_DESC: "Minimum ist 130. Empfohlen wird ca. 250.",
  BASE_EASE_MIN_WARNING: "Basis der Einfachheit muss mindestens 130 sein.",
  LAPSE_INTERVAL_CHANGE: "Anpassungsfaktor des Intervalls wenn eine Notiz / Karte 'Schwer' abgeschlossen wird",
  LAPSE_INTERVAL_CHANGE_DESC: "neuesIntervall = altesIntervall * anpassungsfaktor / 100.",
  EASY_BONUS: "Einfachheit-Bonus",
  EASY_BONUS_DESC: "Der Einfachheit-Bonus gibt an um welchen Faktor (in Prozent) das Intervall l\xE4nger sein soll, wenn eine Notiz / Karte 'Einfach' statt 'Gut' abgeschlossen wird. Minimum ist 100%.",
  EASY_BONUS_MIN_WARNING: "Der Einfachheit-Bonus muss mindestens 100 sein.",
  MAX_INTERVAL: "Maximales Intervall",
  MAX_INTERVAL_DESC: "Das maximale Intervall (in Tagen) f\xFCr Wiederholungen. Standard sind 100 Jahre.",
  MAX_INTERVAL_MIN_WARNING: "Das maximale Interall muss mindestens ein Tag sein.",
  MAX_LINK_CONTRIB: "Maximaler Einfluss von Links",
  MAX_LINK_CONTRIB_DESC: "Maximaler Einfluss der Einfachheiten verlinkter Notizen zur gewichteten initialen Einfachheit einer neuen Lernkarte.",
  LOGGING: "Logging",
  DISPLAY_DEBUG_INFO: "Informationen zum Debugging in der Entwicklerkonsole anzeigen?",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "Anstehende Notizen zur Wiederholung",
  CLOSE: "Schliessen",
  NEW: "Neu",
  YESTERDAY: "Gestern",
  TODAY: "Heute",
  TOMORROW: "Morgen",
  // stats-modal.tsx
  STATS_TITLE: "Statistiken",
  MONTH: "Month",
  QUARTER: "Quarter",
  YEAR: "Year",
  LIFETIME: "Lifetime",
  FORECAST: "Prognose",
  FORECAST_DESC: "Anzahl der k\xFCnftig anstehenden Karten",
  SCHEDULED: "Anstehend",
  DAYS: "Tage",
  NUMBER_OF_CARDS: "Anzahl der Karten",
  REVIEWS_PER_DAY: "Durchschnitt: ${avg} Wiederholungen/Tag",
  INTERVALS: "Intervalle",
  INTERVALS_DESC: "Intervalle bis Wiederholungen anstehen",
  COUNT: "Anzahl",
  INTERVALS_SUMMARY: "Durchschnittliches Intervall: ${avg}, L\xE4ngstes Intervall: ${longest}",
  EASES: "Einfachheit",
  EASES_SUMMARY: "Durchschnittliche Einfachheit: ${avgEase}",
  CARD_TYPES: "Kategorisierung",
  CARD_TYPES_DESC: "Verlegte Karten eingeschlossen",
  CARD_TYPE_NEW: "Neu",
  CARD_TYPE_YOUNG: "Jung",
  CARD_TYPE_MATURE: "Ausgereift",
  CARD_TYPES_SUMMARY: "Insgesamt ${totalCardsCount} Karten"
};

// src/lang/locale/en.ts
var en_default = {
  // flashcard-modal.tsx
  DECKS: "Decks",
  DUE_CARDS: "Due Cards",
  NEW_CARDS: "New Cards",
  TOTAL_CARDS: "Total Cards",
  BACK: "Back",
  SKIP: "Skip",
  EDIT_CARD: "Edit Card",
  RESET_CARD_PROGRESS: "Reset card's progress",
  HARD: "Hard",
  GOOD: "Good",
  EASY: "Easy",
  SHOW_ANSWER: "Show Answer",
  CARD_PROGRESS_RESET: "Card's progress has been reset.",
  SAVE: "Save",
  CANCEL: "Cancel",
  NO_INPUT: "No input provided.",
  CURRENT_EASE_HELP_TEXT: "Current Ease: ",
  CURRENT_INTERVAL_HELP_TEXT: "Current Interval: ",
  CARD_GENERATED_FROM: "Generated from: ${notePath}",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "Open a note for review",
  REVIEW_CARDS: "Review flashcards",
  REVIEW_EASY_FILE_MENU: "Review: Easy",
  REVIEW_GOOD_FILE_MENU: "Review: Good",
  REVIEW_HARD_FILE_MENU: "Review: Hard",
  REVIEW_NOTE_EASY_CMD: "Review note as easy",
  REVIEW_NOTE_GOOD_CMD: "Review note as good",
  REVIEW_NOTE_HARD_CMD: "Review note as hard",
  CRAM_ALL_CARDS: "Select a deck to cram",
  REVIEW_ALL_CARDS: "Review flashcards from all notes",
  REVIEW_CARDS_IN_NOTE: "Review flashcards in this note",
  CRAM_CARDS_IN_NOTE: "Cram flashcards in this note",
  VIEW_STATS: "View statistics",
  STATUS_BAR: "Review: ${dueNotesCount} note(s), ${dueFlashcardsCount} card(s) due",
  SYNC_TIME_TAKEN: "Sync took ${t}ms",
  NOTE_IN_IGNORED_FOLDER: "Note is saved under ignored folder (check settings).",
  PLEASE_TAG_NOTE: "Please tag the note appropriately for reviewing (in settings).",
  RESPONSE_RECEIVED: "Response received.",
  NO_DECK_EXISTS: "No deck exists for ${deckName}",
  ALL_CAUGHT_UP: "You're all caught up now :D.",
  // scheduling.ts
  DAYS_STR_IVL: "${interval} day(s)",
  MONTHS_STR_IVL: "${interval} month(s)",
  YEARS_STR_IVL: "${interval} year(s)",
  DAYS_STR_IVL_MOBILE: "${interval}d",
  MONTHS_STR_IVL_MOBILE: "${interval}m",
  YEARS_STR_IVL_MOBILE: "${interval}y",
  // settings.ts
  SETTINGS_HEADER: "Spaced Repetition Plugin - Settings",
  CHECK_WIKI: 'For more information, check the <a href="${wiki_url}">wiki</a>.',
  FOLDERS_TO_IGNORE: "Folders to ignore",
  FOLDERS_TO_IGNORE_DESC: "Enter folder paths separated by newlines i.e. Templates Meta/Scripts",
  FLASHCARDS: "Flashcards",
  FLASHCARD_EASY_LABEL: "Easy Button Text",
  FLASHCARD_GOOD_LABEL: "Good Button Text",
  FLASHCARD_HARD_LABEL: "Hard Button Text",
  FLASHCARD_EASY_DESC: 'Customize the label for the "Easy" Button',
  FLASHCARD_GOOD_DESC: 'Customize the label for the "Good" Button',
  FLASHCARD_HARD_DESC: 'Customize the label for the "Hard" Button',
  FLASHCARD_TAGS: "Flashcard tags",
  FLASHCARD_TAGS_DESC: "Enter tags separated by spaces or newlines i.e. #flashcards #deck2 #deck3.",
  CONVERT_FOLDERS_TO_DECKS: "Convert folders to decks and subdecks?",
  CONVERT_FOLDERS_TO_DECKS_DESC: "This is an alternative to the Flashcard tags option above.",
  INLINE_SCHEDULING_COMMENTS: "Save scheduling comment on the same line as the flashcard's last line?",
  INLINE_SCHEDULING_COMMENTS_DESC: "Turning this on will make the HTML comments not break list formatting.",
  BURY_SIBLINGS_TILL_NEXT_DAY: "Bury sibling cards until the next day?",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "Siblings are cards generated from the same card text i.e. cloze deletions",
  SHOW_CARD_CONTEXT: "Show context in cards?",
  SHOW_CARD_CONTEXT_DESC: "i.e. Title > Heading 1 > Subheading > ... > Subheading",
  CARD_MODAL_HEIGHT_PERCENT: "Flashcard Height Percentage",
  CARD_MODAL_SIZE_PERCENT_DESC: "Should be set to 100% on mobile or if you have very large images",
  RESET_DEFAULT: "Reset to default",
  CARD_MODAL_WIDTH_PERCENT: "Flashcard Width Percentage",
  RANDOMIZE_CARD_ORDER: "Randomize card order during review?",
  DISABLE_CLOZE_CARDS: "Disable cloze cards?",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "Convert ==hightlights== to clozes?",
  CONVERT_BOLD_TEXT_TO_CLOZES: "Convert **bolded text** to clozes?",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "Convert {{curly brackets}} to clozes?",
  INLINE_CARDS_SEPARATOR: "Separator for inline flashcards",
  FIX_SEPARATORS_MANUALLY_WARNING: "Note that after changing this you have to manually edit any flashcards you already have.",
  INLINE_REVERSED_CARDS_SEPARATOR: "Separator for inline reversed flashcards",
  MULTILINE_CARDS_SEPARATOR: "Separator for multiline flashcards",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "Separator for multiline reversed flashcards",
  NOTES: "Notes",
  REVIEW_PANE_ON_STARTUP: "Enable note review pane on startup",
  TAGS_TO_REVIEW: "Tags to review",
  TAGS_TO_REVIEW_DESC: "Enter tags separated by spaces or newlines i.e. #review #tag2 #tag3.",
  OPEN_RANDOM_NOTE: "Open a random note for review",
  OPEN_RANDOM_NOTE_DESC: "When you turn this off, notes are ordered by importance (PageRank).",
  AUTO_NEXT_NOTE: "Open next note automatically after a review",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "Disable review options in the file menu i.e. Review: Easy Good Hard",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "After disabling, you can review using the command hotkeys. Reload Obsidian after changing this.",
  MAX_N_DAYS_REVIEW_QUEUE: "Maximum number of days to display on right panel",
  MIN_ONE_DAY: "The number of days must be at least 1.",
  VALID_NUMBER_WARNING: "Please provide a valid number.",
  UI_PREFERENCES: "UI Preferences",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "Deck trees should be initially displayed as expanded",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: "Turn this off to collapse nested decks in the same card. Useful if you have cards which belong to many decks in the same file.",
  ALGORITHM: "Algorithm",
  CHECK_ALGORITHM_WIKI: 'For more information, check the <a href="${algo_url}">algorithm implementation</a>.',
  BASE_EASE: "Base ease",
  BASE_EASE_DESC: "minimum = 130, preferrably approximately 250.",
  BASE_EASE_MIN_WARNING: "The base ease must be at least 130.",
  LAPSE_INTERVAL_CHANGE: "Interval change when you review a flashcard/note as hard",
  LAPSE_INTERVAL_CHANGE_DESC: "newInterval = oldInterval * intervalChange / 100.",
  EASY_BONUS: "Easy Bonus",
  EASY_BONUS_DESC: "The easy bonus allows you to set the difference in intervals between answering Good and Easy on a flashcard/note (minimum = 100%).",
  EASY_BONUS_MIN_WARNING: "The easy bonus must be at least 100.",
  MAX_INTERVAL: "Maximum Interval",
  MAX_INTERVAL_DESC: "Allows you to place an upper limit on the interval (default = 100 years).",
  MAX_INTERVAL_MIN_WARNING: "The maximum interval must be at least 1 day.",
  MAX_LINK_CONTRIB: "Maximum link contribution",
  MAX_LINK_CONTRIB_DESC: "Maximum contribution of the weighted ease of linked notes to the initial ease.",
  LOGGING: "Logging",
  DISPLAY_DEBUG_INFO: "Display debugging information on the developer console?",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "Notes Review Queue",
  CLOSE: "Close",
  NEW: "New",
  YESTERDAY: "Yesterday",
  TODAY: "Today",
  TOMORROW: "Tomorrow",
  // stats-modal.tsx
  STATS_TITLE: "Statistics",
  MONTH: "Month",
  QUARTER: "Quarter",
  YEAR: "Year",
  LIFETIME: "Lifetime",
  FORECAST: "Forecast",
  FORECAST_DESC: "The number of cards due in the future",
  SCHEDULED: "Scheduled",
  DAYS: "Days",
  NUMBER_OF_CARDS: "Number of cards",
  REVIEWS_PER_DAY: "Average: ${avg} reviews/day",
  INTERVALS: "Intervals",
  INTERVALS_DESC: "Delays until reviews are shown again",
  COUNT: "Count",
  INTERVALS_SUMMARY: "Average interval: ${avg}, Longest interval: ${longest}",
  EASES: "Eases",
  EASES_SUMMARY: "Average ease: ${avgEase}",
  CARD_TYPES: "Card Types",
  CARD_TYPES_DESC: "This includes buried cards as well, if any",
  CARD_TYPE_NEW: "New",
  CARD_TYPE_YOUNG: "Young",
  CARD_TYPE_MATURE: "Mature",
  CARD_TYPES_SUMMARY: "Total cards: ${totalCardsCount}"
};

// src/lang/locale/en-gb.ts
var en_gb_default = {};

// src/lang/locale/es.ts
var es_default = {};

// src/lang/locale/fr.ts
var fr_default = {};

// src/lang/locale/hi.ts
var hi_default = {};

// src/lang/locale/id.ts
var id_default = {};

// src/lang/locale/it.ts
var it_default = {};

// src/lang/locale/ja.ts
var ja_default = {
  // flashcard-modal.tsx
  DECKS: "\u30C7\u30C3\u30AD",
  DUE_CARDS: "\u671F\u65E5\u306E\u30AB\u30FC\u30C9",
  NEW_CARDS: "\u65B0\u898F\u306E\u30AB\u30FC\u30C9",
  TOTAL_CARDS: "\u30AB\u30FC\u30C9\u5408\u8A08",
  BACK: "Back",
  SKIP: "Skip",
  EDIT_CARD: "Edit Card",
  RESET_CARD_PROGRESS: "\u30AB\u30FC\u30C9\u306E\u9032\u6357\u3092\u30EA\u30BB\u30C3\u30C8",
  HARD: "Hard",
  GOOD: "Good",
  EASY: "Easy",
  SHOW_ANSWER: "\u89E3\u7B54\u3092\u8868\u793A",
  CARD_PROGRESS_RESET: "\u30AB\u30FC\u30C9\u306E\u9032\u6357\u304C\u30EA\u30BB\u30C3\u30C8\u3055\u308C\u307E\u3057\u305F\u3002",
  SAVE: "Save",
  CANCEL: "Cancel",
  NO_INPUT: "No input provided.",
  CURRENT_EASE_HELP_TEXT: "Current Ease: ",
  CURRENT_INTERVAL_HELP_TEXT: "Current Interval: ",
  CARD_GENERATED_FROM: "Generated from: ${notePath}",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "\u30EC\u30D3\u30E5\u30FC\u3059\u308B\u30CE\u30FC\u30C8\u3092\u958B\u304F",
  REVIEW_CARDS: "\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u306E\u30EC\u30D3\u30E5\u30FC",
  REVIEW_EASY_FILE_MENU: "\u30EC\u30D3\u30E5\u30FC: Easy",
  REVIEW_GOOD_FILE_MENU: "\u30EC\u30D3\u30E5\u30FC: Good",
  REVIEW_HARD_FILE_MENU: "\u30EC\u30D3\u30E5\u30FC: Hard",
  REVIEW_NOTE_EASY_CMD: "\u30CE\u30FC\u30C8\u3092Easy\u3068\u3057\u3066\u30EC\u30D3\u30E5\u30FC\u3059\u308B",
  REVIEW_NOTE_GOOD_CMD: "\u30CE\u30FC\u30C8\u3092Good\u3068\u3057\u3066\u30EC\u30D3\u30E5\u30FC\u3059\u308B",
  REVIEW_NOTE_HARD_CMD: "\u30CE\u30FC\u30C8\u3092Hard\u3068\u3057\u3066\u30EC\u30D3\u30E5\u30FC\u3059\u308B",
  REVIEW_ALL_CARDS: "\u3059\u3079\u3066\u306E\u30CE\u30FC\u30C8\u304B\u3089\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u3092\u30EC\u30D3\u30E5\u30FC\u3059\u308B",
  CRAM_ALL_CARDS: "Select a deck to cram",
  REVIEW_CARDS_IN_NOTE: "\u3053\u306E\u30CE\u30FC\u30C8\u306E\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u3092\u30EC\u30D3\u30E5\u30FC\u3059\u308B",
  CRAM_CARDS_IN_NOTE: "\u3053\u306E\u30CE\u30FC\u30C8\u306E\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u3092\u8A70\u3081\u8FBC\u307F\u5B66\u7FD2\u3059\u308B",
  VIEW_STATS: "\u7D71\u8A08\u3092\u95B2\u89A7\u3059\u308B",
  STATUS_BAR: "\u30EC\u30D3\u30E5\u30FC: ${dueNotesCount}\u30CE\u30FC\u30C8, ${dueFlashcardsCount}\u30AB\u30FC\u30C9\u304C\u671F\u65E5",
  SYNC_TIME_TAKEN: "\u540C\u671F\u306B${t}ms\u304B\u304B\u308A\u307E\u3057\u305F\u3002",
  NOTE_IN_IGNORED_FOLDER: "\u30CE\u30FC\u30C8\u304C\u7121\u8996\u3059\u308B\u30D5\u30A9\u30EB\u30C0\u306B\u4FDD\u5B58\u3055\u308C\u3066\u3044\u307E\u3059(\u8A2D\u5B9A\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044)\u3002",
  PLEASE_TAG_NOTE: "\u30EC\u30D3\u30E5\u30FC\u3092\u884C\u3046\u306B\u306F\u30CE\u30FC\u30C8\u306B\u5BFE\u3057\u3066\u6B63\u3057\u304F\u30BF\u30B0\u4ED8\u3051\u3057\u3066\u304F\u3060\u3055\u3044(\u8A2D\u5B9A\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044)\u3002",
  RESPONSE_RECEIVED: "\u7B54\u3048\u3092\u53D7\u3051\u53D6\u308A\u307E\u3057\u305F\u3002",
  NO_DECK_EXISTS: "${deckName}\u306B\u306F\u30C7\u30C3\u30AD\u304C\u5B58\u5728\u3057\u307E\u305B\u3093\u3002",
  ALL_CAUGHT_UP: "\u4ECA\u65E5\u306E\u8AB2\u984C\u3092\u3059\u3079\u3066\u9054\u6210\u3057\u307E\u3057\u305F :D",
  // scheduling.ts
  DAYS_STR_IVL: "${interval}\u65E5\u5F8C",
  MONTHS_STR_IVL: "${interval}\u6708\u5F8C",
  YEARS_STR_IVL: "${interval}\u5E74\u5F8C",
  DAYS_STR_IVL_MOBILE: "${interval}d",
  MONTHS_STR_IVL_MOBILE: "${interval}m",
  YEARS_STR_IVL_MOBILE: "${interval}y",
  // settings.ts
  SETTINGS_HEADER: "Spaced Repetition Plugin - \u8A2D\u5B9A",
  CHECK_WIKI: '\u8A73\u7D30\u306B\u3064\u3044\u3066\u306F<a href="${wiki_url}">wiki</a>\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044\u3002',
  FOLDERS_TO_IGNORE: "\u7121\u8996\u3059\u308B\u30D5\u30A9\u30EB\u30C0",
  FOLDERS_TO_IGNORE_DESC: '\u30D5\u30A9\u30EB\u30C0\u30D1\u30B9\u3092\u6539\u884C\u3067\u533A\u5207\u3063\u3066\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002"Templates Meta/Scripts" \u306E\u3088\u3046\u306A\u30B9\u30DA\u30FC\u30B9\u306B\u3088\u308B\u533A\u5207\u308A\u3067\u306E\u66F8\u304D\u65B9\u306F\u7121\u52B9\u3067\u3059\u3002',
  FLASHCARDS: "\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9",
  FLASHCARD_EASY_LABEL: "Easy Button Text",
  FLASHCARD_GOOD_LABEL: "Good Button Text",
  FLASHCARD_HARD_LABEL: "Hard Button Text",
  FLASHCARD_EASY_DESC: 'Customize the label for the "Easy" Button',
  FLASHCARD_GOOD_DESC: 'Customize the label for the "Good" Button',
  FLASHCARD_HARD_DESC: 'Customize the label for the "Hard" Button',
  FLASHCARD_TAGS: "\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u306B\u4F7F\u7528\u3059\u308B\u30BF\u30B0",
  FLASHCARD_TAGS_DESC: '\u30BF\u30B0\u3092\u30B9\u30DA\u30FC\u30B9\u307E\u305F\u306F\u6539\u884C\u3067\u533A\u5207\u3063\u3066\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002\u4F8B: "#flashcards #deck2 #deck3"',
  CONVERT_FOLDERS_TO_DECKS: "\u30D5\u30A9\u30EB\u30C0\u3092\u30C7\u30C3\u30AD\u3068\u30B5\u30D6\u30C7\u30C3\u30AD\u3068\u3057\u3066\u4F7F\u7528\u3057\u307E\u3059\u304B\uFF1F",
  CONVERT_FOLDERS_TO_DECKS_DESC: "\u3053\u308C\u306F\u4E0A\u8A18\u306E\u30BF\u30B0\u3092\u4F7F\u7528\u3057\u305F\u30C7\u30C3\u30AD\u69CB\u7BC9\u306E\u4EE3\u66FF\u3068\u306A\u308B\u30AA\u30D7\u30B7\u30E7\u30F3\u3067\u3059\u3002",
  INLINE_SCHEDULING_COMMENTS: "\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u306E\u6700\u7D42\u884C\u3068\u540C\u4E00\u306E\u884C\u306B\u30B9\u30B1\u30B8\u30E5\u30FC\u30EA\u30F3\u30B0\u30B3\u30E1\u30F3\u30C8\u3092\u4FDD\u5B58\u3057\u307E\u3059\u304B\uFF1F",
  INLINE_SCHEDULING_COMMENTS_DESC: "\u3053\u306E\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u6709\u52B9\u5316\u3059\u308B\u3068\u3001HTML\u30B3\u30E1\u30F3\u30C8\u306B\u3088\u3063\u3066Markdown\u306E\u30EA\u30B9\u30C8\u30D5\u30A9\u30FC\u30DE\u30C3\u30C8\u304C\u5D29\u308C\u306A\u304F\u306A\u308A\u307E\u3059\u3002",
  BURY_SIBLINGS_TILL_NEXT_DAY: "\u6B21\u306E\u30EC\u30D3\u30E5\u30FC\u307E\u3067\u30B7\u30D6\u30EA\u30F3\u30B0\u3092\u5EF6\u671F\u3057\u307E\u3059\u304B\uFF1F",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "\u30B7\u30D6\u30EA\u30F3\u30B0\u306F\u540C\u4E00\u306E\u30AB\u30FC\u30C9\u30C6\u30AD\u30B9\u30C8\u304B\u3089\u751F\u6210\u3055\u308C\u305F\u30AB\u30FC\u30C9\u3001\u3064\u307E\u308A\u7A74\u57CB\u3081\u554F\u984C\u306E\u6D3E\u751F\u30AB\u30FC\u30C9\u3067\u3059\u3002",
  SHOW_CARD_CONTEXT: "\u30AB\u30FC\u30C9\u306B\u30B3\u30F3\u30C6\u30AD\u30B9\u30C8\u3092\u8868\u793A\u3057\u307E\u3059\u304B\uFF1F",
  SHOW_CARD_CONTEXT_DESC: "\uFF62\u30BF\u30A4\u30C8\u30EB > \u898B\u51FA\u3057 1 > \u526F\u898B\u51FA\u3057 > ... > \u526F\u898B\u51FA\u3057\uFF63\u306E\u8868\u793A\u3092\u884C\u3046\u304B\u3069\u3046\u304B\u3092\u6C7A\u3081\u307E\u3059\u3002",
  CARD_MODAL_HEIGHT_PERCENT: "\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u306E\u7E26\u30B5\u30A4\u30BA\u306E\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8",
  CARD_MODAL_SIZE_PERCENT_DESC: "\u30E2\u30D0\u30A4\u30EB\u7248\u3001\u307E\u305F\u306F\u975E\u5E38\u306B\u5927\u304D\u306A\u30B5\u30A4\u30BA\u306E\u753B\u50CF\u304C\u3042\u308B\u5834\u5408\u306B\u306F100%\u306B\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002",
  RESET_DEFAULT: "\u30C7\u30D5\u30A9\u30EB\u30C8\u5024\u306B\u30EA\u30BB\u30C3\u30C8\u3059\u308B",
  CARD_MODAL_WIDTH_PERCENT: "\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u306E\u6A2A\u30B5\u30A4\u30BA\u306E\u30D1\u30FC\u30BB\u30F3\u30C6\u30FC\u30B8",
  RANDOMIZE_CARD_ORDER: "\u30EC\u30D3\u30E5\u30FC\u4E2D\u306E\u30AB\u30FC\u30C9\u306E\u9806\u756A\u3092\u30E9\u30F3\u30C0\u30E0\u306B\u3057\u307E\u3059\u304B\uFF1F",
  DISABLE_CLOZE_CARDS: "\u7A74\u57CB\u3081\u30AB\u30FC\u30C9\u3092\u7121\u52B9\u5316\u3057\u307E\u3059\u304B\uFF1F",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "==\u30CF\u30A4\u30E9\u30A4\u30C8==\u3092\u7A74\u57CB\u3081\u3068\u3057\u3066\u4F7F\u7528\u3057\u307E\u3059\u304B\uFF1F",
  CONVERT_BOLD_TEXT_TO_CLOZES: "**\u30DC\u30FC\u30EB\u30C9\u4F53**\u3092\u7A74\u57CB\u3081\u3068\u3057\u3066\u4F7F\u7528\u3057\u307E\u3059\u304B\uFF1F",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "{{\u4E2D\u62EC\u5F27}}\u3092\u7A74\u57CB\u3081\u3068\u3057\u3066\u4F7F\u7528\u3057\u307E\u3059\u304B\uFF1F",
  INLINE_CARDS_SEPARATOR: "\u30A4\u30F3\u30E9\u30A4\u30F3\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u306B\u4F7F\u7528\u3059\u308B\u30BB\u30D1\u30EC\u30FC\u30BF\u30FC",
  FIX_SEPARATORS_MANUALLY_WARNING: "\u3053\u306E\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u5909\u66F4\u3059\u308B\u5834\u5408\u306B\u306F\u3001\u4F5C\u6210\u6E08\u307F\u306E\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u3092\u624B\u52D5\u3067\u7DE8\u96C6\u3057\u76F4\u3059\u5FC5\u8981\u304C\u3042\u308B\u3053\u3068\u306B\u6CE8\u610F\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
  INLINE_REVERSED_CARDS_SEPARATOR: "\u30A4\u30F3\u30E9\u30A4\u30F3\u306E\u8868\u88CF\u53CD\u8EE2\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u306B\u4F7F\u7528\u3059\u308B\u30BB\u30D1\u30EC\u30FC\u30BF\u30FC",
  MULTILINE_CARDS_SEPARATOR: "\u8907\u6570\u884C\u306E\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u306B\u4F7F\u7528\u3059\u308B\u30BB\u30D1\u30EC\u30FC\u30BF\u30FC",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "\u8907\u6570\u884C\u306E\u8868\u88CF\u53CD\u8EE2\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9\u306B\u4F7F\u7528\u3059\u308B\u30BB\u30D1\u30EC\u30FC\u30BF\u30FC",
  NOTES: "\u30CE\u30FC\u30C8",
  REVIEW_PANE_ON_STARTUP: "Enable note review pane on startup",
  TAGS_TO_REVIEW: "\u30EC\u30D3\u30E5\u30FC\u306B\u4F7F\u7528\u3059\u308B\u30BF\u30B0",
  TAGS_TO_REVIEW_DESC: '\u30BF\u30B0\u3092\u30B9\u30DA\u30FC\u30B9\u307E\u305F\u306F\u6539\u884C\u3067\u533A\u5207\u3063\u3066\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002\u4F8B: "#review #tag2 #tag3"',
  OPEN_RANDOM_NOTE: "\u30E9\u30F3\u30C0\u30E0\u306B\u30CE\u30FC\u30C8\u3092\u958B\u3044\u3066\u30EC\u30D3\u30E5\u30FC\u3059\u308B",
  OPEN_RANDOM_NOTE_DESC: "\u3053\u306E\u30AA\u30D7\u30B7\u30E7\u30F3\u304C\u7121\u52B9\u5316\u3055\u308C\u3066\u3044\u308B\u72B6\u614B\u3067\u306F\u3001\u30CE\u30FC\u30C8\u306F\u91CD\u8981\u5EA6(\u30DA\u30FC\u30B8\u30E9\u30F3\u30AF)\u306B\u3088\u308B\u9806\u756A\u3067\u8868\u793A\u3055\u308C\u307E\u3059\u3002",
  AUTO_NEXT_NOTE: "\u30EC\u30D3\u30E5\u30FC\u5F8C\u306B\u6B21\u306E\u30CE\u30FC\u30C8\u3092\u81EA\u52D5\u7684\u306B\u958B\u304F",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "\u30D5\u30A1\u30A4\u30EB\u30E1\u30CB\u30E5\u30FC\u3067\u306E\u30EC\u30D3\u30E5\u30FC\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u7121\u52B9\u5316(\uFF62\u30EC\u30D3\u30E5\u30FC: Easy\uFF63\u7B49\u306E\u9805\u76EE\u3092\u975E\u8868\u793A\u306B\u3059\u308B)",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "\u7121\u52B9\u5316\u3057\u305F\u5F8C\u3001\u30B3\u30DE\u30F3\u30C9\u30DB\u30C3\u30C8\u30AD\u30FC\u3092\u4F7F\u3063\u3066\u30EC\u30D3\u30E5\u30FC\u3059\u308B\u3053\u3068\u304C\u53EF\u80FD\u306B\u306A\u308A\u307E\u3059\u3002\u3053\u306E\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u5909\u66F4\u3057\u305F\u5834\u5408\u306B\u306FObsidian\u3092\u30EA\u30ED\u30FC\u30C9\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
  MAX_N_DAYS_REVIEW_QUEUE: "\u53F3\u30D1\u30CD\u30EB\u306B\u8868\u793A\u3059\u308B\u6700\u5927\u306E\u65E5\u6570",
  MIN_ONE_DAY: "\u65E5\u6570\u306B\u306F1\u4EE5\u4E0A\u306E\u6570\u5B57\u3092\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
  VALID_NUMBER_WARNING: "\u6709\u52B9\u306A\u6570\u5B57\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
  UI_PREFERENCES: "\u30E6\u30FC\u30B6\u30FC \u30A4\u30F3\u30BF\u30FC\u30D5\u30A7\u30A4\u30B9\u306E\u8A2D\u5B9A",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "\u30C7\u30C3\u30AD \u30C4\u30EA\u30FC\u306F\u6700\u521D\u306F\u5C55\u958B\u3057\u3066\u8868\u793A\u3059\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: "\u3053\u308C\u3092\u30AA\u30D5\u306B\u3059\u308B\u3068\u3001\u540C\u3058\u30AB\u30FC\u30C9\u5185\u306E\u30CD\u30B9\u30C8\u3055\u308C\u305F\u30C7\u30C3\u30AD\u304C\u6298\u308A\u305F\u305F\u307E\u308C\u307E\u3059\u3002\u540C\u3058\u30D5\u30A1\u30A4\u30EB\u306B\u591A\u304F\u306E\u30C7\u30C3\u30AD\u306B\u5C5E\u3059\u308B\u30AB\u30FC\u30C9\u304C\u3042\u308B\u5834\u5408\u306B\u4FBF\u5229\u3067\u3059\u3002",
  ALGORITHM: "\u30A2\u30EB\u30B4\u30EA\u30BA\u30E0",
  CHECK_ALGORITHM_WIKI: '\u8A73\u7D30\u306B\u3064\u3044\u3066\u306F<a href="${algo_url}">\u30A2\u30EB\u30B4\u30EA\u30BA\u30E0\u306E\u5B9F\u88C5</a>\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044\u3002',
  BASE_EASE: "\u30D9\u30FC\u30B9\u306E\u6613\u3057\u3055",
  BASE_EASE_DESC: "\u6700\u5C0F\u5024\u306F130\u3067\u3059\u304C\u3001 \u9069\u6B63\u5024\u306F\u304A\u304A\u3088\u305D250\u3067\u3059\u3002",
  BASE_EASE_MIN_WARNING: "\u30D9\u30FC\u30B9\u306E\u6613\u3057\u3055\u306B\u306F130\u4EE5\u4E0A\u306E\u6570\u5B57\u3092\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
  LAPSE_INTERVAL_CHANGE: "\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9/\u30CE\u30FC\u30C8\u3092Hard\u3068\u3057\u3066\u30EC\u30D3\u30E5\u30FC\u3057\u305F\u969B\u306E\u9593\u9694\u5909\u66F4",
  LAPSE_INTERVAL_CHANGE_DESC: '"\u65B0\u3057\u3044\u9593\u9694 = \u4EE5\u524D\u306E\u9593\u9694 * \u9593\u9694\u5909\u66F4 / 100" \u3068\u3057\u3066\u8A08\u7B97\u3055\u308C\u307E\u3059\u3002',
  EASY_BONUS: "Easy\u30DC\u30FC\u30CA\u30B9",
  EASY_BONUS_DESC: "Easy\u30DC\u30FC\u30CA\u30B9\u306B\u3088\u3063\u3066\u30D5\u30E9\u30C3\u30B7\u30E5\u30AB\u30FC\u30C9/\u30CE\u30FC\u30C8\u306B\u304A\u3051\u308B\u9593\u9694\u306E\u5DEE\u5206\u3092\u8A2D\u5B9A\u3067\u304D\u307E\u3059(\u6700\u5C0F\u5024 = 100%)\u3002",
  EASY_BONUS_MIN_WARNING: "Easy\u30DC\u30FC\u30CA\u30B9\u306B\u306F100\u4EE5\u4E0A\u306E\u6570\u5B57\u3092\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
  MAX_INTERVAL: "\u9593\u9694\u306E\u6700\u5927\u5024",
  MAX_INTERVAL_DESC: "\u9593\u9694\u306B\u4E0A\u9650\u5024\u3092\u8A2D\u5B9A\u3059\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059(\u30C7\u30D5\u30A9\u30EB\u30C8\u5024 = 100\u5E74)\u3002",
  MAX_INTERVAL_MIN_WARNING: "\u9593\u9694\u306E\u6700\u5927\u5024\u306B\u306F1\u4EE5\u4E0A\u306E\u6570\u5B57\u3092\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
  MAX_LINK_CONTRIB: "\u30EA\u30F3\u30AF\u30B3\u30F3\u30C8\u30EA\u30D3\u30E5\u30FC\u30B7\u30E7\u30F3\u306E\u6700\u5927\u5024",
  MAX_LINK_CONTRIB_DESC: "\u6700\u521D\u306E\u6613\u3057\u3055\u306B\u5BFE\u3057\u3066\u3001\u30EA\u30F3\u30AF\u3055\u308C\u305F\u30CE\u30FC\u30C8\u306E\u91CD\u307F\u4ED8\u3051\u3055\u308C\u305F\u6613\u3057\u3055\u304C\u5BC4\u4E0E\u3059\u308B\u6700\u5927\u5024\u3092\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
  LOGGING: "\u30ED\u30B0\u7BA1\u7406",
  DISPLAY_DEBUG_INFO: "\u30C7\u30D9\u30ED\u30C3\u30D1\u30FC\u30B3\u30F3\u30BD\u30FC\u30EB\u306B\u3066\u30C7\u30D0\u30C3\u30B0\u60C5\u5831\u3092\u8868\u793A\u3057\u307E\u3059\u304B\uFF1F",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "\u30CE\u30FC\u30C8\u30EC\u30D3\u30E5\u30FC\u306E\u30AD\u30E5\u30FC",
  CLOSE: "\u9589\u3058\u308B",
  NEW: "\u65B0\u898F",
  YESTERDAY: "\u6628\u65E5",
  TODAY: "\u4ECA\u65E5",
  TOMORROW: "\u660E\u65E5",
  // stats-modal.tsx
  STATS_TITLE: "\u7D71\u8A08",
  MONTH: "Month",
  QUARTER: "Quarter",
  YEAR: "Year",
  LIFETIME: "Lifetime",
  FORECAST: "\u4E88\u6E2C",
  FORECAST_DESC: "\u5FA9\u7FD2\u671F\u65E5\u304C\u6765\u308B\u30AB\u30FC\u30C9\u306E\u679A\u6570",
  SCHEDULED: "\u30B9\u30B1\u30B8\u30E5\u30FC\u30EA\u30F3\u30B0\u6E08\u307F",
  DAYS: "\u65E5",
  NUMBER_OF_CARDS: "\u30AB\u30FC\u30C9\u6570",
  REVIEWS_PER_DAY: "\u5E73\u5747: ${avg}\u30EC\u30D3\u30E5\u30FC/\u65E5",
  INTERVALS: "\u9593\u9694",
  INTERVALS_DESC: "\u6B21\u306E\u30EC\u30D3\u30E5\u30FC\u4E88\u5B9A\u65E5",
  COUNT: "\u30AB\u30A6\u30F3\u30C8",
  INTERVALS_SUMMARY: "\u9593\u9694\u306E\u5E73\u5747\u5024: ${avg}, \u6700\u9577\u306E\u9593\u9694: ${longest}",
  EASES: "\u6613\u3057\u3055",
  EASES_SUMMARY: "\u6613\u3057\u3055\u306E\u5E73\u5747\u5024: ${avgEase}",
  CARD_TYPES: "\u30AB\u30FC\u30C9\u30BF\u30A4\u30D7",
  CARD_TYPES_DESC: "\u5EF6\u671F\u306E\u30AB\u30FC\u30C9\u304C\u3042\u308B\u5834\u5408\u306B\u306F\u3053\u308C\u306B\u542B\u307E\u308C\u307E\u3059",
  CARD_TYPE_NEW: "\u65B0\u898F",
  CARD_TYPE_YOUNG: "\u5FA9\u7FD2(\u521D\u671F)",
  CARD_TYPE_MATURE: "\u5FA9\u7FD2(\u5F8C\u671F)",
  CARD_TYPES_SUMMARY: "\u30AB\u30FC\u30C9\u306E\u5408\u8A08: ${totalCardsCount}\u679A"
};

// src/lang/locale/ko.ts
var ko_default = {
  // flashcard-modal.tsx
  DECKS: "\uB371",
  DUE_CARDS: "\uB2E4\uC2DC \uBCFC \uCE74\uB4DC\uB4E4",
  NEW_CARDS: "\uC0C8\uB85C\uC6B4 \uCE74\uB4DC\uB4E4",
  TOTAL_CARDS: "\uC804\uCCB4 \uCE74\uB4DC\uB4E4",
  BACK: "Back",
  SKIP: "Skip",
  EDIT_CARD: "Edit Card",
  RESET_CARD_PROGRESS: "\uCE74\uB4DC\uC758 \uC9C4\uD589\uC0C1\uD669\uC744 \uCD08\uAE30\uD654\uD569\uB2C8\uB2E4.",
  HARD: "\uC5B4\uB824\uC6C0(Hard)",
  GOOD: "\uC88B\uC74C(Good)",
  EASY: "\uC26C\uC6C0(Easy)",
  SHOW_ANSWER: "\uC815\uB2F5 \uD655\uC778\uD558\uAE30",
  CARD_PROGRESS_RESET: "\uCE74\uB4DC\uC758 \uC9C4\uD589\uC0C1\uD669\uC774 \uCD08\uAE30\uD654\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
  SAVE: "Save",
  CANCEL: "Cancel",
  NO_INPUT: "No input provided.",
  CURRENT_EASE_HELP_TEXT: "Current Ease: ",
  CURRENT_INTERVAL_HELP_TEXT: "Current Interval: ",
  CARD_GENERATED_FROM: "Generated from: ${notePath}",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "\uB9AC\uBDF0\uD560 \uB178\uD2B8 \uC5F4\uAE30",
  REVIEW_CARDS: "\uD50C\uB798\uC2DC\uCE74\uB4DC \uB9AC\uBDF0",
  REVIEW_EASY_FILE_MENU: "\uB9AC\uBDF0: \uC26C\uC6C0(Easy)",
  REVIEW_GOOD_FILE_MENU: "\uB9AC\uBDF0: \uC88B\uC74C(Good)",
  REVIEW_HARD_FILE_MENU: "\uB9AC\uBDF0: \uC5B4\uB824\uC6C0(Hard)",
  REVIEW_NOTE_EASY_CMD: "\uB178\uD2B8\uB97C \uC26C\uC6C0(easy)\uC73C\uB85C \uB9AC\uBDF0\uD569\uB2C8\uB2E4",
  REVIEW_NOTE_GOOD_CMD: "\uB178\uD2B8\uB97C \uC88B\uC74C(good)\uC73C\uB85C \uB9AC\uBDF0\uD569\uB2C8\uB2E4",
  REVIEW_NOTE_HARD_CMD: "\uB178\uD2B8\uB97C \uC5B4\uB824\uC6C0(hard)\uC73C\uB85C \uB9AC\uBDF0\uD569\uB2C8\uB2E4",
  REVIEW_ALL_CARDS: "\uBAA8\uB4E0 \uB178\uD2B8\uB4E4\uC758 \uD50C\uB798\uC2DC\uCE74\uB4DC\uB4E4\uC744 \uB9AC\uBDF0\uD569\uB2C8\uB2E4",
  CRAM_ALL_CARDS: "Select a deck to cram",
  REVIEW_CARDS_IN_NOTE: "\uC774 \uB178\uD2B8\uC758 \uD50C\uB798\uC2DC\uCE74\uB4DC\uB4E4\uC744 \uB9AC\uBDF0\uD569\uB2C8\uB2E4",
  CRAM_CARDS_IN_NOTE: "\uC774 \uB178\uD2B8\uC758 \uD50C\uB798\uC2DC\uCE74\uB4DC\uB4E4\uC744 \uBCBC\uB77D\uCE58\uAE30\uD569\uB2C8\uB2E4.",
  VIEW_STATS: "\uD1B5\uACC4 \uD655\uC778",
  STATUS_BAR: "--\uB9AC\uBDF0: ${dueNotesCount} \uB178\uD2B8, ${dueFlashcardsCount} \uCE74\uB4DC \uB0A8\uC558\uC2B5\uB2C8\uB2E4.",
  SYNC_TIME_TAKEN: "\uB3D9\uAE30\uD654\uC5D0 ${t}\uBC00\uB9AC\uCD08 \uAC78\uB838\uC2B5\uB2C8\uB2E4",
  NOTE_IN_IGNORED_FOLDER: "\uB178\uD2B8\uAC00 \uBB34\uC2DC\uB41C \uD3F4\uB354 \uC544\uB798\uC5D0 \uC800\uC7A5\uB418\uC5B4 \uC788\uC2B5\uB2C8\uB2E4. (\uC124\uC815\uC744 \uD655\uC778\uD574\uC8FC\uC138\uC694)",
  PLEASE_TAG_NOTE: "\uB9AC\uBDF0\uB97C \uD558\uAE30\uC704\uD574 \uB178\uD2B8\uC5D0 \uC801\uC808\uD788 \uD0DC\uADF8\uD574\uC8FC\uC138\uC694. (\uC124\uC815\uC744 \uD655\uC778\uD574\uC8FC\uC138\uC694)",
  RESPONSE_RECEIVED: "\uC694\uCCAD\uC774 \uC644\uB8CC\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
  NO_DECK_EXISTS: "${deckName}\uC774\uB77C\uB294 \uC774\uB984\uC758 \uB371\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.",
  ALL_CAUGHT_UP: "\uBAA8\uB450 \uD655\uC778\uD588\uC2B5\uB2C8\uB2E4. :D",
  // scheduling.ts
  DAYS_STR_IVL: "${interval} \uC77C \uD6C4",
  MONTHS_STR_IVL: "${interval} \uAC1C\uC6D4 \uD6C4",
  YEARS_STR_IVL: "${interval} \uB144 \uD6C4",
  DAYS_STR_IVL_MOBILE: "${interval}d",
  MONTHS_STR_IVL_MOBILE: "${interval}m",
  YEARS_STR_IVL_MOBILE: "${interval}y",
  // settings.ts
  SETTINGS_HEADER: "Spaced Repetition Plugin - \uC124\uC815",
  CHECK_WIKI: '\uB354 \uB9CE\uC740 \uC815\uBCF4\uB97C \uC6D0\uD558\uC2DC\uBA74, <a href="${wiki_url}">wiki</a>\uB97C \uD655\uC778\uD574\uC8FC\uC138\uC694.',
  FOLDERS_TO_IGNORE: "\uBB34\uC2DC\uD560 \uD3F4\uB354\uB4E4",
  FOLDERS_TO_IGNORE_DESC: "\uD3F4\uB354 \uACBD\uB85C\uB97C \uBE48 \uC904\uB85C \uAD6C\uBD84\uD574\uC11C \uC785\uB825\uD574\uC8FC\uC138\uC694. 'Templates Meta/Scripts' \uC640 \uAC19\uC774 \uC785\uB825\uD558\uB294 \uAC83\uC740 \uC720\uD6A8\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.",
  FLASHCARDS: "\uD50C\uB798\uC2DC\uCE74\uB4DC",
  FLASHCARD_EASY_LABEL: "Easy Button Text",
  FLASHCARD_GOOD_LABEL: "Good Button Text",
  FLASHCARD_HARD_LABEL: "Hard Button Text",
  FLASHCARD_EASY_DESC: 'Customize the label for the "Easy" Button',
  FLASHCARD_GOOD_DESC: 'Customize the label for the "Good" Button',
  FLASHCARD_HARD_DESC: 'Customize the label for the "Hard" Button',
  FLASHCARD_TAGS: "\uD50C\uB798\uC2DC\uCE74\uB4DC \uD0DC\uADF8",
  FLASHCARD_TAGS_DESC: "\uD0DC\uADF8\uB97C \uACF5\uBC31 \uB610\uB294 \uBE48 \uC904\uB85C \uAD6C\uBD84\uD574\uC11C \uC785\uB825\uD574\uC8FC\uC138\uC694. \uC608) '#flashcards #deck2 #deck3'",
  CONVERT_FOLDERS_TO_DECKS: "\uD3F4\uB354\uB97C \uB371\uACFC \uC11C\uBE0C\uB371\uC73C\uB85C \uC0AC\uC6A9\uD560\uAE4C\uC694?",
  CONVERT_FOLDERS_TO_DECKS_DESC: "\uC774 \uAE30\uB2A5\uC740 \uC704\uC758 \uD50C\uB798\uC2DC\uCE74\uB4DC \uD0DC\uADF8 \uC635\uC158\uC744 \uB300\uCCB4\uD569\uB2C8\uB2E4.",
  INLINE_SCHEDULING_COMMENTS: "\uD50C\uB798\uC2DC\uCE74\uB4DC\uC758 \uB9C8\uC9C0\uB9C9 \uC904\uACFC \uB3D9\uC77C\uD55C \uC904\uC5D0 \uC2A4\uCF00\uC904\uB9C1 \uCF54\uBA58\uD2B8\uB97C \uC800\uC7A5\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
  INLINE_SCHEDULING_COMMENTS_DESC: "\uC774 \uC635\uC158\uC744 \uC0AC\uC6A9\uD558\uBA74 HTML \uC8FC\uC11D\uC774 \uBAA9\uB85D\uC758 \uD3EC\uB9E4\uD305\uC744 \uBB34\uB108\uD2B8\uB9AC\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.",
  BURY_SIBLINGS_TILL_NEXT_DAY: "Sibling \uCE74\uB4DC\uB97C \uB2E4\uC74C\uB0A0\uAE4C\uC9C0 \uBB3B\uC5B4\uB450\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "Sibling \uCE74\uB4DC\uB294 \uB3D9\uC77C\uD55C \uCE74\uB4DC \uD14D\uC2A4\uD2B8\uC5D0\uC11C \uC0DD\uC131\uB41C \uCE74\uB4DC\uC785\uB2C8\uB2E4. i.e. cloze deletions",
  SHOW_CARD_CONTEXT: "\uCE74\uB4DC\uC758 \uBB38\uB9E5(context)\uC744 \uD45C\uC2DC\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
  SHOW_CARD_CONTEXT_DESC: "\uCE74\uB4DC\uC5D0\uC11C 'Title > Heading 1 > Subheading > ... > Subheading' \uC758 \uD45C\uC2DC\uB97C \uD560\uC9C0 \uC124\uC815\uD569\uB2C8\uB2E4.",
  CARD_MODAL_HEIGHT_PERCENT: "\uD50C\uB798\uC2DC\uCE74\uB4DC \uB192\uC774 \uBE44\uC728",
  CARD_MODAL_SIZE_PERCENT_DESC: "\uBAA8\uBC14\uC77C \uBC84\uC804 \uD639\uC740 \uB9E4\uC6B0 \uD070 \uC774\uBBF8\uC9C0\uAC00 \uC788\uB294 \uACBD\uC6B0 100%\uB85C \uC124\uC815\uD574\uC57C \uD569\uB2C8\uB2E4.",
  RESET_DEFAULT: "\uAE30\uBCF8\uAC12\uC73C\uB85C \uCD08\uAE30\uD654",
  CARD_MODAL_WIDTH_PERCENT: "\uD50C\uB798\uC2DC\uCE74\uB4DC \uB108\uBE44 \uBE44\uC728",
  RANDOMIZE_CARD_ORDER: "\uB9AC\uBDF0\uC911\uC778 \uCE74\uB4DC\uC758 \uC21C\uC11C\uB97C \uB79C\uB364\uC73C\uB85C \uB450\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
  DISABLE_CLOZE_CARDS: "\uBE48 \uCE78 \uCC44\uC6B0\uAE30 \uCE74\uB4DC\uB97C \uBE44\uD65C\uC131\uD654\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "==hightlights== \uB97C \uBE48 \uCE78 \uCC44\uC6B0\uAE30\uB85C \uC804\uD658\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
  CONVERT_BOLD_TEXT_TO_CLOZES: "**bolded text** \uB97C \uBE48 \uCE78 \uCC44\uC6B0\uAE30\uB85C \uC804\uD658\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "{{curly brackets}} \uB97C \uBE48 \uCE78 \uCC44\uC6B0\uAE30\uB85C \uC804\uD658\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
  INLINE_CARDS_SEPARATOR: "\uC778\uB77C\uC778 \uD50C\uB798\uC2DC\uCE74\uB4DC \uAD6C\uBD84\uC790",
  FIX_SEPARATORS_MANUALLY_WARNING: "\uC8FC\uC758: \uC774 \uC635\uC158\uC744 \uC218\uC815\uD55C \uD6C4\uC5D0\uB294 \uC774\uBBF8 \uC791\uC131\uB41C \uD50C\uB798\uC2DC\uCE74\uB4DC\uB97C \uC218\uB3D9\uC73C\uB85C \uC218\uC815\uD574\uC57C \uD568\uC744 \uC8FC\uC758\uD558\uC2ED\uC2DC\uC624.",
  INLINE_REVERSED_CARDS_SEPARATOR: "\uC778\uB77C\uC778 \uBC18\uC804 \uD50C\uB798\uC2DC\uCE74\uB4DC \uAD6C\uBD84\uC790",
  MULTILINE_CARDS_SEPARATOR: "\uC5EC\uB7EC \uC904 \uD50C\uB798\uC2DC\uCE74\uB4DC \uAD6C\uBD84\uC790",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "\uC5EC\uB7EC \uC904 \uBC18\uC804 \uD50C\uB798\uC2DC\uCE74\uB4DC \uAD6C\uBD84\uC790",
  NOTES: "\uB178\uD2B8",
  REVIEW_PANE_ON_STARTUP: "Enable note review pane on startup",
  TAGS_TO_REVIEW: "\uB9AC\uBDF0\uC5D0 \uC0AC\uC6A9\uD560 \uD0DC\uADF8",
  TAGS_TO_REVIEW_DESC: "\uD0DC\uADF8\uB97C \uACF5\uBC31 \uB610\uB294 \uBE48 \uC904\uB85C \uAD6C\uBD84\uD574\uC11C \uC785\uB825\uD574\uC8FC\uC138\uC694. \uC608) '#review #tag2 #tag3'",
  OPEN_RANDOM_NOTE: "\uB9AC\uBDF0\uB97C \uC704\uD574 \uB79C\uB364 \uB178\uD2B8\uB97C \uC5FD\uB2C8\uB2E4.",
  OPEN_RANDOM_NOTE_DESC: "\uC774 \uC635\uC158\uC774 \uAEBC\uC838\uC788\uC73C\uBA74, \uB178\uD2B8\uB294 \uC911\uC694\uB3C4(\uD398\uC774\uC9C0 \uB7AD\uD06C)\uC5D0 \uB530\uB77C \uC815\uB82C\uB429\uB2C8\uB2E4.",
  AUTO_NEXT_NOTE: "\uB9AC\uBDF0 \uD6C4\uC5D0 \uB2E4\uC74C \uB178\uD2B8\uB97C \uC790\uB3D9\uC73C\uB85C \uC5FD\uB2C8\uB2E4.",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "\uD30C\uC77C \uBA54\uB274\uC5D0\uC11C\uC758 \uB9AC\uBDF0 \uC635\uC158\uC744 \uBE44\uD65C\uC131\uD654 \uD569\uB2C8\uB2E4. \uC608) \uB9AC\uBDF0: Easy Good Hard",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "\uC774 \uC635\uC158\uC744 \uBE44\uD65C\uC131\uD654 \uD55C \uD6C4, \uBA85\uB839 \uB2E8\uCD95\uD0A4\uB97C \uC774\uC6A9\uD574 \uB9AC\uBDF0\uD558\uC2E4 \uC218 \uC788\uC2B5\uB2C8\uB2E4. \uC774 \uC635\uC158\uC744 \uBCC0\uACBD\uD55C \uD6C4\uC5D0 \uC635\uC2DC\uB514\uC5B8\uC744 \uC0C8\uB85C\uACE0\uCE68 \uD558\uC2ED\uC2DC\uC624.",
  MAX_N_DAYS_REVIEW_QUEUE: "\uC624\uB978\uCABD \uD328\uB110\uC5D0 \uD45C\uC2DC\uD560 \uCD5C\uB300 \uC77C\uC218",
  MIN_ONE_DAY: "\uC801\uC5B4\uB3C4 1\uC774\uC0C1\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4.",
  VALID_NUMBER_WARNING: "\uC720\uD6A8\uD55C \uC22B\uC790\uB97C \uC785\uB825\uD574\uC8FC\uC138\uC694.",
  UI_PREFERENCES: "\uC0AC\uC6A9\uC790 \uC778\uD130\uD398\uC774\uC2A4 \uAE30\uBCF8 \uC124\uC815",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "\uB371 \uD2B8\uB9AC\uB294 \uCC98\uC74C\uC5D0 \uD655\uC7A5\uB41C \uAC83\uC73C\uB85C \uD45C\uC2DC\uB418\uC5B4\uC57C \uD569\uB2C8\uB2E4.",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: "\uAC19\uC740 \uCE74\uB4DC\uC5D0 \uC911\uCCA9\uB41C \uB371\uC744 \uC811\uC73C\uB824\uBA74 \uC774 \uC635\uC158\uC744 \uB044\uC2ED\uC2DC\uC624. \uAC19\uC740 \uD30C\uC77C\uC5D0 \uC5EC\uB7EC \uB371\uC5D0 \uC18D\uD55C \uCE74\uB4DC\uAC00 \uC788\uB294 \uACBD\uC6B0 \uC720\uC6A9\uD569\uB2C8\uB2E4.",
  ALGORITHM: "\uC54C\uACE0\uB9AC\uC998",
  CHECK_ALGORITHM_WIKI: '\uB354 \uB9CE\uC740 \uC815\uBCF4\uB97C \uC6D0\uD558\uC2DC\uBA74, <a href="${algo_url}">algorithm implementation</a>\uC744 \uD655\uC778\uD574\uC8FC\uC138\uC694.',
  BASE_EASE: "\uAE30\uBCF8 ease",
  BASE_EASE_DESC: "\uCD5C\uC19F\uAC12 = 130, \uC801\uC815\uCE58\uB294 \uB300\uB7B5 250\uC785\uB2C8\uB2E4.",
  BASE_EASE_MIN_WARNING: "\uAE30\uBCF8 ease\uB294 \uC801\uC5B4\uB3C4 130 \uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4.",
  LAPSE_INTERVAL_CHANGE: "\uD50C\uB798\uC2DC\uCE74\uB4DC/\uB178\uD2B8\uB97C \uC5B4\uB824\uC6C0(Hard)\uC73C\uB85C \uB9AC\uBDF0\uD588\uC744 \uB54C\uC758 \uAC04\uACA9 \uBCC0\uACBD",
  LAPSE_INTERVAL_CHANGE_DESC: "\uC0C8\uB85C\uC6B4 \uAC04\uACA9 = \uC774\uC804 \uAC04\uACA9 * \uAC04\uACA9\uBCC0\uACBD \uAC12 / 100.",
  EASY_BONUS: "\uC26C\uC6C0(Easy) \uBCF4\uB108\uC2A4",
  EASY_BONUS_DESC: "\uC26C\uC6C0(Easy) \uBCF4\uB108\uC2A4\uB294 \uD50C\uB798\uC2DC\uCE74\uB4DC/\uB178\uD2B8\uC5D0\uC11C \uC88B\uC74C(Good)\uACFC \uC26C\uC6C0(Easy) \uC0AC\uC774\uC758 \uAC04\uACA9 \uCC28\uC774\uB97C \uC124\uC815\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4. (\uCD5C\uC18C = 100%)",
  EASY_BONUS_MIN_WARNING: "\uC26C\uC6C0(Easy) \uBCF4\uB108\uC2A4\uB294 \uC801\uC5B4\uB3C4 100\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4.",
  MAX_INTERVAL: "\uCD5C\uB300 \uAC04\uACA9",
  MAX_INTERVAL_DESC: "\uAC04\uACA9\uC758 \uC0C1\uD55C\uC120\uC744 \uB458 \uC218 \uC788\uC2B5\uB2C8\uB2E4. (\uAE30\uBCF8\uAC12 = 100\uB144)",
  MAX_INTERVAL_MIN_WARNING: "\uCD5C\uB300 \uAC04\uACA9\uC740 \uC801\uC5B4\uB3C4 1\uC77C\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4.",
  MAX_LINK_CONTRIB: "\uCD5C\uB300 \uC5F0\uACB0 \uAE30\uC5EC\uB3C4",
  MAX_LINK_CONTRIB_DESC: "\uB9C1\uD06C\uB41C \uB178\uD2B8\uC758 \uCD08\uAE30 ease\uC5D0 \uB300\uD55C \uAC00\uC911\uCE58\uAC00 \uC801\uC6A9\uB41C ease\uC758 \uCD5C\uB300 \uAE30\uC5EC\uB3C4\uC785\uB2C8\uB2E4.",
  LOGGING: "\uB85C\uAE45",
  DISPLAY_DEBUG_INFO: "\uB514\uBC84\uAE45 \uC815\uBCF4\uB97C \uAC1C\uBC1C\uC790 \uCF58\uC194\uC5D0 \uD45C\uC2DC\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "\uB9AC\uBDF0\uD560 \uB178\uD2B8 \uB300\uAE30\uC5F4",
  CLOSE: "\uB2EB\uAE30",
  NEW: "New",
  YESTERDAY: "\uC5B4\uC81C",
  TODAY: "\uC624\uB298",
  TOMORROW: "\uB0B4\uC77C",
  // stats-modal.tsx
  STATS_TITLE: "\uD1B5\uACC4",
  MONTH: "\uC6D4",
  QUARTER: "\uBD84\uAE30",
  YEAR: "\uB144",
  LIFETIME: "\uD3C9\uC0DD",
  FORECAST: "\uC608\uCE21",
  FORECAST_DESC: "\uC774\uD6C4\uC5D0 \uD559\uC2B5\uD560 \uCE74\uB4DC\uC758 \uC218",
  SCHEDULED: "Scheduled",
  DAYS: "\uC77C",
  NUMBER_OF_CARDS: "\uCE74\uB4DC\uC758 \uC218",
  REVIEWS_PER_DAY: "\uD3C9\uADE0: ${avg} \uB9AC\uBDF0/\uC77C",
  INTERVALS: "\uAC04\uACA9",
  INTERVALS_DESC: "\uB9AC\uBDF0\uB97C \uB2E4\uC2DC \uD560 \uB54C \uAE4C\uC9C0\uC758 \uAE30\uAC04",
  COUNT: "Count",
  INTERVALS_SUMMARY: "\uD3C9\uADE0 \uAC04\uACA9: ${avg}, \uAC00\uC7A5 \uAE34 \uAC04\uACA9: ${longest}",
  EASES: "Eases",
  EASES_SUMMARY: "Average ease: ${avgEase}",
  CARD_TYPES: "\uCE74\uB4DC \uD0C0\uC785",
  CARD_TYPES_DESC: "\uC5EC\uAE30\uC5D0\uB294 \uBB3B\uC5B4\uB454 \uCE74\uB4DC\uB3C4 \uD3EC\uD568\uB429\uB2C8\uB2E4.",
  CARD_TYPE_NEW: "New",
  CARD_TYPE_YOUNG: "Young",
  CARD_TYPE_MATURE: "Mature",
  CARD_TYPES_SUMMARY: "\uC804\uCCB4 \uCE74\uB4DC \uC218: ${totalCardsCount}"
};

// src/lang/locale/mr.ts
var mr_default = {};

// src/lang/locale/nl.ts
var nl_default = {};

// src/lang/locale/no.ts
var no_default = {};

// src/lang/locale/pl.ts
var pl_default = {};

// src/lang/locale/pt.ts
var pt_default = {};

// src/lang/locale/pt-br.ts
var pt_br_default = {
  // flashcard-modal.tsx
  DECKS: "Baralhos",
  DUE_CARDS: "Cartas para Colocar em Dia",
  NEW_CARDS: "Novas Cartas",
  TOTAL_CARDS: "Total de Cartas",
  BACK: "Back",
  SKIP: "Skip",
  EDIT_CARD: "Edit Card",
  RESET_CARD_PROGRESS: "Reiniciar o Progresso da Carta",
  HARD: "Dif\xEDcil",
  GOOD: "OK",
  EASY: "F\xE1cil",
  SHOW_ANSWER: "Mostrar Resposta",
  CARD_PROGRESS_RESET: "O Progresso da Carta foi reiniciado",
  SAVE: "Save",
  CANCEL: "Cancel",
  NO_INPUT: "No input provided.",
  CURRENT_EASE_HELP_TEXT: "Current Ease: ",
  CURRENT_INTERVAL_HELP_TEXT: "Current Interval: ",
  CARD_GENERATED_FROM: "Generated from: ${notePath}",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "Abrir uma nota para revisar",
  REVIEW_CARDS: "Revisar flashcards",
  REVIEW_EASY_FILE_MENU: "Revis\xE3o: F\xE1cil",
  REVIEW_GOOD_FILE_MENU: "Revis\xE3o: OK",
  REVIEW_HARD_FILE_MENU: "Revis\xE3o: Dif\xEDcil",
  REVIEW_NOTE_EASY_CMD: "Revisar nota como f\xE1cil",
  REVIEW_NOTE_GOOD_CMD: "Revisar nota como OK",
  REVIEW_NOTE_HARD_CMD: "Revisar nota como dif\xEDcil",
  REVIEW_ALL_CARDS: "Revisar flashcards de todas as notas",
  CRAM_ALL_CARDS: "Select a deck to cram",
  REVIEW_CARDS_IN_NOTE: "Revisar flashcards nessa nota",
  CRAM_CARDS_IN_NOTE: "Revisar todas as flashcards nessa nota",
  VIEW_STATS: "Ver estat\xEDsticas",
  STATUS_BAR: "Revis\xE3o: ${dueNotesCount} nota(s), ${dueFlashcardsCount} Carta(s) para colocar em dia",
  SYNC_TIME_TAKEN: "Sicroniza\xE7\xE3o levou ${t}ms",
  NOTE_IN_IGNORED_FOLDER: "Nota \xE9 salva na pasta ignorada (cheque as configura\xE7\xF5es).",
  PLEASE_TAG_NOTE: "Por favor etiquete a nota apropriadamente para revisar (nas configura\xE7\xF5es).",
  RESPONSE_RECEIVED: "Resposta recebida.",
  NO_DECK_EXISTS: "Nenhum baralho existe para ${deckName}",
  ALL_CAUGHT_UP: "Voc\xEA colocou tudo em prazo agora :D.",
  // scheduling.ts
  DAYS_STR_IVL: "${interval} dia(s)",
  MONTHS_STR_IVL: "${interval} m\xEAs(es)",
  YEARS_STR_IVL: "${interval} ano(s)",
  DAYS_STR_IVL_MOBILE: "${interval}d",
  MONTHS_STR_IVL_MOBILE: "${interval}m",
  YEARS_STR_IVL_MOBILE: "${interval}a",
  // settings.ts
  SETTINGS_HEADER: "Plguin Spaced Repetition - Configura\xE7\xE3o",
  CHECK_WIKI: 'Para mais informa\xE7\xF5es, checke o <a href="${wiki_url}">wiki</a>.',
  FOLDERS_TO_IGNORE: "Pastas para ignorar",
  FOLDERS_TO_IGNORE_DESC: "Ensira o caminho das pastas separado por quebras de linha ex: Templates Meta/Scripts",
  FLASHCARDS: "Flashcards",
  FLASHCARD_EASY_LABEL: "Texto do Bot\xE3o de F\xE1cil",
  FLASHCARD_GOOD_LABEL: "Texto do Bot\xE3o de OK",
  FLASHCARD_HARD_LABEL: "Texto do Bot\xE3o de Dif\xEDcil",
  FLASHCARD_EASY_DESC: 'Costumize o r\xF3tulo para o bot\xE3o de "F\xE1cil"',
  FLASHCARD_GOOD_DESC: 'Costumize o r\xF3tulo para o bot\xE3o de "OK"',
  FLASHCARD_HARD_DESC: 'Customize o r\xF3tulo para o bot\xE3o de "Dif\xEDcil"',
  FLASHCARD_TAGS: "Etiquetas dos Flashcards",
  FLASHCARD_TAGS_DESC: "Ensira etiquetas separadas por espa\xE7os ou quebras de linha ex: #flashcards #baralho2 #baralho3.",
  CONVERT_FOLDERS_TO_DECKS: "Converter pastas para baralhos e sub-baralhos?",
  CONVERT_FOLDERS_TO_DECKS_DESC: "Isso \xE9 uma alternativa para a op\xE7\xE3o de etiqueta dos Flashcards em cima.",
  INLINE_SCHEDULING_COMMENTS: "Salvar coment\xE1rios de agendamento na mesma linha que a \xFAltima linha do flashcard?",
  INLINE_SCHEDULING_COMMENTS_DESC: "Ligar isso vai fazer com que os coment\xE1rios em HTML n\xE3o quebrem a formata\xE7\xE3o de listas.",
  BURY_SIBLINGS_TILL_NEXT_DAY: "Enterrar cartas irm\xE3s at\xE9 o pr\xF3ximo dia?",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "Cartas irm\xE3s s\xE3o geradas pelo texto da mesma carta ex: omiss\xE3o de palavras",
  SHOW_CARD_CONTEXT: "Mostrar conxtexto nas cartas?",
  SHOW_CARD_CONTEXT_DESC: "ex: T\xEDtulo > Cabe\xE7alho 1 > Subcabe\xE7alho > ... > Subcabe\xE7alho",
  CARD_MODAL_HEIGHT_PERCENT: "Porcentagem da Altura do Flashcard",
  CARD_MODAL_SIZE_PERCENT_DESC: "Deveria estar configurado em 100% em dispositivos m\xF3veis ou se voc\xEA tem imagens muito grandes",
  RESET_DEFAULT: "Reiniciar para a pr\xE9-defini\xE7\xE3o",
  CARD_MODAL_WIDTH_PERCENT: "Porcentagem de Largura do Flashcard",
  RANDOMIZE_CARD_ORDER: "Aleatorizar a ordem das cartas durante a revis\xE3o?",
  DISABLE_CLOZE_CARDS: "Desabilitar cartas que usam omiss\xE3o de palavras?",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "Converter ==marca-texto== em omiss\xF5es?",
  CONVERT_BOLD_TEXT_TO_CLOZES: "Converter **texto em negrito** em omiss\xF5es?",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "Converter {{chaves}} em omiss\xF5es?",
  INLINE_CARDS_SEPARATOR: "Separador para flashcards inline",
  FIX_SEPARATORS_MANUALLY_WARNING: "Note que depois de mudar isso voc\xEA vai ter que manualmente mudar quaisquer flashcards que voc\xEA tenha.",
  INLINE_REVERSED_CARDS_SEPARATOR: "Separador para flashcards inline reversos",
  MULTILINE_CARDS_SEPARATOR: "Separador para flashcards de m\xFAltiplas linhas",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "Separador para flashcards de m\xFAltiplas linhas reversos",
  NOTES: "Notas",
  REVIEW_PANE_ON_STARTUP: "Enable note review pane on startup",
  TAGS_TO_REVIEW: "Etiquetas para revisar",
  TAGS_TO_REVIEW_DESC: "Ensira etiquetas separadas por espa\xE7os ou quebra de linhas ex: #revisar #etiqueta2 #etiqueta3.",
  OPEN_RANDOM_NOTE: "Abrir uma nota aleat\xF3ria para revisar",
  OPEN_RANDOM_NOTE_DESC: "Quando voc\xEA desabilitar isso, as notas v\xE3o ser ordenadas por import\xE2ncia (PageRank).",
  AUTO_NEXT_NOTE: "Abrir a pr\xF3xima nota automaticamente depois de uma revis\xE3o",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "Desabilitar op\xE7\xF5es de revis\xE3o no menu de arquivos ex: Revis\xE3o: F\xE1cil OK Dif\xEDcil",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "Depois de desabilitar, voc\xEA pode revisar usando os atalhos de comando. Reinicie Obsidian depois de mudar isso.",
  MAX_N_DAYS_REVIEW_QUEUE: "N\xFAmero m\xE1ximo de dias para exibir no painel direito",
  MIN_ONE_DAY: "O n\xFAmero de dias deve ser pelo menos 1.",
  VALID_NUMBER_WARNING: "Por favor ensira um n\xFAmero v\xE1lido.",
  UI_PREFERENCES: "Prefer\xEAncias de UI",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "\xC1rvores de baralhos devem inicialmente serem exibidas como expandidas",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: "Desabilite isso para colapsar baralhos que est\xE3o um dentro do outro na mesma carta. \xDAtil se voc\xEA tem cartas que pertencem a muitos baralhos em um mesmo arquivo.",
  ALGORITHM: "Algor\xEDtmo",
  CHECK_ALGORITHM_WIKI: 'Para mais informa\xE7\xF5es, cheque a <a href="${algo_url}">implementa\xE7\xE3o do algor\xEDtmo</a>.',
  BASE_EASE: "Facilidade base",
  BASE_EASE_DESC: "m\xEDnimo = 130, preferivelmente aproximadamente 250.",
  BASE_EASE_MIN_WARNING: "A facilidade base deve ser pelo menos 130.",
  LAPSE_INTERVAL_CHANGE: "Mudan\xE7a de intervalo quando voc\xEA revisa um(a) flashcard/nota como dif\xEDcil",
  LAPSE_INTERVAL_CHANGE_DESC: "novoIntervalo = velhoIntervalo * mudancaIntervalo / 100.",
  EASY_BONUS: "B\xF4nus de F\xE1cil",
  EASY_BONUS_DESC: "O b\xF4nus de f\xE1cil te permite mudar a difer\xEAncia entre intervalos de responder OK e F\xE1cil em um(a) flashcard/nota (m\xEDnimo = 100%).",
  EASY_BONUS_MIN_WARNING: "O b\xF4nus de f\xE1cil deve ser pelo menos 100.",
  MAX_INTERVAL: "Intervalo M\xE1ximo",
  MAX_INTERVAL_DESC: "Te permite colocar um limite m\xE1ximo no intervalo (pr\xE9-defini\xE7\xE3o = 100 anos).",
  MAX_INTERVAL_MIN_WARNING: "O intervalo m\xE1ximo deve ser pelo menos 1 dia.",
  MAX_LINK_CONTRIB: "Contribui\xE7\xE3o M\xE1xima de Links",
  MAX_LINK_CONTRIB_DESC: "Contribui\xE7\xE3o m\xE1xima da facilidade ponderada das notas linkadas \xE0 facilidade inicial.",
  LOGGING: "Logging",
  DISPLAY_DEBUG_INFO: "Mostrar informa\xE7\xE3o de debugging no console de desenvolvimento?",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "Fila de Notas para Revisar",
  CLOSE: "Fechar",
  NEW: "Novo",
  YESTERDAY: "Ontem",
  TODAY: "Hoje",
  TOMORROW: "Amanh\xE3",
  // stats-modal.tsx
  STATS_TITLE: "Estat\xEDsticas",
  MONTH: "M\xEAs",
  QUARTER: "Quarto",
  YEAR: "Ano",
  LIFETIME: "Tempo Total",
  FORECAST: "Previs\xE3o",
  FORECAST_DESC: "O n\xFAmero de cartas a serem colocadas em dia no futuro",
  SCHEDULED: "Agendado",
  DAYS: "Dias",
  NUMBER_OF_CARDS: "N\xFAmero de cartas",
  REVIEWS_PER_DAY: "M\xE9dia: ${avg} revis\xF5es/dia",
  INTERVALS: "Intervalos",
  INTERVALS_DESC: "Atrasos at\xE9 que as revis\xF5es sejam exibidas de novo",
  COUNT: "Contagem",
  INTERVALS_SUMMARY: "Intervalo em m\xE9dia: ${avg}, Maior intervalo: ${longest}",
  EASES: "Facilidades",
  EASES_SUMMARY: "Facilidade em m\xE9dia: ${avgEase}",
  CARD_TYPES: "Tipos de Cartas",
  CARD_TYPES_DESC: "Isso tamb\xE9m inclui cartas enterrados, caso existam",
  CARD_TYPE_NEW: "Novo",
  CARD_TYPE_YOUNG: "Jovem",
  CARD_TYPE_MATURE: "Amadurecido",
  CARD_TYPES_SUMMARY: "Total de cartas: ${totalCardsCount}"
};

// src/lang/locale/ro.ts
var ro_default = {};

// src/lang/locale/ru.ts
var ru_default = {
  // flashcard-modal.tsx
  DECKS: "\u0423\u0440\u043E\u0432\u043D\u0438",
  DUE_CARDS: "\u041F\u0440\u0435\u0434\u0441\u0442\u043E\u044F\u0449\u0438\u0435 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438",
  NEW_CARDS: "\u041D\u043E\u0432\u044B\u0435 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438",
  TOTAL_CARDS: "\u0412\u0441\u0435\u0433\u043E \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A",
  BACK: "Back",
  SKIP: "Skip",
  EDIT_CARD: "Edit Card",
  RESET_CARD_PROGRESS: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438",
  HARD: "\u0421\u043B\u043E\u0436\u043D\u043E",
  GOOD: "\u041D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u043E",
  EASY: "\u041B\u0435\u0433\u043A\u043E",
  SHOW_ANSWER: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043E\u0442\u0432\u0435\u0442",
  CARD_PROGRESS_RESET: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441 \u0438\u0437\u0443\u0447\u0435\u043D\u0438\u0435 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438",
  SAVE: "Save",
  CANCEL: "Cancel",
  NO_INPUT: "No input provided.",
  CURRENT_EASE_HELP_TEXT: "Current Ease: ",
  CURRENT_INTERVAL_HELP_TEXT: "Current Interval: ",
  CARD_GENERATED_FROM: "Generated from: ${notePath}",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0437\u0430\u043C\u0435\u0442\u043A\u0443 \u0434\u043B\u044F \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F",
  REVIEW_CARDS: "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438",
  REVIEW_EASY_FILE_MENU: "\u041F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0435: \u041B\u0435\u0433\u043A\u043E",
  REVIEW_GOOD_FILE_MENU: "\u041F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0435: \u041D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u043E",
  REVIEW_HARD_FILE_MENU: "\u041F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0435: \u0421\u043B\u043E\u0436\u043D\u043E",
  REVIEW_NOTE_EASY_CMD: "\u041F\u043E\u0432\u0442\u043E\u0440\u044F\u0442\u044C \u0437\u0430\u043C\u0435\u0442\u043A\u0443 \u043A\u0430\u043A \u041B\u0451\u0433\u043A\u0443\u044E",
  REVIEW_NOTE_GOOD_CMD: "\u041F\u043E\u0432\u0442\u043E\u0440\u044F\u0442\u044C \u0437\u0430\u043C\u0435\u0442\u043A\u0443 \u043A\u0430\u043A \u041D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u0443\u044E",
  REVIEW_NOTE_HARD_CMD: "\u041F\u043E\u0432\u0442\u043E\u0440\u044F\u0442\u044C \u0437\u0430\u043C\u0435\u0442\u043A\u0443 \u043A\u0430\u043A \u0421\u043B\u043E\u0436\u043D\u0443\u044E",
  REVIEW_ALL_CARDS: "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C \u0432\u0441\u0435 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438 \u0432\u043E \u0432\u0441\u0435\u0445 \u0437\u0430\u043C\u0435\u0442\u043A\u0430\u0445",
  CRAM_ALL_CARDS: "Select a deck to cram",
  REVIEW_CARDS_IN_NOTE: "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438 \u0432 \u044D\u0442\u043E\u0439 \u0437\u0430\u043C\u0435\u0442\u043A\u0435",
  CRAM_CARDS_IN_NOTE: "\u0417\u0443\u0431\u0440\u0438\u0442\u044C \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438 \u0432 \u044D\u0442\u043E\u0439 \u0437\u0430\u043C\u0435\u0442\u043A\u0435",
  VIEW_STATS: "\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043A\u0443",
  STATUS_BAR: "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C: ${dueNotesCount} \u0437\u0430\u043C\u0435\u0442\u043E\u043A(-\u043A\u0438), ${dueFlashcardsCount} \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A(-\u043A\u0438) \u043F\u0440\u0435\u0434\u0441\u0442\u043E\u0438\u0442",
  SYNC_TIME_TAKEN: "\u0421\u0438\u043D\u0445\u0440\u043E\u043D\u0438\u0437\u0430\u0446\u0438\u044F \u0437\u0430\u043D\u044F\u043B\u0430 ${t}\u043C\u0441",
  NOTE_IN_IGNORED_FOLDER: "\u0417\u0430\u043C\u0435\u0442\u043A\u0430 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0430 \u0432 \u0438\u0433\u043D\u043E\u0440\u0438\u0440\u0443\u0435\u043C\u0443\u044E \u043F\u0430\u043F\u043A\u0443 (\u0441\u043C \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438).",
  PLEASE_TAG_NOTE: "\u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430 \u043F\u043E\u043C\u0435\u0442\u044C\u0442\u0435 \u0437\u0430\u043C\u0435\u0442\u043A\u0443 \u043A\u0430\u043A \u043D\u0430\u0434\u043E \u0434\u043B\u044F \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F (\u0441\u043C \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438).",
  RESPONSE_RECEIVED: "\u041E\u0442\u0432\u0435\u0442 \u043F\u043E\u043B\u0443\u0447\u0435\u043D.",
  NO_DECK_EXISTS: "\u041D\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0443\u0440\u043E\u0432\u043D\u044F ${deckName}",
  ALL_CAUGHT_UP: "\u0415\u0441\u0442\u044C! \u0422\u044B \u0441\u043F\u0440\u0430\u0432\u0438\u043B\u0441\u044F! :D.",
  // scheduling.ts
  DAYS_STR_IVL: "${interval} \u0434\u043D\u0435\u0439",
  MONTHS_STR_IVL: "${interval} \u043C\u0435\u0441\u044F\u0446\u043E\u0432",
  YEARS_STR_IVL: "${interval} \u0433\u043E\u0434\u0430(\u043B\u0435\u0442)",
  DAYS_STR_IVL_MOBILE: "${interval}\u0434",
  MONTHS_STR_IVL_MOBILE: "${interval}\u043C",
  YEARS_STR_IVL_MOBILE: "${interval}\u0433",
  // settings.ts
  SETTINGS_HEADER: "Spaced Repetition \u041F\u043B\u0430\u0433\u0438\u043D - \u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
  CHECK_WIKI: '\u0414\u043B\u044F \u0434\u043E\u043F \u0438\u043D\u0444\u044B, \u0441\u043C\u043E\u0442\u0440\u0438 <a href="${wiki_url}">wiki</a>. \u0421\u043A\u043E\u0440\u043E \u0431\u0443\u0434\u0435\u0442 \u043F\u0435\u0440\u0435\u0432\u043E\u0434 :3',
  FOLDERS_TO_IGNORE: "\u0418\u0433\u043D\u043E\u0440\u0438\u0440\u0443\u0435\u043C\u044B\u0435 \u043F\u0430\u043F\u043A\u0438",
  FOLDERS_TO_IGNORE_DESC: "\u0412\u0435\u0434\u0438\u0442\u0435 \u043F\u0443\u0442\u0438 \u043F\u0430\u043F\u043E\u043A \u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0435 enter'\u043E\u043C \u043F\u0440\u0438\u043C\u0435\u0440: Templates Meta/Scripts",
  FLASHCARDS: "\u041A\u0430\u0440\u0442\u043E\u0447\u043A\u0438",
  FLASHCARD_EASY_LABEL: "Easy Button Text",
  FLASHCARD_GOOD_LABEL: "Good Button Text",
  FLASHCARD_HARD_LABEL: "Hard Button Text",
  FLASHCARD_EASY_DESC: 'Customize the label for the "Easy" Button',
  FLASHCARD_GOOD_DESC: 'Customize the label for the "Good" Button',
  FLASHCARD_HARD_DESC: 'Customize the label for the "Hard" Button',
  FLASHCARD_TAGS: "\u0422\u044D\u0433\u0438 \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A",
  FLASHCARD_TAGS_DESC: "\u0412\u0435\u0434\u0438\u0442\u0435 \u0442\u044D\u0433\u0438 \u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0435 enter'\u043E\u043C \u0438\u043B\u0438 \u043F\u0440\u043E\u0431\u0435\u043B\u043E\u043C \u043F\u0440\u0438\u043C\u0435\u0440: #flashcards #deck2 #deck3.",
  CONVERT_FOLDERS_TO_DECKS: "\u041A\u043E\u043D\u0432\u0435\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u0430\u043F\u043A\u0438 \u0432 \u0443\u0440\u043E\u0432\u043D\u0438 \u0438 \u043F\u043E\u0434\u0443\u0440\u043E\u0432\u043D\u0438?",
  CONVERT_FOLDERS_TO_DECKS_DESC: "\u042D\u0442\u043E \u0430\u043B\u044C\u0442\u0435\u0440\u043D\u0430\u0442\u0438\u0432\u0430 \u0442\u044D\u0433\u0430\u043C \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A, \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430 \u0441\u0432\u0435\u0440\u0445\u0443.",
  INLINE_SCHEDULING_COMMENTS: "\u0421\u043E\u0445\u0440\u0430\u043D\u044F\u0442\u044C \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439 \u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043D\u0430 \u0441\u0442\u0440\u043E\u043A\u0435 \u043F\u043E\u0441\u043B\u0435 \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A?",
  INLINE_SCHEDULING_COMMENTS_DESC: "\u0412\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u044D\u0442\u043E\u0433\u043E \u0441\u0434\u0435\u043B\u0430\u0435\u0442 \u0442\u0430\u043A, \u0447\u0442\u043E HTML \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0438 \u043D\u0435 \u0431\u0443\u0434\u0443\u0442 \u043B\u043E\u043C\u0430\u0442\u044C \u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435 \u0441\u043F\u0438\u0441\u043A\u0430.",
  BURY_SIBLINGS_TILL_NEXT_DAY: "\u041F\u0440\u044F\u0442\u0430\u0442\u044C \u0440\u043E\u0434\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u0435 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438 \u0434\u043E \u0441\u043B\u0435\u0434. \u0434\u043D\u044F?",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "\u0420\u043E\u0434\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u0435 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438 - \u0442\u0435, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u044B \u0438\u0437 \u043E\u0434\u043D\u043E\u0433\u043E \u0442\u0435\u043A\u0441\u0442\u0430, \u043F\u0440\u0438\u043C\u0435\u0440: \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438 \u0441 \u043F\u0440\u043E\u043F\u0443\u0441\u043A\u0430\u043C\u0438([...])",
  SHOW_CARD_CONTEXT: "\u041F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442(\u0443\u0440\u043E\u0432\u0435\u043D\u044C) \u0432 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0430\u0445(\u0432\u043E \u0432\u0440\u0435\u043C\u044F \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F)?",
  SHOW_CARD_CONTEXT_DESC: "\u043F\u0440\u0438\u043C\u0435\u0440: Title > Heading 1 > Subheading > ... > Subheading",
  CARD_MODAL_HEIGHT_PERCENT: "\u0412\u044B\u0441\u043E\u0442\u0430 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438 \u0432\u043F\u0440\u043E\u0446\u0435\u043D\u0442\u0430\u0445",
  CARD_MODAL_SIZE_PERCENT_DESC: "\u0415\u0441\u043B\u0438 \u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0435\u0441\u044C \u043C\u043E\u0431\u0438\u043B\u044C\u043D\u044B\u043C \u0442\u0435\u043B\u0435\u0444\u043E\u043D\u043E\u043C, \u0432\u044B\u0441\u0442\u0430\u0432\u044C\u0442\u0435 100% \u0438\u043B\u0438 \u0443 \u0432\u0430\u0441 \u0431\u0443\u0434\u0443\u0442 \u043E\u0433\u0440\u043E\u043C\u043D\u044B\u0435 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F",
  RESET_DEFAULT: "\u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u043F\u043E \u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E",
  CARD_MODAL_WIDTH_PERCENT: "\u0428\u0438\u0440\u0438\u043D\u0430 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438 \u0432 \u043F\u0440\u043E\u0446\u0435\u043D\u0442\u0430\u0445",
  RANDOMIZE_CARD_ORDER: "\u0421\u043B\u0443\u0447\u0430\u0439\u043D\u044B\u0439 \u043F\u043E\u0440\u044F\u0434\u043E\u043A \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A \u0432\u043E \u0432\u0440\u0435\u043C\u044F \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F?",
  DISABLE_CLOZE_CARDS: "\u0412\u044B\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043A\u0430\u0440\u0442\u044B \u0441 \u043F\u0440\u043E\u043F\u0443\u0441\u043A\u0430\u043C\u0438(\u043F\u0440\u0438\u043C\u0435\u0440: [...])?",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "\u041A\u043E\u043D\u0432\u0435\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C ==\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0439 \u0442\u0435\u043A\u0441\u0442== \u0432 \u043F\u0440\u043E\u043F\u0443\u0441\u043A\u0438(\u043F\u0440\u0438\u043C\u0435\u0440: [...])?",
  CONVERT_BOLD_TEXT_TO_CLOZES: "\u041A\u043E\u043D\u0432\u0435\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C **\u0436\u0438\u0440\u043D\u044B\u0439 \u0442\u0435\u043A\u0441\u0442** \u0432 \u043F\u0440\u043E\u043F\u0443\u0441\u043A\u0438(\u043F\u0440\u0438\u043C\u0435\u0440: [...])?",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "\u041A\u043E\u043D\u0432\u0435\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C {{\u0444\u0438\u0433\u0443\u0440\u043D\u044B\u0435 \u0441\u043A\u043E\u0431\u043A\u0438}} \u0432 \u043F\u0440\u043E\u043F\u0443\u0441\u043A\u0438(\u043F\u0440\u0438\u043C\u0435\u0440: [...])?",
  INLINE_CARDS_SEPARATOR: "\u0420\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C \u0434\u043B\u044F \u0432\u043D\u0443\u0442\u0440\u0438\u0441\u0442\u0440\u043E\u0447\u043D\u044B\u0445 \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A",
  FIX_SEPARATORS_MANUALLY_WARNING: "\u0412\u043D\u0438\u043C\u0430\u043D\u0438\u0435! \u043F\u043E\u0441\u043B\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u044D\u0442\u043E\u0433\u043E \u0432\u0430\u043C \u043F\u0440\u0438\u0434\u0451\u0442\u0441\u044F \u0432\u0440\u0443\u0447\u043D\u0443\u044E \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0435 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438",
  INLINE_REVERSED_CARDS_SEPARATOR: "\u0420\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C \u0434\u043B\u044F \u043E\u0431\u0440\u0430\u0442\u043D\u044B\u0445 \u0432\u043D\u0443\u0442\u0440\u0438\u0441\u0442\u0440\u043E\u0447\u043D\u044B\u0445 \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A",
  MULTILINE_CARDS_SEPARATOR: "\u0420\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C \u0434\u043B\u044F \u043C\u043D\u043E\u0433\u043E\u0441\u0442\u0440\u043E\u0447\u043D\u044B\u0445 \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "\u0420\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C \u0434\u043B\u044F \u043E\u0431\u0440\u0430\u0442\u043D\u044B\u0445 \u043C\u043D\u043E\u0433\u043E\u0441\u0442\u0440\u043E\u0447\u043D\u044B\u0445 \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A",
  NOTES: "\u0417\u0430\u043C\u0435\u0442\u043A\u0438",
  REVIEW_PANE_ON_STARTUP: "Enable note review pane on startup",
  TAGS_TO_REVIEW: "\u0422\u044D\u0433\u0438 \u0434\u043B\u044F \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F",
  TAGS_TO_REVIEW_DESC: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u044D\u0433\u0438, \u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0435 \u043F\u0440\u043E\u0431\u0435\u043B\u0430\u043C\u0438 \u0438\u043B\u0438 enter`\u0430\u043C\u0438, \u043F\u0440\u0438\u043C\u0435\u0440: #review #tag2 #tag3.",
  OPEN_RANDOM_NOTE: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0441\u043B\u0443\u0447\u0430\u0439\u043D\u0443\u044E \u0437\u0430\u043C\u0435\u0442\u043A\u0443 \u0434\u043B\u044F \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F",
  OPEN_RANDOM_NOTE_DESC: "\u0415\u0441\u043B\u0438 \u0432\u044B\u043A\u043B\u044E\u0447\u0438\u0442\u044C, \u0442\u043E \u0437\u0430\u043C\u0435\u0442\u043A\u0438 \u0431\u0443\u0434\u0443\u0442 \u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u044C \u043F\u043E \u0432\u0430\u0436\u043D\u043E\u0441\u0442\u0438 (PageRank).",
  AUTO_NEXT_NOTE: "\u041E\u0442\u043A\u0440\u044B\u0432\u0430\u0442\u044C \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E \u0437\u0430\u043C\u0435\u0442\u043A\u0438 \u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "\u0412\u044B\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0432\u044B\u0431\u043E\u0440 \u0441\u043B\u043E\u0436\u043D\u043E\u0441\u0442\u0438 \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F \u0432 \u043C\u0435\u043D\u044E \u0444\u0430\u0439\u043B\u0430, \u043F\u0440\u0438\u043C\u0435\u0440: \u041F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0435: \u041B\u0435\u0433\u043A\u043E \u041D\u043E\u0440\u043C\u0430\u043B\u044C\u043D\u043E \u0421\u043B\u043E\u0436\u043D\u043E",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "\u041F\u043E\u0441\u043B\u0435 \u0432\u044B\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F \u0432\u044B \u0441\u043C\u043E\u0436\u0435\u0442\u0435 \u043F\u043E\u0432\u0442\u043E\u0440\u044F\u0442\u044C \u043F\u0440\u0438 \u043F\u043E\u043C\u043E\u0449\u0438 \u0445\u043E\u0442\u043A\u0435\u0435\u0432. \u041F\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 Obsidian \u043F\u043E\u0441\u043B\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u044D\u0442\u043E\u0433\u043E.",
  MAX_N_DAYS_REVIEW_QUEUE: "\u041D\u0430\u0438\u0431\u043E\u043B\u044C\u0448\u0435\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0434\u043D\u0435\u0439 \u0434\u043B\u044F \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435 \u043D\u0430 \u043F\u0430\u043D\u0435\u043B\u0438 \u0441\u043F\u0440\u0430\u0432\u0430",
  MIN_ONE_DAY: "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0434\u043D\u0435\u0439 \u043D\u0435 \u043C\u0435\u043D\u044C\u0448\u0435 1.",
  VALID_NUMBER_WARNING: "\u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430 \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u043F\u043E\u0434\u0445\u043E\u0434\u044F\u0449\u0435\u0435 \u0447\u0438\u0441\u043B\u043E.",
  UI_PREFERENCES: "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0439 \u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u041D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "\u0414\u0435\u0440\u0435\u0432\u044C\u044F \u043A\u043E\u043B\u043E\u0434 \u0434\u043E\u043B\u0436\u043D\u044B \u0438\u0437\u043D\u0430\u0447\u0430\u043B\u044C\u043D\u043E \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0442\u044C\u0441\u044F \u043A\u0430\u043A \u0440\u0430\u0437\u0432\u0435\u0440\u043D\u0443\u0442\u044B\u0435",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u0435 \u044D\u0442\u043E\u0442 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440, \u0447\u0442\u043E\u0431\u044B \u0441\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0432\u043B\u043E\u0436\u0435\u043D\u043D\u044B\u0435 \u043A\u043E\u043B\u043E\u0434\u044B \u043D\u0430 \u043E\u0434\u043D\u043E\u0439 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0435. \u041F\u043E\u043B\u0435\u0437\u043D\u043E, \u0435\u0441\u043B\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044C \u043A\u0430\u0440\u0442\u044B, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u043F\u0440\u0438\u043D\u0430\u0434\u043B\u0435\u0436\u0430\u0442 \u043C\u043D\u043E\u0433\u0438\u043C \u043A\u043E\u043B\u043E\u0434\u0430\u043C \u0432 \u043E\u0434\u043D\u043E\u043C \u0444\u0430\u0439\u043B\u0435.",
  ALGORITHM: "\u0410\u043B\u0433\u043E\u0440\u0438\u0442\u043C",
  CHECK_ALGORITHM_WIKI: '\u0417\u0430 \u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u0435\u0439 \u043E\u0431\u0440\u0430\u0449\u0430\u0439\u0442\u0435\u0441\u044C \u043A <a href="${algo_url}">\u0440\u0435\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F \u0430\u043B\u0433\u043E\u0440\u0438\u0442\u043C\u0430</a>(\u0441\u043A\u043E\u0440\u043E \u0431\u0443\u0434\u0435\u0442 \u043F\u0435\u0440\u0435\u0432\u043E\u0434).',
  BASE_EASE: "\u0411\u0430\u0437\u043E\u0432\u0430\u044F \u041B\u0451\u0433\u043A\u043E\u0441\u0442\u044C",
  BASE_EASE_DESC: "\u043C\u0438\u043D\u0438\u043C\u0443\u043C = 130, \u043F\u0440\u0435\u0434\u043F\u043E\u0447\u0442\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u043E\u043A\u043E\u043B\u043E 250.",
  BASE_EASE_MIN_WARNING: "\u041B\u0451\u0433\u043A\u043E\u0441\u0442\u044C \u0434\u043E\u043B\u0436\u043D\u0430 \u0431\u044B\u0442\u044C \u043C\u0438\u043D\u0438\u043C\u0443\u043C 130.",
  LAPSE_INTERVAL_CHANGE: "\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0435 \u043F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043A\u0430 \u043A\u043E\u0433\u0434\u0430 \u0432\u044B \u043E\u0442\u0432\u0435\u0447\u0430\u0435\u0442\u0435 \u0421\u043B\u043E\u0436\u043D\u043E \u0432\u043E \u0432\u0440\u0435\u043C\u044F \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438/\u0437\u0430\u043C\u0435\u0442\u043A\u0438",
  LAPSE_INTERVAL_CHANGE_DESC: "\u043D\u043E\u0432\u044B\u0439\u041F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043E\u043A = \u0441\u0442\u0430\u0440\u044B\u0439\u041F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043E\u043A * \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0435\u041F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043A\u0430 / 100.",
  EASY_BONUS: "\u041B\u0435\u0433\u043A\u043E: \u0431\u043E\u043D\u0443\u0441",
  EASY_BONUS_DESC: "\u0411\u043E\u043D\u0443\u0441 \u0437\u0430 \u041B\u0435\u0433\u043A\u043E \u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0435\u0442 \u0432\u0430\u043C \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0440\u0430\u0437\u043D\u0438\u0446\u0443 \u0432 \u043F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043A\u0430\u0445 \u043C\u0435\u0436\u0434\u0443 \u043E\u0442\u0432\u0435\u0442\u0430\u043C\u0438 \u0425\u043E\u0440\u043E\u0448\u043E \u0438 \u041B\u0435\u0433\u043A\u043E \u043D\u0430 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0435/\u0437\u0430\u043C\u0435\u0442\u043A\u0435 (\u043C\u0438\u043D. = 100%).",
  EASY_BONUS_MIN_WARNING: "\u0411\u043E\u043D\u0443\u0441 \u0437\u0430 \u041B\u0435\u0433\u043A\u043E \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C \u043D\u0435 \u043C\u0435\u043D\u044C\u0448\u0435 100.",
  MAX_INTERVAL: "\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u043F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043E\u043A(\u043E\u0442\u043A\u043B\u0430\u0434\u044B\u0432\u0430\u043D\u0438\u044F \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438)",
  MAX_INTERVAL_DESC: "\u041F\u043E\u0437\u0432\u043E\u043B\u044F\u0435\u0442 \u0432\u0430\u043C \u0443\u0441\u0442\u0430\u043D\u0430\u0432\u043B\u0438\u0432\u0430\u0442\u044C \u0432\u0435\u0440\u0445\u043D\u044E\u044E \u0433\u0440\u0430\u043D\u0438\u0446\u0443 \u043D\u0430 \u043F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043E\u043A (\u043F\u043E \u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E = 100 years).",
  MAX_INTERVAL_MIN_WARNING: "\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u043F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043E\u043A \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C \u043D\u0435 \u043C\u0435\u043D\u044C\u0448\u0435 1.",
  MAX_LINK_CONTRIB: "\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u0432\u043A\u043B\u0430\u0434 \u0441\u0432\u044F\u0437\u0438(\u0441\u0441\u044B\u043B\u043A\u0438)",
  MAX_LINK_CONTRIB_DESC: "\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u0432\u043A\u043B\u0430\u0434 \u0432\u0437\u0432\u0435\u0448\u0435\u043D\u043D\u043E\u0439 \u041B\u0451\u0433\u043A\u043E\u0441\u0442\u0438 \u0441\u0432\u044F\u0437\u0430\u043D\u043D\u044B\u0445 \u0437\u0430\u043C\u0435\u0442\u043E\u043A \u0432 \u043D\u0430\u0447\u0430\u043B\u044C\u043D\u0443\u044E \u041B\u0451\u0433\u043A\u043E\u0441\u0442\u044C.",
  LOGGING: "\u0412\u0435\u0434\u0435\u043D\u0438\u0435 \u043B\u043E\u0433\u0430",
  DISPLAY_DEBUG_INFO: "\u041E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0442\u044C \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E \u043E\u0442\u043B\u0430\u0434\u043A\u0438 \u043D\u0430 \u043A\u043E\u043D\u0441\u043E\u043B\u044C \u0440\u0430\u0437\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u0430(developer console)?",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "\u041E\u0447\u0435\u0440\u0435\u0434\u044C \u0437\u0430\u043C\u0435\u0442\u043E\u043A \u043D\u0430 \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0435",
  CLOSE: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
  NEW: "\u041D\u043E\u0432\u044B\u0435",
  YESTERDAY: "\u0412\u0447\u0435\u0440\u0430\u0448\u043D\u0438\u0435",
  TODAY: "\u0421\u0435\u0433\u043E\u0434\u043D\u044F\u0448\u043D\u0438\u0435",
  TOMORROW: "\u0417\u0430\u0432\u0442\u0440\u0430\u0448\u043D\u0438\u0435",
  // stats-modal.tsx
  STATS_TITLE: "\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043A\u0430",
  MONTH: "\u041C\u0435\u0441\u044F\u0446",
  QUARTER: "\u0427\u0435\u0442\u0432\u0435\u0440\u0442\u044C",
  YEAR: "\u0413\u043E\u0434",
  LIFETIME: "\u0412\u0441\u0451 \u0432\u0440\u0435\u043C\u044F",
  FORECAST: "\u041F\u0440\u043E\u0433\u043D\u043E\u0437",
  FORECAST_DESC: "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A \u043F\u0440\u0435\u0434\u0441\u0442\u043E\u044F\u0449\u0438\u0445 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043C",
  SCHEDULED: "\u0417\u0430\u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u043E",
  DAYS: "\u0414\u043D\u0435\u0439",
  NUMBER_OF_CARDS: "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A",
  REVIEWS_PER_DAY: "\u0421\u0440\u0435\u0434\u043D\u0435\u0435 \u043A\u043E\u043B\u0438\u0447\u0441\u0442\u0432\u043E: ${avg} \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u0439/\u0434\u0435\u043D\u044C",
  //!!!
  INTERVALS: "\u0418\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u044B",
  INTERVALS_DESC: "\u041F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043A\u0438 \u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u0434\u043E \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0433\u043E \u043F\u043E\u043A\u0430\u0437\u0430 \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A \u0432\u043E \u0432\u0440\u0435\u043C\u044F \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\u044F",
  COUNT: "\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E",
  INTERVALS_SUMMARY: "\u0421\u0440\u0435\u0434\u043D\u0438\u0439 \u043F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043E\u043A: ${avg}, \u0421\u0430\u043C\u044B\u0439 \u0434\u043B\u0438\u043D\u043D\u044B\u0439 \u043F\u0440\u043E\u043C\u0435\u0436\u0443\u0442\u043E\u043A: ${longest}",
  EASES: "\u041B\u0451\u0433\u043A\u043E\u0441\u0442\u044C(\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440 \u0432 \u0430\u043B\u0433\u043E\u0440\u0438\u0442\u043C\u0435, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u0432\u043B\u0438\u044F\u0435\u0442 \u043D\u0430 \u043F\u0440\u0438\u043E\u0440\u0438\u0442\u0435\u0442 \u0438 \u0432\u0440\u0435\u043C\u044F \u043F\u043E\u043A\u0430\u0437\u0430 \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A) \n (\u043E\u0442 \u0430\u043D\u0433\u043B. ease, \u0441\u043C \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438 \u0430\u043B\u0433\u043E\u0440\u0438\u0442\u043C\u0430)",
  EASES_SUMMARY: "\u0421\u0440\u0435\u0434\u043D\u0435\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u041B\u0451\u0433\u043A\u043E\u0441\u0442\u0438: ${avgEase}",
  CARD_TYPES: "\u0422\u0438\u043F\u044B \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A",
  CARD_TYPES_DESC: "\u042D\u0442\u043E \u0432\u043A\u043B\u044E\u0447\u0430\u044F \u0441\u043F\u0440\u044F\u0442\u0430\u043D\u043D\u044B\u0435 \u043A\u0430\u0440\u0442\u043E\u0447\u043A\u0438, \u0435\u0441\u043B\u0438 \u0447\u0442\u043E:",
  CARD_TYPE_NEW: "\u041D\u043E\u0432\u044B\u0445",
  CARD_TYPE_YOUNG: "\u041C\u043E\u043B\u043E\u0434\u044B\u0445",
  CARD_TYPE_MATURE: "\u0412\u0437\u0440\u043E\u0441\u043B\u044B\u0445",
  CARD_TYPES_SUMMARY: "\u0412\u0441\u0435\u0433\u043E \u043A\u0430\u0440\u0442\u043E\u0447\u0435\u043A: ${totalCardsCount}"
};

// src/lang/locale/ta.ts
var ta_default = {};

// src/lang/locale/te.ts
var te_default = {};

// src/lang/locale/th.ts
var th_default = {};

// src/lang/locale/tr.ts
var tr_default = {};

// src/lang/locale/uk.ts
var uk_default = {};

// src/lang/locale/ur.ts
var ur_default = {};

// src/lang/locale/vi.ts
var vi_default = {};

// src/lang/locale/zh-cn.ts
var zh_cn_default = {
  // flashcard-modal.tsx
  DECKS: "\u5361\u7EC4",
  DUE_CARDS: "\u5230\u671F\u5361\u7247",
  NEW_CARDS: "\u65B0\u5361\u7247",
  TOTAL_CARDS: "\u5168\u90E8\u5361\u7247",
  BACK: "Back",
  SKIP: "Skip",
  EDIT_CARD: "Edit Card",
  RESET_CARD_PROGRESS: "\u91CD\u7F6E\u5361\u7247",
  HARD: "\u8F83\u96BE",
  GOOD: "\u8BB0\u5F97",
  EASY: "\u7B80\u5355",
  SHOW_ANSWER: "\u663E\u793A\u7B54\u6848",
  CARD_PROGRESS_RESET: "\u5361\u7247\u5DF2\u88AB\u91CD\u7F6E\u3002",
  SAVE: "Save",
  CANCEL: "Cancel",
  NO_INPUT: "No input provided.",
  CURRENT_EASE_HELP_TEXT: "Current Ease: ",
  CURRENT_INTERVAL_HELP_TEXT: "Current Interval: ",
  CARD_GENERATED_FROM: "Generated from: ${notePath}",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "\u6253\u5F00\u4E00\u4E2A\u7B14\u8BB0\u5F00\u59CB\u590D\u4E60",
  REVIEW_CARDS: "\u590D\u4E60\u5361\u7247",
  REVIEW_EASY_FILE_MENU: "\u590D\u4E60\uFF1A\u7B80\u5355",
  REVIEW_GOOD_FILE_MENU: "\u590D\u4E60\uFF1A\u8BB0\u5F97",
  REVIEW_HARD_FILE_MENU: "\u590D\u4E60\uFF1A\u8F83\u96BE",
  REVIEW_NOTE_EASY_CMD: "\u6807\u8BB0\u4E3A\u201C\u7B80\u5355\u201D",
  REVIEW_NOTE_GOOD_CMD: "\u6807\u8BB0\u4E3A\u201C\u8BB0\u5F97\u201D",
  REVIEW_NOTE_HARD_CMD: "\u6807\u8BB0\u4E3A\u201C\u8F83\u96BE\u201D",
  REVIEW_ALL_CARDS: "\u590D\u4E60\u6240\u6709\u7B14\u8BB0\u4E2D\u7684\u5361\u7247",
  CRAM_ALL_CARDS: "Select a deck to cram",
  REVIEW_CARDS_IN_NOTE: "\u590D\u4E60\u6B64\u7B14\u8BB0\u4E2D\u7684\u5361\u7247",
  CRAM_CARDS_IN_NOTE: "\u96C6\u4E2D\u590D\u4E60\u6B64\u7B14\u8BB0\u4E2D\u7684\u5361\u7247",
  VIEW_STATS: "\u67E5\u770B\u6570\u636E",
  STATUS_BAR: "\u590D\u4E60: ${dueNotesCount} \u7B14\u8BB0, ${dueFlashcardsCount} \u5361\u7247\u5DF2\u5230\u671F",
  SYNC_TIME_TAKEN: "\u540C\u6B65\u65F6\u95F4 ${t}ms",
  NOTE_IN_IGNORED_FOLDER: "\u7B14\u8BB0\u4FDD\u5B58\u5728\u5DF2\u88AB\u5FFD\u7565\u7684\u8DEF\u5F84\u4E2D\uFF08\u68C0\u67E5\u8BBE\u7F6E\u9009\u9879\uFF09\u3002",
  PLEASE_TAG_NOTE: "\u8BF7\u5C06\u9700\u8981\u590D\u4E60\u7684\u7B14\u8BB0\u4E2D\u52A0\u5165\u6B63\u786E\u7684\u6807\u7B7E\uFF08\u68C0\u67E5\u8BBE\u7F6E\u9009\u9879\uFF09\u3002",
  RESPONSE_RECEIVED: "\u53CD\u9988\u5DF2\u6536\u5230",
  NO_DECK_EXISTS: "\u6CA1\u6709 ${deckName} \u5361\u7EC4",
  ALL_CAUGHT_UP: "\u90FD\u590D\u4E60\u5B8C\u5566\uFF0C\u4F60\u771F\u68D2\uFF01",
  // scheduling.ts
  DAYS_STR_IVL: "${interval} \u5929",
  MONTHS_STR_IVL: "${interval} \u6708",
  YEARS_STR_IVL: "${interval} \u5E74",
  DAYS_STR_IVL_MOBILE: "${interval}\u5929",
  MONTHS_STR_IVL_MOBILE: "${interval}\u6708",
  YEARS_STR_IVL_MOBILE: "${interval}\u5E74",
  // settings.ts
  SETTINGS_HEADER: "\u95F4\u9694\u91CD\u590D\u63D2\u4EF6 - \u8BBE\u7F6E",
  CHECK_WIKI: '\u4E86\u89E3\u66F4\u591A, \u8BF7\u70B9\u51FB <a href="${wiki_url}">wiki</a>.',
  FOLDERS_TO_IGNORE: "\u5FFD\u7565\u6B64\u6587\u4EF6\u5939",
  FOLDERS_TO_IGNORE_DESC: "\u8F93\u5165\u6587\u4EF6\u5939\u8DEF\u5F84\uFF0C\u7528\u65B0\u5EFA\u884C\u5206\u9694\uFF0C\u4F8B\u5982\uFF1ATemplates Meta/Scripts",
  FLASHCARDS: "\u5361\u7247",
  FLASHCARD_EASY_LABEL: "\u201C\u7B80\u5355\u201D\u6309\u94AE\u6587\u672C",
  FLASHCARD_GOOD_LABEL: "\u201C\u8BB0\u5F97\u201D\u6309\u94AE\u6587\u672C",
  FLASHCARD_HARD_LABEL: "\u201C\u8F83\u96BE\u201D\u6309\u94AE\u6587\u672C",
  FLASHCARD_EASY_DESC: "\u81EA\u5B9A\u4E49\u201C\u7B80\u5355\u201D\u6309\u94AE\u7684\u6807\u7B7E",
  FLASHCARD_GOOD_DESC: "\u81EA\u5B9A\u4E49\u201C\u8BB0\u5F97\u201D\u6309\u94AE\u7684\u6807\u7B7E",
  FLASHCARD_HARD_DESC: "\u81EA\u5B9A\u4E49\u201C\u8F83\u96BE\u201D\u6309\u94AE\u7684\u6807\u7B7E",
  FLASHCARD_TAGS: "\u5361\u7247\u6807\u7B7E",
  FLASHCARD_TAGS_DESC: "\u8F93\u5165\u6807\u7B7E\uFF0C\u7528\u7A7A\u683C\u6216\u65B0\u5EFA\u884C\u5206\u9694\uFF0C\u4F8B\u5982\uFF1A#flashcards #deck2 #deck3.",
  CONVERT_FOLDERS_TO_DECKS: "\u662F\u5426\u5C06\u6587\u4EF6\u5939\u5185\u5BB9\u8F6C\u6362\u4E3A\u5361\u7247\u7EC4\u548C\u5B50\u5361\u7247\u7EC4\uFF1F",
  CONVERT_FOLDERS_TO_DECKS_DESC: "\u6B64\u9009\u9879\u4E3A\u5361\u7247\u6807\u7B7E\u9009\u9879\u7684\u66FF\u4EE3\u9009\u9879\u3002",
  INLINE_SCHEDULING_COMMENTS: "\u662F\u5426\u5C06\u8BA1\u5212\u91CD\u590D\u65F6\u95F4\u4FDD\u5B58\u5728\u5361\u7247\u6700\u540E\u4E00\u884C\u7684\u540C\u4E00\u884C\uFF1F",
  INLINE_SCHEDULING_COMMENTS_DESC: "HTML\u6CE8\u91CA\u4E0D\u518D\u7834\u574F\u5217\u8868\u683C\u5F0F",
  BURY_SIBLINGS_TILL_NEXT_DAY: "\u5C06\u5173\u8054\u5361\u7247\u9690\u85CF\u81F3\u4E0B\u4E00\u5929\uFF1F",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "\u5173\u8054\u5361\u7247\u662F\u6765\u81EA\u540C\u4E00\u5361\u7247\u7684\u4E0D\u540C\u5F62\u5F0F\uFF0C \u4F8B\u5982\uFF1A\u5B8C\u5F62\u586B\u7A7A\u5361\u7247",
  SHOW_CARD_CONTEXT: "\u5728\u5361\u7247\u4E2D\u663E\u793A\u4E0A\u4E0B\u6587\uFF1F",
  SHOW_CARD_CONTEXT_DESC: "\u4F8B\u5982\uFF1A\u6807\u9898 > \u526F\u6807\u9898 > \u5C0F\u6807\u9898 > ... > \u5C0F\u6807\u9898",
  CARD_MODAL_HEIGHT_PERCENT: "\u5361\u7247\u9AD8\u5EA6\u767E\u5206\u6BD4",
  CARD_MODAL_SIZE_PERCENT_DESC: "\u8BF7\u5728\u79FB\u52A8\u7AEF\u4F7F\u7528\u5E76\u9700\u8981\u6D4F\u89C8\u8F83\u5927\u56FE\u7247\u65F6\u8BBE\u4E3A100%",
  RESET_DEFAULT: "\u91CD\u7F6E\u4E3A\u9ED8\u8BA4",
  CARD_MODAL_WIDTH_PERCENT: "\u5361\u7247\u5BBD\u5EA6\u767E\u5206\u6BD4",
  RANDOMIZE_CARD_ORDER: "\u590D\u4E60\u65F6\u968F\u673A\u663E\u793A\u5361\u7247\uFF1F",
  DISABLE_CLOZE_CARDS: "\u4E0D\u8FDB\u884C\u5B8C\u5F62\u586B\u7A7A\uFF1F",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "\u5C06 ==\u9AD8\u4EAE== \u8F6C\u6362\u4E3A\u5B8C\u5F62\u586B\u7A7A\uFF1F",
  CONVERT_BOLD_TEXT_TO_CLOZES: "\u5C06 **\u7C97\u4F53** \u8F6C\u6362\u4E3A\u5B8C\u5F62\u586B\u7A7A\uFF1F",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "\u5C06 {{\u5927\u62EC\u53F7}} \u8F6C\u6362\u4E3A\u5B8C\u5F62\u586B\u7A7A\uFF1F",
  INLINE_CARDS_SEPARATOR: "\u5355\u884C\u5361\u7247\u7684\u5206\u9694\u7B26",
  FIX_SEPARATORS_MANUALLY_WARNING: "\u6CE8\u610F\uFF1A\u66F4\u6539\u6B64\u9009\u9879\u540E\u4F60\u5C06\u9700\u8981\u81EA\u884C\u66F4\u6539\u5DF2\u5B58\u5728\u5361\u7247\u7684\u5206\u9694\u7B26\u3002",
  INLINE_REVERSED_CARDS_SEPARATOR: "\u5355\u884C\u7FFB\u8F6C\u5361\u7247\u7684\u5206\u9694\u7B26",
  MULTILINE_CARDS_SEPARATOR: "\u591A\u884C\u5361\u7247\u7684\u5206\u9694\u7B26",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "\u591A\u884C\u7FFB\u8F6C\u5361\u7247\u7684\u5206\u9694\u7B26",
  NOTES: "\u7B14\u8BB0",
  REVIEW_PANE_ON_STARTUP: "Enable note review pane on startup",
  TAGS_TO_REVIEW: "\u590D\u4E60\u6807\u7B7E",
  TAGS_TO_REVIEW_DESC: "\u8F93\u5165\u6807\u7B7E\uFF0C\u7528\u7A7A\u683C\u6216\u65B0\u5EFA\u884C\u5206\u9694\uFF0C\u4F8B\u5982\uFF1A#review #tag2 #tag3.",
  OPEN_RANDOM_NOTE: "\u590D\u4E60\u968F\u673A\u7B14\u8BB0",
  OPEN_RANDOM_NOTE_DESC: "\u5173\u95ED\u6B64\u9009\u9879\uFF0C\u7B14\u8BB0\u5C06\u4EE5\u91CD\u8981\u5EA6(PageRank)\u6392\u5E8F\u3002",
  AUTO_NEXT_NOTE: "\u590D\u4E60\u540E\u81EA\u52A8\u6253\u5F00\u4E0B\u4E00\u4E2A\u7B14\u8BB0",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "\u5173\u95ED\u6587\u4EF6\u9009\u5355\u4E2D\u7684\u590D\u4E60\u9009\u9879 \u4F8B\u5982\uFF1A\u590D\u4E60\uFF1A\u7B80\u5355 \u8BB0\u5F97 \u8F83\u96BE",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "\u5173\u95ED\u6B64\u9009\u9879\u540E\u4F60\u53EF\u4EE5\u4F7F\u7528\u5FEB\u6377\u952E\u5F00\u59CB\u590D\u4E60\u3002\u91CD\u65B0\u542F\u52A8Obsidian\u4F7F\u672C\u9009\u9879\u751F\u6548\u3002",
  MAX_N_DAYS_REVIEW_QUEUE: "\u53F3\u8FB9\u680F\u4E2D\u663E\u793A\u7684\u6700\u5927\u5929\u6570",
  MIN_ONE_DAY: "\u5929\u6570\u6700\u5C0F\u503C\u4E3A1",
  VALID_NUMBER_WARNING: "\u8BF7\u8F93\u5165\u6709\u6548\u7684\u6570\u5B57\u3002",
  UI_PREFERENCES: "\u7528\u6237\u754C\u9762\u9996\u9009\u9879",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "\u7532\u677F\u6811\u6700\u521D\u5E94\u663E\u793A\u4E3A\u5C55\u5F00",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: "\u5173\u95ED\u6B64\u9009\u9879\u53EF\u6298\u53E0\u540C\u4E00\u5F20\u5361\u7247\u4E2D\u7684\u5D4C\u5957\u724C\u7EC4\u3002\u5982\u679C\u60A8\u7684\u5361\u7247\u5C5E\u4E8E\u540C\u4E00\u6587\u4EF6\u4E2D\u7684\u8BB8\u591A\u5957\u724C\uFF0C\u5219\u5F88\u6709\u7528\u3002",
  ALGORITHM: "\u7B97\u6CD5",
  CHECK_ALGORITHM_WIKI: '\u4E86\u89E3\u66F4\u591A, \u8BF7\u70B9\u51FB <a href="${algo_url}">algorithm implementation</a>.',
  BASE_EASE: "\u57FA\u7840\u638C\u63E1\u7A0B\u5EA6",
  BASE_EASE_DESC: "\u6700\u5C0F\u503C130\uFF0C\u63A8\u8350\u503C\u7EA6250.",
  BASE_EASE_MIN_WARNING: "\u57FA\u7840\u638C\u63E1\u7A0B\u5EA6\u7684\u6700\u5C0F\u503C\u4E3A130\u3002",
  LAPSE_INTERVAL_CHANGE: "\u5C06\u590D\u4E60\u65F6\u6807\u6CE8\u4E3A\u201C\u8F83\u96BE\u201D\u7684\u5361\u7247\u6216\u7B14\u8BB0\u590D\u4E60\u95F4\u9694\u7F29\u77ED",
  LAPSE_INTERVAL_CHANGE_DESC: "\u65B0\u590D\u4E60\u95F4\u9694 = \u539F\u590D\u4E60\u95F4\u9694 * \u95F4\u9694\u6539\u53D8\u7CFB\u6570 / 100.",
  EASY_BONUS: "\u7B80\u5355\u5956\u52B1",
  EASY_BONUS_DESC: "\u7B80\u5355\u5956\u52B1\u8BBE\u5B9A\u201C\u8BB0\u5F97\u201D\u548C\u201C\u7B80\u5355\u201D\u5361\u7247\u6216\u7B14\u8BB0\u7684\u590D\u4E60\u95F4\u9694\u5DEE\u8DDD\uFF08\u6700\u5C0F\u503C100%\uFF09\u3002",
  EASY_BONUS_MIN_WARNING: "\u7B80\u5355\u5956\u52B1\u81F3\u5C11\u4E3A100\u3002",
  MAX_INTERVAL: "\u6700\u5927\u95F4\u9694",
  MAX_INTERVAL_DESC: "\u8BBE\u5B9A\u590D\u4E60\u7684\u6700\u5927\u95F4\u9694\u65F6\u95F4\uFF08\u9ED8\u8BA4\u503C100\u5E74\uFF09\u3002",
  MAX_INTERVAL_MIN_WARNING: "\u6700\u5927\u95F4\u9694\u81F3\u5C11\u4E3A1\u5929",
  MAX_LINK_CONTRIB: "\u6700\u5927\u94FE\u63A5\u6536\u76CA",
  MAX_LINK_CONTRIB_DESC: "\u7531\u539F\u638C\u63E1\u7A0B\u5EA6\u94FE\u63A5\u7684\u7B14\u8BB0\u7ED9\u4E0E\u7684\u6700\u5927\u52A0\u6743\u638C\u63E1\u5EA6\u6536\u76CA\u3002",
  LOGGING: "\u8BB0\u5F55\u4E2D",
  DISPLAY_DEBUG_INFO: "\u5728\u5F00\u53D1\u8005\u63A7\u5236\u53F0\u4E2D\u663E\u793A\u8C03\u8BD5\u4FE1\u606F\uFF1F",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "\u7B14\u8BB0\u590D\u4E60\u5E8F\u5217",
  CLOSE: "\u4E34\u8FD1",
  NEW: "\u65B0",
  YESTERDAY: "\u6628\u5929",
  TODAY: "\u4ECA\u5929",
  TOMORROW: "\u660E\u5929",
  // stats-modal.tsx
  STATS_TITLE: "\u6570\u636E",
  MONTH: "\u6708",
  QUARTER: "\u5B63",
  YEAR: "\u5E74",
  LIFETIME: "\u5168\u90E8",
  FORECAST: "\u9884\u671F",
  FORECAST_DESC: "\u5C06\u8981\u5230\u671F\u7684\u5361\u7247\u6570\u91CF",
  SCHEDULED: "\u5DF2\u6392\u671F",
  DAYS: "\u5929",
  NUMBER_OF_CARDS: "\u5361\u7247\u6570\u91CF",
  REVIEWS_PER_DAY: "\u5E73\u5747: \u590D\u4E60${avg} /\u5929",
  INTERVALS: "\u95F4\u9694",
  INTERVALS_DESC: "\u5230\u4E0B\u4E00\u6B21\u590D\u4E60\u7684\u65F6\u95F4\u95F4\u9694",
  COUNT: "\u8BA1\u6570",
  INTERVALS_SUMMARY: "\u5E73\u5747\u95F4\u9694\u65F6\u95F4: ${avg}, \u6700\u957F\u95F4\u9694\u65F6\u95F4: ${longest}",
  EASES: "Eases",
  EASES_SUMMARY: "\u5E73\u5747\u638C\u63E1\u7A0B\u5EA6: ${avgEase}",
  CARD_TYPES: "\u5361\u7247\u7C7B\u578B",
  CARD_TYPES_DESC: "\u5982\u6709\uFF0C\u5C06\u663E\u793A\u9690\u85CF\u7684\u5361\u7247",
  CARD_TYPE_NEW: "\u65B0",
  CARD_TYPE_YOUNG: "\u8F83\u65B0",
  CARD_TYPE_MATURE: "\u719F\u6089",
  CARD_TYPES_SUMMARY: "\u603B\u5361\u7247\u6570: ${totalCardsCount}"
};

// src/lang/locale/zh-tw.ts
var zh_tw_default = {
  // flashcard-modal.tsx
  DECKS: "\u724C\u7D44",
  DUE_CARDS: "\u5230\u671F\u5361\u7247",
  NEW_CARDS: "\u65B0\u5361\u7247",
  TOTAL_CARDS: "\u5168\u90E8\u5361\u7247",
  BACK: "Back",
  SKIP: "Skip",
  EDIT_CARD: "Edit Card",
  RESET_CARD_PROGRESS: "\u91CD\u7F6E\u5361\u7247",
  HARD: "\u8F03\u96E3",
  GOOD: "\u8A18\u5F97",
  EASY: "\u7C21\u55AE",
  SHOW_ANSWER: "\u986F\u793A\u7B54\u6848",
  CARD_PROGRESS_RESET: "\u5361\u7247\u5DF2\u88AB\u91CD\u7F6E\u3002",
  SAVE: "Save",
  CANCEL: "Cancel",
  NO_INPUT: "No input provided.",
  CURRENT_EASE_HELP_TEXT: "Current Ease: ",
  CURRENT_INTERVAL_HELP_TEXT: "Current Interval: ",
  CARD_GENERATED_FROM: "Generated from: ${notePath}",
  // main.ts
  OPEN_NOTE_FOR_REVIEW: "\u6253\u958B\u4E00\u500B\u7B46\u8A18\u958B\u59CB\u5FA9\u7FD2",
  REVIEW_CARDS: "\u5FA9\u7FD2\u5361\u7247",
  REVIEW_EASY_FILE_MENU: "\u5FA9\u7FD2\uFF1A\u7C21\u55AE",
  REVIEW_GOOD_FILE_MENU: "\u5FA9\u7FD2\uFF1A\u8A18\u5F97",
  REVIEW_HARD_FILE_MENU: "\u5FA9\u7FD2\uFF1A\u8F03\u96E3",
  REVIEW_NOTE_EASY_CMD: "\u6A19\u8A18\u70BA\u300C\u7C21\u55AE\u300D",
  REVIEW_NOTE_GOOD_CMD: "\u6A19\u8A18\u70BA\u300C\u8A18\u5F97\u300D",
  REVIEW_NOTE_HARD_CMD: "\u6A19\u8A18\u70BA\u300C\u8F03\u96E3\u300D",
  REVIEW_CARDS_IN_NOTE: "\u5FA9\u7FD2\u6B64\u7B46\u8A18\u4E2D\u7684\u5361\u7247",
  CRAM_CARDS_IN_NOTE: "\u4E0D\u8A08\u96E3\u6613\u5EA6\u5FA9\u7FD2\u6B64\u7B46\u8A18\u4E2D\u7684\u5361\u7247",
  REVIEW_ALL_CARDS: "\u5FA9\u7FD2\u6240\u6709\u7B46\u8A18\u4E2D\u7684\u5361\u7247",
  CRAM_ALL_CARDS: "Select a deck to cram",
  VIEW_STATS: "\u6AA2\u8996\u6578\u64DA",
  STATUS_BAR: "\u5FA9\u7FD2: ${dueNotesCount} \u7B46\u8A18, ${dueFlashcardsCount} \u5361\u7247\u5DF2\u5230\u671F",
  SYNC_TIME_TAKEN: "\u540C\u6B65\u6642\u9593 ${t}ms",
  NOTE_IN_IGNORED_FOLDER: "\u7B46\u8A18\u5132\u5B58\u5728\u5DF2\u88AB\u5FFD\u7565\u7684\u8DEF\u5F91\u4E2D\uFF08\u6AA2\u67E5\u8A2D\u5B9A\u9078\u9805\uFF09\u3002",
  PLEASE_TAG_NOTE: "\u8ACB\u5C07\u9700\u8981\u5FA9\u7FD2\u7684\u7B46\u8A18\u4E2D\u52A0\u5165\u6B63\u78BA\u7684\u6A19\u7C64\uFF08\u6AA2\u67E5\u8A2D\u5B9A\u9078\u9805\uFF09\u3002",
  RESPONSE_RECEIVED: "\u56DE\u994B\u5DF2\u6536\u5230",
  NO_DECK_EXISTS: "\u6C92\u6709 ${deckName} \u724C\u7D44",
  ALL_CAUGHT_UP: "\u90FD\u5FA9\u7FD2\u5B8C\u5566\uFF0C\u4F60\u771F\u68D2\uFF01",
  // scheduling.ts
  DAYS_STR_IVL: "${interval} \u5929",
  MONTHS_STR_IVL: "${interval} \u6708",
  YEARS_STR_IVL: "${interval} \u5E74",
  DAYS_STR_IVL_MOBILE: "${interval}\u5929",
  MONTHS_STR_IVL_MOBILE: "${interval}\u6708",
  YEARS_STR_IVL_MOBILE: "${interval}\u5E74",
  // settings.ts
  SETTINGS_HEADER: "\u9593\u9694\u91CD\u8907\u5916\u639B - \u8A2D\u5B9A",
  CHECK_WIKI: '\u77AD\u89E3\u66F4\u591A, \u8ACB\u9EDE\u9078 <a href="${wiki_url}">wiki</a>.',
  FOLDERS_TO_IGNORE: "\u5FFD\u7565\u6B64\u8CC7\u6599\u593E",
  FOLDERS_TO_IGNORE_DESC: "\u8F38\u5165\u8CC7\u6599\u593E\u8DEF\u5F91\uFF08\u7528\u63DB\u884C\u5B57\u5143\u5206\u9694\uFF09\uFF0C\u4F8B\u5982\uFF1ATemplates Meta/Scripts",
  FLASHCARDS: "\u5361\u7247",
  FLASHCARD_EASY_LABEL: "\u7C21\u55AE\u6309\u9215\u6587\u5B57",
  FLASHCARD_GOOD_LABEL: "\u8A18\u5F97\u6309\u9215\u6587\u5B57",
  FLASHCARD_HARD_LABEL: "\u8F03\u96E3\u6309\u9215\u6587\u5B57",
  FLASHCARD_EASY_DESC: "\u81EA\u8A02\u300C\u7C21\u55AE\u300D\u6309\u9215\u7684\u6A19\u7C64",
  FLASHCARD_GOOD_DESC: "\u81EA\u8A02\u300C\u8A18\u5F97\u300D\u6309\u9215\u7684\u6A19\u7C64",
  FLASHCARD_HARD_DESC: "\u81EA\u8A02\u300C\u8F03\u96E3\u300D\u6309\u9215\u7684\u6A19\u7C64",
  FLASHCARD_TAGS: "\u5361\u7247\u6A19\u7C64",
  FLASHCARD_TAGS_DESC: "\u8F38\u5165\u6A19\u7C64\uFF08\u7528\u7A7A\u767D\u6216\u63DB\u884C\u5B57\u5143\u5206\u9694\uFF09\uFF0C\u4F8B\u5982\uFF1A#flashcards #deck2 #deck3.",
  CONVERT_FOLDERS_TO_DECKS: "\u662F\u5426\u5C07\u8CC7\u6599\u593E\u5167\u5BB9\u8F49\u63DB\u70BA\u724C\u7D44\u548C\u5B50\u724C\u7D44\uFF1F",
  CONVERT_FOLDERS_TO_DECKS_DESC: "\u6B64\u9078\u9805\u70BA\u5361\u7247\u6A19\u7C64\u9078\u9805\u7684\u66FF\u4EE3\u9078\u9805\u3002",
  INLINE_SCHEDULING_COMMENTS: "\u662F\u5426\u5C07\u8A08\u5283\u91CD\u8907\u6642\u9593\u5132\u5B58\u5728\u5361\u7247\u6700\u5F8C\u4E00\u884C\u7684\u540C\u4E00\u884C\uFF1F",
  INLINE_SCHEDULING_COMMENTS_DESC: "\u52FE\u9078\u5F8CHTML\u8A3B\u89E3\u4E0D\u6703\u7834\u58DE\u5217\u8868\u683C\u5F0F\u554F\u984C\u3002",
  BURY_SIBLINGS_TILL_NEXT_DAY: "\u5C07\u53CD\u8F49\u5361\u7247\u96B1\u85CF\u81F3\u4E0B\u4E00\u5929\uFF1F",
  BURY_SIBLINGS_TILL_NEXT_DAY_DESC: "\u53CD\u8F49\u5361\u7247\u7531\u540C\u4E00\u5361\u7247\u6587\u5B57\u7522\u751F\uFF0C\u4F8B\u5982\uFF1A\u586B\u7A7A\u514B\u6F0F\u5B57",
  SHOW_CARD_CONTEXT: "\u5728\u5361\u7247\u4E2D\u986F\u793A\u4E0A\u4E0B\u6587\uFF1F",
  SHOW_CARD_CONTEXT_DESC: "\u4F8B\u5982\uFF1A\u6A19\u984C > \u526F\u6A19\u984C > \u5C0F\u6A19\u984C > ... > \u5C0F\u6A19\u984C",
  CARD_MODAL_HEIGHT_PERCENT: "\u5361\u7247\u9AD8\u5EA6\u767E\u5206\u6BD4",
  CARD_MODAL_SIZE_PERCENT_DESC: "\u5728\u79FB\u52D5\u7AEF\u6216\u9700\u8981\u8F03\u5927\u5716\u7247\u6642\u61C9\u8A2D\u5B9A\u70BA100%",
  RESET_DEFAULT: "\u91CD\u7F6E\u70BA\u9810\u8A2D\u503C",
  CARD_MODAL_WIDTH_PERCENT: "\u5361\u7247\u5BEC\u5EA6\u767E\u5206\u6BD4",
  RANDOMIZE_CARD_ORDER: "\u5FA9\u7FD2\u6642\u96A8\u6A5F\u986F\u793A\u5361\u7247\uFF1F",
  DISABLE_CLOZE_CARDS: "\u505C\u7528\u586B\u7A7A\u514B\u6F0F\u5B57\u5361\u7247\uFF1F",
  CONVERT_HIGHLIGHTS_TO_CLOZES: "\u5C07 ==\u9AD8\u4EAE== \u8F49\u63DB\u70BA\u586B\u7A7A\u514B\u6F0F\u5B57\uFF1F",
  CONVERT_BOLD_TEXT_TO_CLOZES: "\u5C07 **\u7C97\u9AD4** \u8F49\u63DB\u70BA\u586B\u7A7A\u514B\u6F0F\u5B57\uFF1F",
  CONVERT_CURLY_BRACKETS_TO_CLOZES: "\u5C07 {{\u5927\u62EC\u865F}} \u8F49\u63DB\u70BA\u586B\u7A7A\u514B\u6F0F\u5B57\uFF1F",
  INLINE_CARDS_SEPARATOR: "\u55AE\u884C\u5361\u7247\u7684\u5206\u9694\u5B57\u5143",
  FIX_SEPARATORS_MANUALLY_WARNING: "\u6CE8\u610F\uFF1A\u66F4\u6539\u6B64\u9078\u9805\u5F8C\u4F60\u5C07\u9700\u8981\u81EA\u884C\u66F4\u6539\u5DF2\u5B58\u5728\u5361\u7247\u7684\u5206\u9694\u5B57\u5143\u3002",
  INLINE_REVERSED_CARDS_SEPARATOR: "\u55AE\u884C\u53CD\u8F49\u5361\u7247\u7684\u5206\u9694\u5B57\u5143",
  MULTILINE_CARDS_SEPARATOR: "\u591A\u884C\u5361\u7247\u7684\u5206\u9694\u5B57\u5143",
  MULTILINE_REVERSED_CARDS_SEPARATOR: "\u591A\u884C\u7FFB\u8F49\u5361\u7247\u7684\u5206\u9694\u5B57\u5143",
  NOTES: "\u7B46\u8A18",
  REVIEW_PANE_ON_STARTUP: "\u555F\u52D5\u6642\u958B\u555F\u7B46\u8A18\u5FA9\u7FD2\u7A97\u683C",
  TAGS_TO_REVIEW: "\u5FA9\u7FD2\u6A19\u7C64",
  TAGS_TO_REVIEW_DESC: "\u8F38\u5165\u6A19\u7C64\uFF0C\u7528\u7A7A\u683C\u6216\u63DB\u884C\u5B57\u5143\u5206\u9694\uFF0C\u4F8B\u5982\uFF1A#review #tag2 #tag3.",
  OPEN_RANDOM_NOTE: "\u5FA9\u7FD2\u96A8\u6A5F\u7B46\u8A18",
  OPEN_RANDOM_NOTE_DESC: "\u95DC\u9589\u6B64\u9078\u9805\uFF0C\u7B46\u8A18\u5C07\u4EE5\u91CD\u8981\u5EA6(PageRank)\u6392\u5E8F\u3002",
  AUTO_NEXT_NOTE: "\u5FA9\u7FD2\u5F8C\u81EA\u52D5\u6253\u958B\u4E0B\u4E00\u500B\u7B46\u8A18",
  DISABLE_FILE_MENU_REVIEW_OPTIONS: "\u95DC\u9589\u6A94\u6848\u9078\u55AE\u4E2D\u7684\u5FA9\u7FD2\u9078\u9805 \u4F8B\u5982\uFF1A\u5FA9\u7FD2\uFF1A\u7C21\u55AE \u8A18\u5F97 \u8F03\u96E3",
  DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC: "\u95DC\u9589\u6A94\u6848\u9078\u55AE\u7684\u5FA9\u7FD2\u9078\u9805\uFF0C\u4F8B\u5982\uFF1A\u5FA9\u7FD2: \u7C21\u55AE \u8A18\u5F97 \u8F03\u96E3\u3002",
  MAX_N_DAYS_REVIEW_QUEUE: "\u53F3\u908A\u9762\u677F\u986F\u793A\u7684\u6700\u5927\u5929\u6578",
  MIN_ONE_DAY: "\u5929\u6578\u6700\u5C0F\u503C\u70BA1",
  VALID_NUMBER_WARNING: "\u8ACB\u8F38\u5165\u6709\u6548\u7684\u6578\u5B57\u3002",
  UI_PREFERENCES: "\u7528\u6236\u4ECB\u9762\u9996\u9078\u9805",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE: "\u724C\u7D44\u6A39\u6700\u521D\u61C9\u986F\u793A\u70BA\u5C55\u958B",
  INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC: "\u95DC\u9589\u6B64\u9078\u9805\u53EF\u647A\u758A\u540C\u4E00\u5F35\u5361\u7247\u4E2D\u7684\u5DE2\u72C0\u724C\u7D44\u3002\u5982\u679C\u60A8\u7684\u5361\u7247\u5C6C\u65BC\u540C\u4E00\u6A94\u6848\u4E2D\u7684\u8A31\u591A\u5957\u724C\uFF0C\u5247\u5F88\u6709\u7528\u3002",
  ALGORITHM: "\u6F14\u7B97\u6CD5",
  CHECK_ALGORITHM_WIKI: '\u77AD\u89E3\u66F4\u591A, \u8ACB\u9EDE\u9078 <a href="${algo_url}">algorithm implementation</a>.',
  BASE_EASE: "\u57FA\u790E\u638C\u63E1\u7A0B\u5EA6",
  BASE_EASE_DESC: "\u6700\u5C0F\u503C130\uFF0C\u63A8\u85A6\u503C\u7D04250.",
  BASE_EASE_MIN_WARNING: "\u57FA\u790E\u638C\u63E1\u7A0B\u5EA6\u7684\u6700\u5C0F\u503C\u70BA130\u3002",
  LAPSE_INTERVAL_CHANGE: "\u5C07\u5FA9\u7FD2\u6642\u6A19\u8A3B\u70BA\u300C\u8F03\u96E3\u300D\u7684\u5361\u7247\u6216\u7B46\u8A18\u5FA9\u7FD2\u9593\u9694\u7E2E\u77ED",
  LAPSE_INTERVAL_CHANGE_DESC: "\u65B0\u5FA9\u7FD2\u9593\u9694 = \u539F\u5FA9\u7FD2\u9593\u9694 * \u9593\u9694\u6539\u8B8A\u4FC2\u6578 / 100.",
  EASY_BONUS: "\u7C21\u55AE\u734E\u52F5",
  EASY_BONUS_DESC: "\u7C21\u55AE\u734E\u52F5\u8A2D\u5B9A\u300C\u8A18\u5F97\u300D\u548C\u300C\u7C21\u55AE\u300D\u5361\u7247\u6216\u7B46\u8A18\u7684\u5FA9\u7FD2\u9593\u9694\u5DEE\u8DDD\uFF08\u6700\u5C0F\u503C100%\uFF09\u3002",
  EASY_BONUS_MIN_WARNING: "\u7C21\u55AE\u734E\u52F5\u81F3\u5C11\u70BA100\u3002",
  MAX_INTERVAL: "\u6700\u5927\u9593\u9694",
  MAX_INTERVAL_DESC: "\u8A2D\u5B9A\u5FA9\u7FD2\u7684\u6700\u5927\u9593\u9694\u6642\u9593\uFF08\u9810\u8A2D\u503C100\u5E74\uFF09\u3002",
  MAX_INTERVAL_MIN_WARNING: "\u6700\u5927\u9593\u9694\u81F3\u5C11\u70BA1\u5929",
  MAX_LINK_CONTRIB: "\u6700\u5927\u93C8\u63A5\u8CA2\u737B",
  MAX_LINK_CONTRIB_DESC: "Maximum contribution of the weighted ease of linked notes to the initial ease.",
  LOGGING: "\u8A18\u9304\u4E2D",
  DISPLAY_DEBUG_INFO: "\u5728\u958B\u767C\u8005\u63A7\u5236\u53F0\u4E2D\u986F\u793A\u9664\u932F\u8CC7\u8A0A\uFF1F",
  // sidebar.ts
  NOTES_REVIEW_QUEUE: "\u7B46\u8A18\u5FA9\u7FD2\u5E8F\u5217",
  CLOSE: "\u81E8\u8FD1",
  NEW: "\u65B0",
  YESTERDAY: "\u6628\u5929",
  TODAY: "\u4ECA\u5929",
  TOMORROW: "\u660E\u5929",
  // stats-modal.tsx
  STATS_TITLE: "\u7D71\u8A08",
  MONTH: "\u6708",
  QUARTER: "\u5B63",
  YEAR: "\u5E74",
  LIFETIME: "\u5168\u90E8",
  FORECAST: "\u9810\u6E2C",
  FORECAST_DESC: "\u5C07\u8981\u5230\u671F\u7684\u5361\u7247\u6578\u91CF",
  SCHEDULED: "\u5DF2\u6392\u7A0B",
  DAYS: "\u5929",
  NUMBER_OF_CARDS: "\u5361\u7247\u6578\u91CF",
  REVIEWS_PER_DAY: "\u5E73\u5747: \u5FA9\u7FD2${avg} /\u5929",
  INTERVALS: "\u9593\u9694",
  INTERVALS_DESC: "\u5230\u4E0B\u4E00\u6B21\u5FA9\u7FD2\u7684\u6642\u9593\u9593\u9694",
  COUNT: "\u8A08\u6578",
  INTERVALS_SUMMARY: "\u5E73\u5747\u9593\u9694\u6642\u9593: ${avg}, \u6700\u9577\u9593\u9694\u6642\u9593: ${longest}",
  EASES: "Eases",
  EASES_SUMMARY: "\u5E73\u5747\u638C\u63E1\u7A0B\u5EA6: ${avgEase}",
  CARD_TYPES: "\u5361\u7247\u578B\u5225",
  CARD_TYPES_DESC: "\u5982\u6709\uFF0C\u5C07\u986F\u793A\u96B1\u85CF\u7684\u5361\u7247",
  CARD_TYPE_NEW: "\u65B0",
  CARD_TYPE_YOUNG: "\u8F03\u65B0",
  CARD_TYPE_MATURE: "\u719F\u6089",
  CARD_TYPES_SUMMARY: "\u7E3D\u5361\u7247\u6578: ${totalCardsCount}"
};

// src/lang/helpers.ts
var localeMap = {
  af: af_default,
  ar: ar_default,
  bn: bn_default,
  cs: cz_default,
  da: da_default,
  de: de_default,
  en: en_default,
  "en-gb": en_gb_default,
  es: es_default,
  fr: fr_default,
  hi: hi_default,
  id: id_default,
  it: it_default,
  ja: ja_default,
  ko: ko_default,
  mr: mr_default,
  nl: nl_default,
  nn: no_default,
  pl: pl_default,
  pt: pt_default,
  "pt-br": pt_br_default,
  ro: ro_default,
  ru: ru_default,
  ta: ta_default,
  te: te_default,
  th: th_default,
  tr: tr_default,
  uk: uk_default,
  ur: ur_default,
  vi: vi_default,
  "zh-cn": zh_cn_default,
  "zh-tw": zh_tw_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function interpolate(str, params) {
  const names2 = Object.keys(params);
  const vals = Object.values(params);
  return new Function(...names2, `return \`${str}\`;`)(...vals);
}
function t(str, params) {
  if (!locale) {
    console.error(`SRS error: Locale ${import_obsidian.moment.locale()} not found.`);
  }
  const result = locale && locale[str] || en_default[str];
  if (params) {
    return interpolate(result, params);
  }
  return result;
}

// src/settings.ts
var DEFAULT_SETTINGS = {
  // flashcards
  flashcardEasyText: t("EASY"),
  flashcardGoodText: t("GOOD"),
  flashcardHardText: t("HARD"),
  flashcardTags: ["#flashcards"],
  convertFoldersToDecks: false,
  cardCommentOnSameLine: false,
  burySiblingCards: false,
  showContextInCards: true,
  flashcardHeightPercentage: import_obsidian2.Platform.isMobile ? 100 : 80,
  flashcardWidthPercentage: import_obsidian2.Platform.isMobile ? 100 : 40,
  randomizeCardOrder: true,
  convertHighlightsToClozes: true,
  convertBoldTextToClozes: false,
  convertCurlyBracketsToClozes: false,
  singleLineCardSeparator: "::",
  singleLineReversedCardSeparator: ":::",
  multilineCardSeparator: "?",
  multilineReversedCardSeparator: "??",
  editLaterTag: "#edit-later",
  // notes
  enableNoteReviewPaneOnStartup: true,
  tagsToReview: ["#review"],
  noteFoldersToIgnore: [],
  openRandomNote: false,
  autoNextNote: false,
  disableFileMenuReviewOptions: false,
  maxNDaysNotesReviewQueue: 365,
  // UI settings
  initiallyExpandAllSubdecksInTree: false,
  // algorithm
  baseEase: 250,
  lapsesIntervalChange: 0.5,
  easyBonus: 1.3,
  maximumInterval: 36525,
  maxLinkFactor: 1,
  // logging
  showDebugMessages: false
};
var applyDebounceTimer = 0;
function applySettingsUpdate(callback2) {
  clearTimeout(applyDebounceTimer);
  applyDebounceTimer = window.setTimeout(callback2, 512);
}
var SRSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const header = containerEl.createEl("h1", { text: `${t("SETTINGS_HEADER")}` });
    header.addClass("sr-centered");
    containerEl.createDiv().innerHTML = t("CHECK_WIKI", {
      wiki_url: "https://www.stephenmwangi.com/obsidian-spaced-repetition/"
    });
    new import_obsidian2.Setting(containerEl).setName(t("FOLDERS_TO_IGNORE")).setDesc(t("FOLDERS_TO_IGNORE_DESC")).addTextArea(
      (text) => text.setValue(this.plugin.data.settings.noteFoldersToIgnore.join("\n")).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.noteFoldersToIgnore = value.split(/\n+/).map((v) => v.trim()).filter((v) => v);
          await this.plugin.savePluginData();
        });
      })
    );
    containerEl.createEl("h3", { text: `${t("FLASHCARDS")}` });
    new import_obsidian2.Setting(containerEl).setName(t("FLASHCARD_TAGS")).setDesc(t("FLASHCARD_TAGS_DESC")).addTextArea(
      (text) => text.setValue(this.plugin.data.settings.flashcardTags.join(" ")).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.flashcardTags = value.split(/\s+/);
          await this.plugin.savePluginData();
        });
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("CONVERT_FOLDERS_TO_DECKS")).setDesc(t("CONVERT_FOLDERS_TO_DECKS_DESC")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.convertFoldersToDecks).onChange(async (value) => {
        this.plugin.data.settings.convertFoldersToDecks = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("INLINE_SCHEDULING_COMMENTS")).setDesc(t("INLINE_SCHEDULING_COMMENTS_DESC")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.cardCommentOnSameLine).onChange(async (value) => {
        this.plugin.data.settings.cardCommentOnSameLine = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("BURY_SIBLINGS_TILL_NEXT_DAY")).setDesc(t("BURY_SIBLINGS_TILL_NEXT_DAY_DESC")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.burySiblingCards).onChange(async (value) => {
        this.plugin.data.settings.burySiblingCards = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("SHOW_CARD_CONTEXT")).setDesc(t("SHOW_CARD_CONTEXT_DESC")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.showContextInCards).onChange(async (value) => {
        this.plugin.data.settings.showContextInCards = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("CARD_MODAL_HEIGHT_PERCENT")).setDesc(t("CARD_MODAL_SIZE_PERCENT_DESC")).addSlider(
      (slider) => slider.setLimits(10, 100, 5).setValue(this.plugin.data.settings.flashcardHeightPercentage).setDynamicTooltip().onChange(async (value) => {
        this.plugin.data.settings.flashcardHeightPercentage = value;
        await this.plugin.savePluginData();
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.flashcardHeightPercentage = DEFAULT_SETTINGS.flashcardHeightPercentage;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("CARD_MODAL_WIDTH_PERCENT")).setDesc(t("CARD_MODAL_SIZE_PERCENT_DESC")).addSlider(
      (slider) => slider.setLimits(10, 100, 5).setValue(this.plugin.data.settings.flashcardWidthPercentage).setDynamicTooltip().onChange(async (value) => {
        this.plugin.data.settings.flashcardWidthPercentage = value;
        await this.plugin.savePluginData();
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.flashcardWidthPercentage = DEFAULT_SETTINGS.flashcardWidthPercentage;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("RANDOMIZE_CARD_ORDER")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.randomizeCardOrder).onChange(async (value) => {
        this.plugin.data.settings.randomizeCardOrder = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("CONVERT_HIGHLIGHTS_TO_CLOZES")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.convertHighlightsToClozes).onChange(async (value) => {
        this.plugin.data.settings.convertHighlightsToClozes = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("CONVERT_BOLD_TEXT_TO_CLOZES")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.convertBoldTextToClozes).onChange(async (value) => {
        this.plugin.data.settings.convertBoldTextToClozes = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("CONVERT_CURLY_BRACKETS_TO_CLOZES")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.convertCurlyBracketsToClozes).onChange(async (value) => {
        this.plugin.data.settings.convertCurlyBracketsToClozes = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("INLINE_CARDS_SEPARATOR")).setDesc(t("FIX_SEPARATORS_MANUALLY_WARNING")).addText(
      (text) => text.setValue(this.plugin.data.settings.singleLineCardSeparator).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.singleLineCardSeparator = value;
          await this.plugin.savePluginData();
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.singleLineCardSeparator = DEFAULT_SETTINGS.singleLineCardSeparator;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("INLINE_REVERSED_CARDS_SEPARATOR")).setDesc(t("FIX_SEPARATORS_MANUALLY_WARNING")).addText(
      (text) => text.setValue(this.plugin.data.settings.singleLineReversedCardSeparator).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.singleLineReversedCardSeparator = value;
          await this.plugin.savePluginData();
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.singleLineReversedCardSeparator = DEFAULT_SETTINGS.singleLineReversedCardSeparator;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("MULTILINE_CARDS_SEPARATOR")).setDesc(t("FIX_SEPARATORS_MANUALLY_WARNING")).addText(
      (text) => text.setValue(this.plugin.data.settings.multilineCardSeparator).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.multilineCardSeparator = value;
          await this.plugin.savePluginData();
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.multilineCardSeparator = DEFAULT_SETTINGS.multilineCardSeparator;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("MULTILINE_REVERSED_CARDS_SEPARATOR")).setDesc(t("FIX_SEPARATORS_MANUALLY_WARNING")).addText(
      (text) => text.setValue(this.plugin.data.settings.multilineReversedCardSeparator).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.multilineReversedCardSeparator = value;
          await this.plugin.savePluginData();
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.multilineReversedCardSeparator = DEFAULT_SETTINGS.multilineReversedCardSeparator;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("FLASHCARD_EASY_LABEL")).setDesc(t("FLASHCARD_EASY_DESC")).addText(
      (text) => text.setValue(this.plugin.data.settings.flashcardEasyText).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.flashcardEasyText = value;
          await this.plugin.savePluginData();
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.flashcardEasyText = DEFAULT_SETTINGS.flashcardEasyText;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("FLASHCARD_GOOD_LABEL")).setDesc(t("FLASHCARD_GOOD_DESC")).addText(
      (text) => text.setValue(this.plugin.data.settings.flashcardGoodText).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.flashcardGoodText = value;
          await this.plugin.savePluginData();
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.flashcardGoodText = DEFAULT_SETTINGS.flashcardGoodText;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("FLASHCARD_HARD_LABEL")).setDesc(t("FLASHCARD_HARD_DESC")).addText(
      (text) => text.setValue(this.plugin.data.settings.flashcardHardText).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.flashcardHardText = value;
          await this.plugin.savePluginData();
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.flashcardHardText = DEFAULT_SETTINGS.flashcardHardText;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    containerEl.createEl("h3", { text: `${t("NOTES")}` });
    new import_obsidian2.Setting(containerEl).setName(t("REVIEW_PANE_ON_STARTUP")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.enableNoteReviewPaneOnStartup).onChange(async (value) => {
        this.plugin.data.settings.enableNoteReviewPaneOnStartup = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("TAGS_TO_REVIEW")).setDesc(t("TAGS_TO_REVIEW_DESC")).addTextArea(
      (text) => text.setValue(this.plugin.data.settings.tagsToReview.join(" ")).onChange((value) => {
        applySettingsUpdate(async () => {
          this.plugin.data.settings.tagsToReview = value.split(/\s+/);
          await this.plugin.savePluginData();
        });
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("OPEN_RANDOM_NOTE")).setDesc(t("OPEN_RANDOM_NOTE_DESC")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.openRandomNote).onChange(async (value) => {
        this.plugin.data.settings.openRandomNote = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("AUTO_NEXT_NOTE")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.autoNextNote).onChange(async (value) => {
        this.plugin.data.settings.autoNextNote = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("DISABLE_FILE_MENU_REVIEW_OPTIONS")).setDesc(t("DISABLE_FILE_MENU_REVIEW_OPTIONS_DESC")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.disableFileMenuReviewOptions).onChange(async (value) => {
        this.plugin.data.settings.disableFileMenuReviewOptions = value;
        await this.plugin.savePluginData();
      })
    );
    new import_obsidian2.Setting(containerEl).setName(t("MAX_N_DAYS_REVIEW_QUEUE")).addText(
      (text) => text.setValue(this.plugin.data.settings.maxNDaysNotesReviewQueue.toString()).onChange((value) => {
        applySettingsUpdate(async () => {
          const numValue = Number.parseInt(value);
          if (!isNaN(numValue)) {
            if (numValue < 1) {
              new import_obsidian2.Notice(t("MIN_ONE_DAY"));
              text.setValue(
                this.plugin.data.settings.maxNDaysNotesReviewQueue.toString()
              );
              return;
            }
            this.plugin.data.settings.maxNDaysNotesReviewQueue = numValue;
            await this.plugin.savePluginData();
          } else {
            new import_obsidian2.Notice(t("VALID_NUMBER_WARNING"));
          }
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.maxNDaysNotesReviewQueue = DEFAULT_SETTINGS.maxNDaysNotesReviewQueue;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    containerEl.createEl("h3", { text: `${t("UI_PREFERENCES")}` });
    new import_obsidian2.Setting(containerEl).setName(t("INITIALLY_EXPAND_SUBDECKS_IN_TREE")).setDesc(t("INITIALLY_EXPAND_SUBDECKS_IN_TREE_DESC")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.initiallyExpandAllSubdecksInTree).onChange(async (value) => {
        this.plugin.data.settings.initiallyExpandAllSubdecksInTree = value;
        await this.plugin.savePluginData();
      })
    );
    containerEl.createEl("h3", { text: `${t("ALGORITHM")}` });
    containerEl.createDiv().innerHTML = t("CHECK_ALGORITHM_WIKI", {
      algo_url: "https://www.stephenmwangi.com/obsidian-spaced-repetition/algorithms/"
    });
    new import_obsidian2.Setting(containerEl).setName(t("BASE_EASE")).setDesc(t("BASE_EASE_DESC")).addText(
      (text) => text.setValue(this.plugin.data.settings.baseEase.toString()).onChange((value) => {
        applySettingsUpdate(async () => {
          const numValue = Number.parseInt(value);
          if (!isNaN(numValue)) {
            if (numValue < 130) {
              new import_obsidian2.Notice(t("BASE_EASE_MIN_WARNING"));
              text.setValue(this.plugin.data.settings.baseEase.toString());
              return;
            }
            this.plugin.data.settings.baseEase = numValue;
            await this.plugin.savePluginData();
          } else {
            new import_obsidian2.Notice(t("VALID_NUMBER_WARNING"));
          }
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.baseEase = DEFAULT_SETTINGS.baseEase;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("LAPSE_INTERVAL_CHANGE")).setDesc(t("LAPSE_INTERVAL_CHANGE_DESC")).addSlider(
      (slider) => slider.setLimits(1, 99, 1).setValue(this.plugin.data.settings.lapsesIntervalChange * 100).setDynamicTooltip().onChange(async (value) => {
        this.plugin.data.settings.lapsesIntervalChange = value / 100;
        await this.plugin.savePluginData();
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.lapsesIntervalChange = DEFAULT_SETTINGS.lapsesIntervalChange;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("EASY_BONUS")).setDesc(t("EASY_BONUS_DESC")).addText(
      (text) => text.setValue((this.plugin.data.settings.easyBonus * 100).toString()).onChange((value) => {
        applySettingsUpdate(async () => {
          const numValue = Number.parseInt(value) / 100;
          if (!isNaN(numValue)) {
            if (numValue < 1) {
              new import_obsidian2.Notice(t("EASY_BONUS_MIN_WARNING"));
              text.setValue(
                (this.plugin.data.settings.easyBonus * 100).toString()
              );
              return;
            }
            this.plugin.data.settings.easyBonus = numValue;
            await this.plugin.savePluginData();
          } else {
            new import_obsidian2.Notice(t("VALID_NUMBER_WARNING"));
          }
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.easyBonus = DEFAULT_SETTINGS.easyBonus;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("MAX_INTERVAL")).setDesc(t("MAX_INTERVAL_DESC")).addText(
      (text) => text.setValue(this.plugin.data.settings.maximumInterval.toString()).onChange((value) => {
        applySettingsUpdate(async () => {
          const numValue = Number.parseInt(value);
          if (!isNaN(numValue)) {
            if (numValue < 1) {
              new import_obsidian2.Notice(t("MAX_INTERVAL_MIN_WARNING"));
              text.setValue(
                this.plugin.data.settings.maximumInterval.toString()
              );
              return;
            }
            this.plugin.data.settings.maximumInterval = numValue;
            await this.plugin.savePluginData();
          } else {
            new import_obsidian2.Notice(t("VALID_NUMBER_WARNING"));
          }
        });
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.maximumInterval = DEFAULT_SETTINGS.maximumInterval;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("MAX_LINK_CONTRIB")).setDesc(t("MAX_LINK_CONTRIB_DESC")).addSlider(
      (slider) => slider.setLimits(0, 100, 1).setValue(this.plugin.data.settings.maxLinkFactor * 100).setDynamicTooltip().onChange(async (value) => {
        this.plugin.data.settings.maxLinkFactor = value / 100;
        await this.plugin.savePluginData();
      })
    ).addExtraButton((button) => {
      button.setIcon("reset").setTooltip(t("RESET_DEFAULT")).onClick(async () => {
        this.plugin.data.settings.maxLinkFactor = DEFAULT_SETTINGS.maxLinkFactor;
        await this.plugin.savePluginData();
        this.display();
      });
    });
    containerEl.createEl("h3", { text: `${t("LOGGING")}` });
    new import_obsidian2.Setting(containerEl).setName(t("DISPLAY_DEBUG_INFO")).addToggle(
      (toggle) => toggle.setValue(this.plugin.data.settings.showDebugMessages).onChange(async (value) => {
        this.plugin.data.settings.showDebugMessages = value;
        await this.plugin.savePluginData();
      })
    );
  }
};

// src/flashcard-modal.tsx
var import_obsidian3 = require("obsidian");
var import_vhtml = __toESM(require_vhtml());

// src/scheduling.ts
function schedule(response, interval, ease, delayBeforeReview, settingsObj, dueDates) {
  delayBeforeReview = Math.max(0, Math.floor(delayBeforeReview / (24 * 3600 * 1e3)));
  if (response === 0 /* Easy */) {
    ease += 20;
    interval = (interval + delayBeforeReview) * ease / 100;
    interval *= settingsObj.easyBonus;
  } else if (response === 1 /* Good */) {
    interval = (interval + delayBeforeReview / 2) * ease / 100;
  } else if (response === 2 /* Hard */) {
    ease = Math.max(130, ease - 20);
    interval = Math.max(
      1,
      (interval + delayBeforeReview / 4) * settingsObj.lapsesIntervalChange
    );
  }
  if (dueDates !== void 0) {
    interval = Math.round(interval);
    if (!Object.prototype.hasOwnProperty.call(dueDates, interval)) {
      dueDates[interval] = 0;
    } else {
      if (interval > 4) {
        let fuzz = 0;
        if (interval < 7)
          fuzz = 1;
        else if (interval < 30)
          fuzz = Math.max(2, Math.floor(interval * 0.15));
        else
          fuzz = Math.max(4, Math.floor(interval * 0.05));
        const originalInterval = interval;
        outer:
          for (let i = 1; i <= fuzz; i++) {
            for (const ivl of [originalInterval - i, originalInterval + i]) {
              if (!Object.prototype.hasOwnProperty.call(dueDates, ivl)) {
                dueDates[ivl] = 0;
                interval = ivl;
                break outer;
              }
              if (dueDates[ivl] < dueDates[interval])
                interval = ivl;
            }
          }
      }
    }
    dueDates[interval]++;
  }
  interval = Math.min(interval, settingsObj.maximumInterval);
  return { interval: Math.round(interval * 10) / 10, ease };
}
function textInterval(interval, isMobile) {
  if (interval === void 0) {
    return t("NEW");
  }
  const m = Math.round(interval / 3.04375) / 10, y = Math.round(interval / 36.525) / 10;
  if (isMobile) {
    if (m < 1)
      return t("DAYS_STR_IVL_MOBILE", { interval });
    else if (y < 1)
      return t("MONTHS_STR_IVL_MOBILE", { interval: m });
    else
      return t("YEARS_STR_IVL_MOBILE", { interval: y });
  } else {
    if (m < 1)
      return t("DAYS_STR_IVL", { interval });
    else if (y < 1)
      return t("MONTHS_STR_IVL", { interval: m });
    else
      return t("YEARS_STR_IVL", { interval: y });
  }
}

// src/constants.ts
var SCHEDULING_INFO_REGEX = /^---\n((?:.*\n)*)sr-due: (.+)\nsr-interval: (\d+)\nsr-ease: (\d+)\n((?:.*\n)?)---/;
var YAML_FRONT_MATTER_REGEX = /^---\n((?:.*\n)*?)---/;
var MULTI_SCHEDULING_EXTRACTOR = /!([\d-]+),(\d+),(\d+)/gm;
var LEGACY_SCHEDULING_EXTRACTOR = /<!--SR:([\d-]+),(\d+),(\d+)-->/gm;
var IMAGE_FORMATS = [
  "jpg",
  "jpeg",
  "gif",
  "png",
  "svg",
  "webp",
  "apng",
  "avif",
  "jfif",
  "pjpeg",
  "pjp",
  "bmp"
];
var AUDIO_FORMATS = ["mp3", "webm", "m4a", "wav", "ogg"];
var VIDEO_FORMATS = ["mp4", "mkv", "avi", "mov"];
var COLLAPSE_ICON = '<svg viewBox="0 0 100 100" width="8" height="8" class="right-triangle"><path fill="currentColor" stroke="currentColor" d="M94.9,20.8c-1.4-2.5-4.1-4.1-7.1-4.1H12.2c-3,0-5.7,1.6-7.1,4.1c-1.3,2.4-1.2,5.2,0.2,7.6L43.1,88c1.5,2.3,4,3.7,6.9,3.7 s5.4-1.4,6.9-3.7l37.8-59.6C96.1,26,96.2,23.2,94.9,20.8L94.9,20.8z"></path></svg>';

// src/utils.ts
function getTypedObjectEntries(obj) {
  return Object.entries(obj);
}
var getKeysPreserveType = Object.keys;
var escapeRegexString = (text) => text.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
function cyrb53(str, seed = 0) {
  let h12 = 3735928559 ^ seed, h22 = 1103547991 ^ seed;
  for (let i = 0, ch; i < str.length; i++) {
    ch = str.charCodeAt(i);
    h12 = Math.imul(h12 ^ ch, 2654435761);
    h22 = Math.imul(h22 ^ ch, 1597334677);
  }
  h12 = Math.imul(h12 ^ h12 >>> 16, 2246822507) ^ Math.imul(h22 ^ h22 >>> 13, 3266489909);
  h22 = Math.imul(h22 ^ h22 >>> 16, 2246822507) ^ Math.imul(h12 ^ h12 >>> 13, 3266489909);
  return (4294967296 * (2097151 & h22) + (h12 >>> 0)).toString(16);
}

// src/flashcard-modal.tsx
var FlashcardEditModal = class extends import_obsidian3.Modal {
  constructor(app2, plugin, existingText) {
    super(app2);
    this.didSubmit = false;
    this.submitClickCallback = (_) => this.submit();
    this.cancelClickCallback = (_) => this.cancel();
    this.submitEnterCallback = (evt) => {
      if ((evt.ctrlKey || evt.metaKey) && evt.key === "Enter") {
        evt.preventDefault();
        this.submit();
      }
    };
    this.plugin = plugin;
    this.titleEl.setText(t("EDIT_CARD"));
    this.titleEl.addClass("sr-centered");
    this.modalText = existingText;
    this.waitForClose = new Promise((resolve2, reject) => {
      this.resolvePromise = resolve2;
      this.rejectPromise = reject;
    });
    this.display();
    this.open();
  }
  static Prompt(app2, plugin, placeholder) {
    const newPromptModal = new FlashcardEditModal(app2, plugin, placeholder);
    return newPromptModal.waitForClose;
  }
  display() {
    this.contentEl.empty();
    this.modalEl.addClass("sr-flashcard-input-modal");
    const mainContentContainer = this.contentEl.createDiv();
    mainContentContainer.addClass("sr-flashcard-input-area");
    this.inputComponent = this.createInputField(mainContentContainer, this.modalText);
    this.createButtonBar(mainContentContainer);
  }
  createButton(container, text, callback2) {
    const btn = new import_obsidian3.ButtonComponent(container);
    btn.setButtonText(text).onClick(callback2);
    return btn;
  }
  createButtonBar(mainContentContainer) {
    const buttonBarContainer = mainContentContainer.createDiv();
    buttonBarContainer.addClass("sr-flashcard-edit-button-bar");
    this.createButton(
      buttonBarContainer,
      t("SAVE"),
      this.submitClickCallback
    ).setCta().buttonEl.style.marginRight = "0";
    this.createButton(buttonBarContainer, t("CANCEL"), this.cancelClickCallback);
  }
  createInputField(container, value) {
    const textComponent = new import_obsidian3.TextAreaComponent(container);
    textComponent.inputEl.style.width = "100%";
    textComponent.setValue(value != null ? value : "").onChange((value2) => this.input = value2).inputEl.addEventListener("keydown", this.submitEnterCallback);
    return textComponent;
  }
  submit() {
    this.didSubmit = true;
    this.close();
  }
  cancel() {
    this.close();
  }
  onOpen() {
    super.onOpen();
    this.inputComponent.inputEl.focus();
  }
  onClose() {
    super.onClose();
    this.resolveInput();
    this.removeInputListener();
  }
  resolveInput() {
    if (!this.didSubmit)
      this.rejectPromise(t("NO_INPUT"));
    else
      this.resolvePromise(this.input);
  }
  removeInputListener() {
    this.inputComponent.inputEl.removeEventListener("keydown", this.submitEnterCallback);
  }
};
var FlashcardModal = class extends import_obsidian3.Modal {
  constructor(app2, plugin, ignoreStats = false) {
    super(app2);
    this.plugin = plugin;
    this.ignoreStats = ignoreStats;
    this.titleEl.setText(t("DECKS"));
    this.titleEl.addClass("sr-centered");
    if (import_obsidian3.Platform.isMobile) {
      this.contentEl.style.display = "block";
    }
    this.modalEl.style.height = this.plugin.data.settings.flashcardHeightPercentage + "%";
    this.modalEl.style.width = this.plugin.data.settings.flashcardWidthPercentage + "%";
    this.contentEl.style.position = "relative";
    this.contentEl.style.height = "92%";
    this.contentEl.addClass("sr-modal-content");
    document.body.onkeydown = (e) => {
      if (document.activeElement.nodeName != "TEXTAREA" && this.mode !== 0 /* DecksList */) {
        if (this.mode !== 3 /* Closed */ && e.code === "KeyS") {
          this.skipCurrentCard();
        } else if (this.mode === 1 /* Front */ && (e.code === "Space" || e.code === "Enter")) {
          this.showAnswer();
        } else if (this.mode === 2 /* Back */) {
          if (e.code === "Numpad1" || e.code === "Digit1") {
            this.processReview(2 /* Hard */);
          } else if (e.code === "Numpad2" || e.code === "Digit2" || e.code === "Space") {
            this.processReview(1 /* Good */);
          } else if (e.code === "Numpad3" || e.code === "Digit3") {
            this.processReview(0 /* Easy */);
          } else if (e.code === "Numpad0" || e.code === "Digit0") {
            this.processReview(3 /* Reset */);
          }
        }
      }
    };
  }
  onOpen() {
    this.decksList();
  }
  onClose() {
    this.mode = 3 /* Closed */;
  }
  decksList() {
    const aimDeck = this.plugin.deckTree.subdecks.filter(
      (deck) => deck.deckName === this.plugin.data.historyDeck
    );
    if (this.plugin.data.historyDeck && aimDeck.length > 0) {
      const deck = aimDeck[0];
      this.currentDeck = deck;
      this.checkDeck = deck.parent;
      this.setupCardsView();
      deck.nextCard(this);
      return;
    }
    this.mode = 0 /* DecksList */;
    this.titleEl.setText(t("DECKS"));
    this.titleEl.innerHTML += /* @__PURE__ */ (0, import_vhtml.default)("p", { style: "margin:0px;line-height:12px;" }, /* @__PURE__ */ (0, import_vhtml.default)(
      "span",
      {
        style: "background-color:#4caf50;color:#ffffff;",
        "aria-label": t("DUE_CARDS"),
        class: "tag-pane-tag-count tree-item-flair sr-deck-counts"
      },
      this.plugin.deckTree.dueFlashcardsCount.toString()
    ), /* @__PURE__ */ (0, import_vhtml.default)(
      "span",
      {
        style: "background-color:#2196f3;",
        "aria-label": t("NEW_CARDS"),
        class: "tag-pane-tag-count tree-item-flair sr-deck-counts"
      },
      this.plugin.deckTree.newFlashcardsCount.toString()
    ), /* @__PURE__ */ (0, import_vhtml.default)(
      "span",
      {
        style: "background-color:#ff7043;",
        "aria-label": t("TOTAL_CARDS"),
        class: "tag-pane-tag-count tree-item-flair sr-deck-counts"
      },
      this.plugin.deckTree.totalFlashcards.toString()
    ));
    this.contentEl.empty();
    this.contentEl.setAttribute("id", "sr-flashcard-view");
    for (const deck of this.plugin.deckTree.subdecks) {
      deck.render(this.contentEl, this);
    }
  }
  setupCardsView() {
    this.contentEl.empty();
    const flashCardMenu = this.contentEl.createDiv("sr-flashcard-menu");
    const backButton = flashCardMenu.createEl("button");
    backButton.addClass("sr-flashcard-menu-item");
    (0, import_obsidian3.setIcon)(backButton, "arrow-left");
    backButton.setAttribute("aria-label", t("BACK"));
    backButton.addEventListener("click", () => {
      this.plugin.data.historyDeck = "";
      this.decksList();
    });
    this.editButton = flashCardMenu.createEl("button");
    this.editButton.addClass("sr-flashcard-menu-item");
    (0, import_obsidian3.setIcon)(this.editButton, "edit");
    this.editButton.setAttribute("aria-label", t("EDIT_CARD"));
    this.editButton.addEventListener("click", async () => {
      const textPromptArr = this.currentCard.cardText.split("\n");
      let textPrompt = "";
      if (textPromptArr[textPromptArr.length - 1].startsWith("<!--SR:")) {
        textPrompt = textPromptArr.slice(0, -1).join("\n");
      } else {
        textPrompt = this.currentCard.cardText;
      }
      const editModal = FlashcardEditModal.Prompt(this.app, this.plugin, textPrompt);
      editModal.then(async (modifiedCardText) => {
        this.modifyCardText(textPrompt, modifiedCardText);
      }).catch((reason) => console.log(reason));
    });
    this.resetButton = flashCardMenu.createEl("button");
    this.resetButton.addClass("sr-flashcard-menu-item");
    (0, import_obsidian3.setIcon)(this.resetButton, "refresh-cw");
    this.resetButton.setAttribute("aria-label", t("RESET_CARD_PROGRESS"));
    this.resetButton.addEventListener("click", () => {
      this.processReview(3 /* Reset */);
    });
    const cardInfo = flashCardMenu.createEl("button");
    cardInfo.addClass("sr-flashcard-menu-item");
    (0, import_obsidian3.setIcon)(cardInfo, "info");
    cardInfo.setAttribute("aria-label", "View Card Info");
    cardInfo.addEventListener("click", async () => {
      var _a;
      const currentEaseStr = t("CURRENT_EASE_HELP_TEXT") + ((_a = this.currentCard.ease) != null ? _a : t("NEW"));
      const currentIntervalStr = t("CURRENT_INTERVAL_HELP_TEXT") + textInterval(this.currentCard.interval, false);
      const generatedFromStr = t("CARD_GENERATED_FROM", {
        notePath: this.currentCard.note.path
      });
      new import_obsidian3.Notice(currentEaseStr + "\n" + currentIntervalStr + "\n" + generatedFromStr);
    });
    const skipButton = flashCardMenu.createEl("button");
    skipButton.addClass("sr-flashcard-menu-item");
    (0, import_obsidian3.setIcon)(skipButton, "chevrons-right");
    skipButton.setAttribute("aria-label", t("SKIP"));
    skipButton.addEventListener("click", () => {
      this.skipCurrentCard();
    });
    if (this.plugin.data.settings.showContextInCards) {
      this.contextView = this.contentEl.createDiv();
      this.contextView.setAttribute("id", "sr-context");
    }
    this.flashcardView = this.contentEl.createDiv("div");
    this.flashcardView.setAttribute("id", "sr-flashcard-view");
    this.responseDiv = this.contentEl.createDiv("sr-flashcard-response");
    this.hardBtn = document.createElement("button");
    this.hardBtn.setAttribute("id", "sr-hard-btn");
    this.hardBtn.setText(this.plugin.data.settings.flashcardHardText);
    this.hardBtn.addEventListener("click", () => {
      this.processReview(2 /* Hard */);
    });
    this.responseDiv.appendChild(this.hardBtn);
    this.goodBtn = document.createElement("button");
    this.goodBtn.setAttribute("id", "sr-good-btn");
    this.goodBtn.setText(this.plugin.data.settings.flashcardGoodText);
    this.goodBtn.addEventListener("click", () => {
      this.processReview(1 /* Good */);
    });
    this.responseDiv.appendChild(this.goodBtn);
    this.easyBtn = document.createElement("button");
    this.easyBtn.setAttribute("id", "sr-easy-btn");
    this.easyBtn.setText(this.plugin.data.settings.flashcardEasyText);
    this.easyBtn.addEventListener("click", () => {
      this.processReview(0 /* Easy */);
    });
    this.responseDiv.appendChild(this.easyBtn);
    this.responseDiv.style.display = "none";
    this.answerBtn = this.contentEl.createDiv();
    this.answerBtn.setAttribute("id", "sr-show-answer");
    this.answerBtn.setText(t("SHOW_ANSWER"));
    this.answerBtn.addEventListener("click", () => {
      this.showAnswer();
    });
    if (this.ignoreStats) {
      this.goodBtn.style.display = "none";
      this.responseDiv.addClass("sr-ignorestats-response");
      this.easyBtn.addClass("sr-ignorestats-btn");
      this.hardBtn.addClass("sr-ignorestats-btn");
    }
  }
  async modifyCardText(originalText, replacementText) {
    if (!replacementText)
      return;
    if (replacementText == originalText)
      return;
    let fileText = await this.app.vault.read(this.currentCard.note);
    const originalTextRegex = new RegExp(escapeRegexString(originalText), "gm");
    fileText = fileText.replace(originalTextRegex, replacementText);
    await this.app.vault.modify(this.currentCard.note, fileText);
    this.currentDeck.deleteFlashcardAtIndex(this.currentCardIdx, this.currentCard.isDue);
    this.burySiblingCards(false);
    this.currentDeck.nextCard(this);
  }
  showAnswer() {
    this.mode = 2 /* Back */;
    this.answerBtn.style.display = "none";
    this.responseDiv.style.display = "grid";
    if (this.currentCard.isDue) {
      this.resetButton.disabled = false;
    }
    if (this.currentCard.cardType !== 4 /* Cloze */) {
      const hr = document.createElement("hr");
      hr.setAttribute("id", "sr-hr-card-divide");
      this.flashcardView.appendChild(hr);
    } else {
      this.flashcardView.empty();
    }
    this.renderMarkdownWrapper(this.currentCard.back, this.flashcardView);
  }
  async processReview(response) {
    if (this.ignoreStats) {
      if (response == 0 /* Easy */) {
        this.currentDeck.deleteFlashcardAtIndex(
          this.currentCardIdx,
          this.currentCard.isDue
        );
      }
      this.currentDeck.nextCard(this);
      return;
    }
    let interval, ease, due;
    this.currentDeck.deleteFlashcardAtIndex(this.currentCardIdx, this.currentCard.isDue);
    if (response !== 3 /* Reset */) {
      let schedObj;
      if (this.currentCard.isDue) {
        schedObj = schedule(
          response,
          this.currentCard.interval,
          this.currentCard.ease,
          this.currentCard.delayBeforeReview,
          this.plugin.data.settings,
          this.plugin.dueDatesFlashcards
        );
      } else {
        let initial_ease = this.plugin.data.settings.baseEase;
        if (Object.prototype.hasOwnProperty.call(
          this.plugin.easeByPath,
          this.currentCard.note.path
        )) {
          initial_ease = Math.round(this.plugin.easeByPath[this.currentCard.note.path]);
        }
        schedObj = schedule(
          response,
          1,
          initial_ease,
          0,
          this.plugin.data.settings,
          this.plugin.dueDatesFlashcards
        );
        interval = schedObj.interval;
        ease = schedObj.ease;
      }
      interval = schedObj.interval;
      ease = schedObj.ease;
      due = window.moment(Date.now() + interval * 24 * 3600 * 1e3);
    } else {
      this.currentCard.interval = 1;
      this.currentCard.ease = this.plugin.data.settings.baseEase;
      if (this.currentCard.isDue) {
        this.currentDeck.dueFlashcards.push(this.currentCard);
      } else {
        this.currentDeck.newFlashcards.push(this.currentCard);
      }
      due = window.moment(Date.now());
      new import_obsidian3.Notice(t("CARD_PROGRESS_RESET"));
      this.currentDeck.nextCard(this);
      return;
    }
    const dueString = due.format("YYYY-MM-DD");
    let fileText = await this.app.vault.read(this.currentCard.note);
    const replacementRegex = new RegExp(escapeRegexString(this.currentCard.cardText), "gm");
    let sep = this.plugin.data.settings.cardCommentOnSameLine ? " " : "\n";
    if (this.currentCard.cardText.endsWith("```") && sep !== "\n") {
      sep = "\n";
    }
    if (this.currentCard.cardText.lastIndexOf("<!--SR:") === -1) {
      this.currentCard.cardText = this.currentCard.cardText + sep + `<!--SR:!${dueString},${interval},${ease}-->`;
    } else {
      let scheduling = [
        ...this.currentCard.cardText.matchAll(MULTI_SCHEDULING_EXTRACTOR)
      ];
      if (scheduling.length === 0) {
        scheduling = [...this.currentCard.cardText.matchAll(LEGACY_SCHEDULING_EXTRACTOR)];
      }
      const currCardSched = ["0", dueString, interval.toString(), ease.toString()];
      if (this.currentCard.isDue) {
        scheduling[this.currentCard.siblingIdx] = currCardSched;
      } else {
        scheduling.push(currCardSched);
      }
      this.currentCard.cardText = this.currentCard.cardText.replace(/<!--SR:.+-->/gm, "");
      this.currentCard.cardText += "<!--SR:";
      for (let i = 0; i < scheduling.length; i++) {
        this.currentCard.cardText += `!${scheduling[i][1]},${scheduling[i][2]},${scheduling[i][3]}`;
      }
      this.currentCard.cardText += "-->";
    }
    fileText = fileText.replace(replacementRegex, () => this.currentCard.cardText);
    for (const sibling of this.currentCard.siblings) {
      sibling.cardText = this.currentCard.cardText;
    }
    if (this.plugin.data.settings.burySiblingCards) {
      this.burySiblingCards(true);
    }
    await this.app.vault.modify(this.currentCard.note, fileText);
    this.currentDeck.nextCard(this);
  }
  async burySiblingCards(tillNextDay) {
    if (tillNextDay) {
      this.plugin.data.buryList.push(cyrb53(this.currentCard.cardText));
      await this.plugin.savePluginData();
    }
    for (const sibling of this.currentCard.siblings) {
      const dueIdx = this.currentDeck.dueFlashcards.indexOf(sibling);
      const newIdx = this.currentDeck.newFlashcards.indexOf(sibling);
      if (dueIdx !== -1) {
        this.currentDeck.deleteFlashcardAtIndex(
          dueIdx,
          this.currentDeck.dueFlashcards[dueIdx].isDue
        );
      } else if (newIdx !== -1) {
        this.currentDeck.deleteFlashcardAtIndex(
          newIdx,
          this.currentDeck.newFlashcards[newIdx].isDue
        );
      }
    }
  }
  skipCurrentCard() {
    this.currentDeck.deleteFlashcardAtIndex(this.currentCardIdx, this.currentCard.isDue);
    this.burySiblingCards(false);
    this.currentDeck.nextCard(this);
  }
  // slightly modified version of the renderMarkdown function in
  // https://github.com/mgmeyers/obsidian-kanban/blob/main/src/KanbanView.tsx
  async renderMarkdownWrapper(markdownString, containerEl, recursiveDepth = 0) {
    if (recursiveDepth > 4)
      return;
    import_obsidian3.MarkdownRenderer.renderMarkdown(
      markdownString,
      containerEl,
      this.currentCard.note.path,
      this.plugin
    );
    containerEl.findAll(".internal-embed").forEach((el) => {
      const link2 = this.parseLink(el.getAttribute("src"));
      if (!link2.target) {
        el.innerText = link2.text;
      } else if (link2.target instanceof import_obsidian3.TFile) {
        if (link2.target.extension !== "md") {
          this.embedMediaFile(el, link2.target);
        } else {
          el.innerText = "";
          this.renderTransclude(el, link2, recursiveDepth);
        }
      }
    });
  }
  parseLink(src) {
    const linkComponentsRegex = /^(?<file>[^#^]+)?(?:#(?!\^)(?<heading>.+)|#\^(?<blockId>.+)|#)?$/;
    const matched = typeof src === "string" && src.match(linkComponentsRegex);
    const file = matched.groups.file || this.currentCard.note.path;
    const target = this.plugin.app.metadataCache.getFirstLinkpathDest(
      file,
      this.currentCard.note.path
    );
    return {
      text: matched[0],
      file: matched.groups.file,
      heading: matched.groups.heading,
      blockId: matched.groups.blockId,
      target
    };
  }
  embedMediaFile(el, target) {
    el.innerText = "";
    if (IMAGE_FORMATS.includes(target.extension)) {
      el.createEl(
        "img",
        {
          attr: {
            src: this.plugin.app.vault.getResourcePath(target)
          }
        },
        (img) => {
          if (el.hasAttribute("width"))
            img.setAttribute("width", el.getAttribute("width"));
          else
            img.setAttribute("width", "100%");
          if (el.hasAttribute("alt"))
            img.setAttribute("alt", el.getAttribute("alt"));
          el.addEventListener(
            "click",
            (ev) => ev.target.style.minWidth = ev.target.style.minWidth === "100%" ? null : "100%"
          );
        }
      );
      el.addClasses(["image-embed", "is-loaded"]);
    } else if (AUDIO_FORMATS.includes(target.extension) || VIDEO_FORMATS.includes(target.extension)) {
      el.createEl(
        AUDIO_FORMATS.includes(target.extension) ? "audio" : "video",
        {
          attr: {
            controls: "",
            src: this.plugin.app.vault.getResourcePath(target)
          }
        },
        (audio) => {
          if (el.hasAttribute("alt"))
            audio.setAttribute("alt", el.getAttribute("alt"));
        }
      );
      el.addClasses(["media-embed", "is-loaded"]);
    } else {
      el.innerText = target.path;
    }
  }
  async renderTransclude(el, link2, recursiveDepth) {
    var _a, _b, _c, _d;
    const cache = this.app.metadataCache.getCache(link2.target.path);
    const text = await this.app.vault.cachedRead(link2.target);
    let blockText;
    if (link2.heading) {
      const clean = (s) => s.replace(/[\W\s]/g, "");
      const headingIndex = (_a = cache.headings) == null ? void 0 : _a.findIndex(
        (h4) => clean(h4.heading) === clean(link2.heading)
      );
      const heading = cache.headings[headingIndex];
      const startAt = heading.position.start.offset;
      const endAt = ((_d = (_c = (_b = cache.headings.slice(headingIndex + 1).find((h4) => h4.level <= heading.level)) == null ? void 0 : _b.position) == null ? void 0 : _c.start) == null ? void 0 : _d.offset) || text.length;
      blockText = text.substring(startAt, endAt);
    } else if (link2.blockId) {
      const block = cache.blocks[link2.blockId];
      const startAt = block.position.start.offset;
      const endAt = block.position.end.offset;
      blockText = text.substring(startAt, endAt);
    } else {
      blockText = text;
    }
    this.renderMarkdownWrapper(blockText, el, recursiveDepth + 1);
  }
};
var Deck = class {
  constructor(deckName, parent) {
    this.newFlashcardsCount = 0;
    this.dueFlashcardsCount = 0;
    // counts those in subdecks too
    this.totalFlashcards = 0;
    this.deckName = deckName;
    this.newFlashcards = [];
    this.newFlashcardsCount = 0;
    this.dueFlashcards = [];
    this.dueFlashcardsCount = 0;
    this.totalFlashcards = 0;
    this.subdecks = [];
    this.parent = parent;
  }
  createDeck(deckPath) {
    if (deckPath.length === 0) {
      return;
    }
    const deckName = deckPath.shift();
    for (const deck2 of this.subdecks) {
      if (deckName === deck2.deckName) {
        deck2.createDeck(deckPath);
        return;
      }
    }
    const deck = new Deck(deckName, this);
    this.subdecks.push(deck);
    deck.createDeck(deckPath);
  }
  insertFlashcard(deckPath, cardObj) {
    if (cardObj.isDue) {
      this.dueFlashcardsCount++;
    } else {
      this.newFlashcardsCount++;
    }
    this.totalFlashcards++;
    if (deckPath.length === 0) {
      if (cardObj.isDue) {
        this.dueFlashcards.push(cardObj);
      } else {
        this.newFlashcards.push(cardObj);
      }
      return;
    }
    const deckName = deckPath.shift();
    for (const deck of this.subdecks) {
      if (deckName === deck.deckName) {
        deck.insertFlashcard(deckPath, cardObj);
        return;
      }
    }
  }
  // count flashcards that have either been buried
  // or aren't due yet
  countFlashcard(deckPath, n = 1) {
    this.totalFlashcards += n;
    const deckName = deckPath.shift();
    for (const deck of this.subdecks) {
      if (deckName === deck.deckName) {
        deck.countFlashcard(deckPath, n);
        return;
      }
    }
  }
  deleteFlashcardAtIndex(index, cardIsDue) {
    if (cardIsDue) {
      this.dueFlashcards.splice(index, 1);
      this.dueFlashcardsCount--;
    } else {
      this.newFlashcards.splice(index, 1);
      this.newFlashcardsCount--;
    }
    let deck = this.parent;
    while (deck !== null) {
      if (cardIsDue) {
        deck.dueFlashcardsCount--;
      } else {
        deck.newFlashcardsCount--;
      }
      deck = deck.parent;
    }
  }
  sortSubdecksList() {
    this.subdecks.sort((a, b) => {
      if (a.deckName < b.deckName) {
        return -1;
      } else if (a.deckName > b.deckName) {
        return 1;
      }
      return 0;
    });
    for (const deck of this.subdecks) {
      deck.sortSubdecksList();
    }
  }
  render(containerEl, modal) {
    const deckView = containerEl.createDiv("tree-item");
    const deckViewSelf = deckView.createDiv(
      "tree-item-self tag-pane-tag is-clickable"
    );
    const shouldBeInitiallyExpanded = modal.plugin.data.settings.initiallyExpandAllSubdecksInTree;
    let collapsed = shouldBeInitiallyExpanded;
    let collapseIconEl = null;
    if (this.subdecks.length > 0) {
      collapseIconEl = deckViewSelf.createDiv("tree-item-icon collapse-icon");
      collapseIconEl.innerHTML = COLLAPSE_ICON;
      collapseIconEl.childNodes[0].style.transform = shouldBeInitiallyExpanded ? "" : "rotate(-90deg)";
    }
    const deckViewInner = deckViewSelf.createDiv("tree-item-inner");
    deckViewInner.addEventListener("click", () => {
      modal.plugin.data.historyDeck = this.deckName;
      modal.currentDeck = this;
      modal.checkDeck = this.parent;
      modal.setupCardsView();
      this.nextCard(modal);
    });
    const deckViewInnerText = deckViewInner.createDiv("tag-pane-tag-text");
    deckViewInnerText.innerHTML += /* @__PURE__ */ (0, import_vhtml.default)("span", { class: "tag-pane-tag-self" }, this.deckName);
    const deckViewOuter = deckViewSelf.createDiv("tree-item-flair-outer");
    deckViewOuter.innerHTML += /* @__PURE__ */ (0, import_vhtml.default)("span", null, /* @__PURE__ */ (0, import_vhtml.default)(
      "span",
      {
        style: "background-color:#4caf50;",
        class: "tag-pane-tag-count tree-item-flair sr-deck-counts"
      },
      this.dueFlashcardsCount.toString()
    ), /* @__PURE__ */ (0, import_vhtml.default)(
      "span",
      {
        style: "background-color:#2196f3;",
        class: "tag-pane-tag-count tree-item-flair sr-deck-counts"
      },
      this.newFlashcardsCount.toString()
    ), /* @__PURE__ */ (0, import_vhtml.default)(
      "span",
      {
        style: "background-color:#ff7043;",
        class: "tag-pane-tag-count tree-item-flair sr-deck-counts"
      },
      this.totalFlashcards.toString()
    ));
    const deckViewChildren = deckView.createDiv("tree-item-children");
    deckViewChildren.style.display = shouldBeInitiallyExpanded ? "block" : "none";
    if (this.subdecks.length > 0) {
      collapseIconEl.addEventListener("click", () => {
        if (collapsed) {
          collapseIconEl.childNodes[0].style.transform = "";
          deckViewChildren.style.display = "block";
        } else {
          collapseIconEl.childNodes[0].style.transform = "rotate(-90deg)";
          deckViewChildren.style.display = "none";
        }
        collapsed = !collapsed;
      });
    }
    for (const deck of this.subdecks) {
      deck.render(deckViewChildren, modal);
    }
  }
  nextCard(modal) {
    if (this.newFlashcards.length + this.dueFlashcards.length === 0) {
      if (this.dueFlashcardsCount + this.newFlashcardsCount > 0) {
        for (const deck of this.subdecks) {
          if (deck.dueFlashcardsCount + deck.newFlashcardsCount > 0) {
            modal.currentDeck = deck;
            deck.nextCard(modal);
            return;
          }
        }
      }
      if (this.parent == modal.checkDeck) {
        modal.plugin.data.historyDeck = "";
        modal.decksList();
      } else {
        this.parent.nextCard(modal);
      }
      return;
    }
    modal.responseDiv.style.display = "none";
    modal.resetButton.disabled = true;
    modal.titleEl.setText(
      `${this.deckName}: ${this.dueFlashcardsCount + this.newFlashcardsCount}`
    );
    modal.answerBtn.style.display = "initial";
    modal.flashcardView.empty();
    modal.mode = 1 /* Front */;
    let interval = 1, ease = modal.plugin.data.settings.baseEase, delayBeforeReview = 0;
    if (this.dueFlashcards.length > 0) {
      if (modal.plugin.data.settings.randomizeCardOrder) {
        modal.currentCardIdx = Math.floor(Math.random() * this.dueFlashcards.length);
      } else {
        modal.currentCardIdx = 0;
      }
      modal.currentCard = this.dueFlashcards[modal.currentCardIdx];
      modal.renderMarkdownWrapper(modal.currentCard.front, modal.flashcardView);
      interval = modal.currentCard.interval;
      ease = modal.currentCard.ease;
      delayBeforeReview = modal.currentCard.delayBeforeReview;
    } else if (this.newFlashcards.length > 0) {
      if (modal.plugin.data.settings.randomizeCardOrder) {
        const pickedCardIdx = Math.floor(Math.random() * this.newFlashcards.length);
        modal.currentCardIdx = pickedCardIdx;
        const pickedCard = this.newFlashcards[pickedCardIdx];
        let idx = pickedCardIdx;
        while (idx >= 0 && pickedCard.siblings.includes(this.newFlashcards[idx])) {
          if (!this.newFlashcards[idx].isDue) {
            modal.currentCardIdx = idx;
          }
          idx--;
        }
      } else {
        modal.currentCardIdx = 0;
      }
      modal.currentCard = this.newFlashcards[modal.currentCardIdx];
      modal.renderMarkdownWrapper(modal.currentCard.front, modal.flashcardView);
      if (Object.prototype.hasOwnProperty.call(
        modal.plugin.easeByPath,
        modal.currentCard.note.path
      )) {
        ease = modal.plugin.easeByPath[modal.currentCard.note.path];
      }
    }
    const hardInterval = schedule(
      2 /* Hard */,
      interval,
      ease,
      delayBeforeReview,
      modal.plugin.data.settings
    ).interval;
    const goodInterval = schedule(
      1 /* Good */,
      interval,
      ease,
      delayBeforeReview,
      modal.plugin.data.settings
    ).interval;
    const easyInterval = schedule(
      0 /* Easy */,
      interval,
      ease,
      delayBeforeReview,
      modal.plugin.data.settings
    ).interval;
    if (modal.ignoreStats) {
      modal.hardBtn.setText(`${modal.plugin.data.settings.flashcardHardText}`);
      modal.easyBtn.setText(`${modal.plugin.data.settings.flashcardEasyText}`);
    } else if (import_obsidian3.Platform.isMobile) {
      modal.hardBtn.setText(textInterval(hardInterval, true));
      modal.goodBtn.setText(textInterval(goodInterval, true));
      modal.easyBtn.setText(textInterval(easyInterval, true));
    } else {
      modal.hardBtn.setText(
        `${modal.plugin.data.settings.flashcardHardText} - ${textInterval(
          hardInterval,
          false
        )}`
      );
      modal.goodBtn.setText(
        `${modal.plugin.data.settings.flashcardGoodText} - ${textInterval(
          goodInterval,
          false
        )}`
      );
      modal.easyBtn.setText(
        `${modal.plugin.data.settings.flashcardEasyText} - ${textInterval(
          easyInterval,
          false
        )}`
      );
    }
    if (modal.plugin.data.settings.showContextInCards)
      modal.contextView.setText(modal.currentCard.context);
  }
};

// src/stats-modal.tsx
var import_obsidian4 = require("obsidian");
var import_vhtml2 = __toESM(require_vhtml());

// node_modules/@kurkle/color/dist/color.esm.js
function round(v) {
  return v + 0.5 | 0;
}
var lim = (v, l, h4) => Math.max(Math.min(v, h4), l);
function p2b(v) {
  return lim(round(v * 2.55), 0, 255);
}
function n2b(v) {
  return lim(round(v * 255), 0, 255);
}
function b2n(v) {
  return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
  return lim(round(v * 100), 0, 100);
}
var map$1 = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
var hex = [..."0123456789ABCDEF"];
var h1 = (b) => hex[b & 15];
var h2 = (b) => hex[(b & 240) >> 4] + hex[b & 15];
var eq = (b) => (b & 240) >> 4 === (b & 15);
var isShort = (v) => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
  var len = str.length;
  var ret;
  if (str[0] === "#") {
    if (len === 4 || len === 5) {
      ret = {
        r: 255 & map$1[str[1]] * 17,
        g: 255 & map$1[str[2]] * 17,
        b: 255 & map$1[str[3]] * 17,
        a: len === 5 ? map$1[str[4]] * 17 : 255
      };
    } else if (len === 7 || len === 9) {
      ret = {
        r: map$1[str[1]] << 4 | map$1[str[2]],
        g: map$1[str[3]] << 4 | map$1[str[4]],
        b: map$1[str[5]] << 4 | map$1[str[6]],
        a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
      };
    }
  }
  return ret;
}
var alpha = (a, f) => a < 255 ? f(a) : "";
function hexString(v) {
  var f = isShort(v) ? h1 : h2;
  return v ? "#" + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : void 0;
}
var HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h4, s, l) {
  const a = s * Math.min(l, 1 - l);
  const f = (n, k = (n + h4 / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  return [f(0), f(8), f(4)];
}
function hsv2rgbn(h4, s, v) {
  const f = (n, k = (n + h4 / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
  return [f(5), f(3), f(1)];
}
function hwb2rgbn(h4, w, b) {
  const rgb = hsl2rgbn(h4, 1, 0.5);
  let i;
  if (w + b > 1) {
    i = 1 / (w + b);
    w *= i;
    b *= i;
  }
  for (i = 0; i < 3; i++) {
    rgb[i] *= 1 - w - b;
    rgb[i] += w;
  }
  return rgb;
}
function hueValue(r, g, b, d, max) {
  if (r === max) {
    return (g - b) / d + (g < b ? 6 : 0);
  }
  if (g === max) {
    return (b - r) / d + 2;
  }
  return (r - g) / d + 4;
}
function rgb2hsl(v) {
  const range = 255;
  const r = v.r / range;
  const g = v.g / range;
  const b = v.b / range;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  const l = (max + min) / 2;
  let h4, s, d;
  if (max !== min) {
    d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    h4 = hueValue(r, g, b, d, max);
    h4 = h4 * 60 + 0.5;
  }
  return [h4 | 0, s || 0, l];
}
function calln(f, a, b, c) {
  return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);
}
function hsl2rgb(h4, s, l) {
  return calln(hsl2rgbn, h4, s, l);
}
function hwb2rgb(h4, w, b) {
  return calln(hwb2rgbn, h4, w, b);
}
function hsv2rgb(h4, s, v) {
  return calln(hsv2rgbn, h4, s, v);
}
function hue(h4) {
  return (h4 % 360 + 360) % 360;
}
function hueParse(str) {
  const m = HUE_RE.exec(str);
  let a = 255;
  let v;
  if (!m) {
    return;
  }
  if (m[5] !== v) {
    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
  }
  const h4 = hue(+m[2]);
  const p1 = +m[3] / 100;
  const p2 = +m[4] / 100;
  if (m[1] === "hwb") {
    v = hwb2rgb(h4, p1, p2);
  } else if (m[1] === "hsv") {
    v = hsv2rgb(h4, p1, p2);
  } else {
    v = hsl2rgb(h4, p1, p2);
  }
  return {
    r: v[0],
    g: v[1],
    b: v[2],
    a
  };
}
function rotate(v, deg) {
  var h4 = rgb2hsl(v);
  h4[0] = hue(h4[0] + deg);
  h4 = hsl2rgb(h4);
  v.r = h4[0];
  v.g = h4[1];
  v.b = h4[2];
}
function hslString(v) {
  if (!v) {
    return;
  }
  const a = rgb2hsl(v);
  const h4 = a[0];
  const s = n2p(a[1]);
  const l = n2p(a[2]);
  return v.a < 255 ? `hsla(${h4}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h4}, ${s}%, ${l}%)`;
}
var map = {
  x: "dark",
  Z: "light",
  Y: "re",
  X: "blu",
  W: "gr",
  V: "medium",
  U: "slate",
  A: "ee",
  T: "ol",
  S: "or",
  B: "ra",
  C: "lateg",
  D: "ights",
  R: "in",
  Q: "turquois",
  E: "hi",
  P: "ro",
  O: "al",
  N: "le",
  M: "de",
  L: "yello",
  F: "en",
  K: "ch",
  G: "arks",
  H: "ea",
  I: "ightg",
  J: "wh"
};
var names$1 = {
  OiceXe: "f0f8ff",
  antiquewEte: "faebd7",
  aqua: "ffff",
  aquamarRe: "7fffd4",
  azuY: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "0",
  blanKedOmond: "ffebcd",
  Xe: "ff",
  XeviTet: "8a2be2",
  bPwn: "a52a2a",
  burlywood: "deb887",
  caMtXe: "5f9ea0",
  KartYuse: "7fff00",
  KocTate: "d2691e",
  cSO: "ff7f50",
  cSnflowerXe: "6495ed",
  cSnsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "ffff",
  xXe: "8b",
  xcyan: "8b8b",
  xgTMnPd: "b8860b",
  xWay: "a9a9a9",
  xgYF: "6400",
  xgYy: "a9a9a9",
  xkhaki: "bdb76b",
  xmagFta: "8b008b",
  xTivegYF: "556b2f",
  xSange: "ff8c00",
  xScEd: "9932cc",
  xYd: "8b0000",
  xsOmon: "e9967a",
  xsHgYF: "8fbc8f",
  xUXe: "483d8b",
  xUWay: "2f4f4f",
  xUgYy: "2f4f4f",
  xQe: "ced1",
  xviTet: "9400d3",
  dAppRk: "ff1493",
  dApskyXe: "bfff",
  dimWay: "696969",
  dimgYy: "696969",
  dodgerXe: "1e90ff",
  fiYbrick: "b22222",
  flSOwEte: "fffaf0",
  foYstWAn: "228b22",
  fuKsia: "ff00ff",
  gaRsbSo: "dcdcdc",
  ghostwEte: "f8f8ff",
  gTd: "ffd700",
  gTMnPd: "daa520",
  Way: "808080",
  gYF: "8000",
  gYFLw: "adff2f",
  gYy: "808080",
  honeyMw: "f0fff0",
  hotpRk: "ff69b4",
  RdianYd: "cd5c5c",
  Rdigo: "4b0082",
  ivSy: "fffff0",
  khaki: "f0e68c",
  lavFMr: "e6e6fa",
  lavFMrXsh: "fff0f5",
  lawngYF: "7cfc00",
  NmoncEffon: "fffacd",
  ZXe: "add8e6",
  ZcSO: "f08080",
  Zcyan: "e0ffff",
  ZgTMnPdLw: "fafad2",
  ZWay: "d3d3d3",
  ZgYF: "90ee90",
  ZgYy: "d3d3d3",
  ZpRk: "ffb6c1",
  ZsOmon: "ffa07a",
  ZsHgYF: "20b2aa",
  ZskyXe: "87cefa",
  ZUWay: "778899",
  ZUgYy: "778899",
  ZstAlXe: "b0c4de",
  ZLw: "ffffe0",
  lime: "ff00",
  limegYF: "32cd32",
  lRF: "faf0e6",
  magFta: "ff00ff",
  maPon: "800000",
  VaquamarRe: "66cdaa",
  VXe: "cd",
  VScEd: "ba55d3",
  VpurpN: "9370db",
  VsHgYF: "3cb371",
  VUXe: "7b68ee",
  VsprRggYF: "fa9a",
  VQe: "48d1cc",
  VviTetYd: "c71585",
  midnightXe: "191970",
  mRtcYam: "f5fffa",
  mistyPse: "ffe4e1",
  moccasR: "ffe4b5",
  navajowEte: "ffdead",
  navy: "80",
  Tdlace: "fdf5e6",
  Tive: "808000",
  TivedBb: "6b8e23",
  Sange: "ffa500",
  SangeYd: "ff4500",
  ScEd: "da70d6",
  pOegTMnPd: "eee8aa",
  pOegYF: "98fb98",
  pOeQe: "afeeee",
  pOeviTetYd: "db7093",
  papayawEp: "ffefd5",
  pHKpuff: "ffdab9",
  peru: "cd853f",
  pRk: "ffc0cb",
  plum: "dda0dd",
  powMrXe: "b0e0e6",
  purpN: "800080",
  YbeccapurpN: "663399",
  Yd: "ff0000",
  Psybrown: "bc8f8f",
  PyOXe: "4169e1",
  saddNbPwn: "8b4513",
  sOmon: "fa8072",
  sandybPwn: "f4a460",
  sHgYF: "2e8b57",
  sHshell: "fff5ee",
  siFna: "a0522d",
  silver: "c0c0c0",
  skyXe: "87ceeb",
  UXe: "6a5acd",
  UWay: "708090",
  UgYy: "708090",
  snow: "fffafa",
  sprRggYF: "ff7f",
  stAlXe: "4682b4",
  tan: "d2b48c",
  teO: "8080",
  tEstN: "d8bfd8",
  tomato: "ff6347",
  Qe: "40e0d0",
  viTet: "ee82ee",
  JHt: "f5deb3",
  wEte: "ffffff",
  wEtesmoke: "f5f5f5",
  Lw: "ffff00",
  LwgYF: "9acd32"
};
function unpack() {
  const unpacked = {};
  const keys = Object.keys(names$1);
  const tkeys = Object.keys(map);
  let i, j, k, ok, nk;
  for (i = 0; i < keys.length; i++) {
    ok = nk = keys[i];
    for (j = 0; j < tkeys.length; j++) {
      k = tkeys[j];
      nk = nk.replace(k, map[k]);
    }
    k = parseInt(names$1[ok], 16);
    unpacked[nk] = [k >> 16 & 255, k >> 8 & 255, k & 255];
  }
  return unpacked;
}
var names;
function nameParse(str) {
  if (!names) {
    names = unpack();
    names.transparent = [0, 0, 0, 0];
  }
  const a = names[str.toLowerCase()];
  return a && {
    r: a[0],
    g: a[1],
    b: a[2],
    a: a.length === 4 ? a[3] : 255
  };
}
var RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
  const m = RGB_RE.exec(str);
  let a = 255;
  let r, g, b;
  if (!m) {
    return;
  }
  if (m[7] !== r) {
    const v = +m[7];
    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
  }
  r = +m[1];
  g = +m[3];
  b = +m[5];
  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
  return {
    r,
    g,
    b,
    a
  };
}
function rgbString(v) {
  return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
var to = (v) => v <= 31308e-7 ? v * 12.92 : Math.pow(v, 1 / 2.4) * 1.055 - 0.055;
var from = (v) => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate2(rgb1, rgb2, t2) {
  const r = from(b2n(rgb1.r));
  const g = from(b2n(rgb1.g));
  const b = from(b2n(rgb1.b));
  return {
    r: n2b(to(r + t2 * (from(b2n(rgb2.r)) - r))),
    g: n2b(to(g + t2 * (from(b2n(rgb2.g)) - g))),
    b: n2b(to(b + t2 * (from(b2n(rgb2.b)) - b))),
    a: rgb1.a + t2 * (rgb2.a - rgb1.a)
  };
}
function modHSL(v, i, ratio) {
  if (v) {
    let tmp = rgb2hsl(v);
    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
    tmp = hsl2rgb(tmp);
    v.r = tmp[0];
    v.g = tmp[1];
    v.b = tmp[2];
  }
}
function clone(v, proto) {
  return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
  var v = { r: 0, g: 0, b: 0, a: 255 };
  if (Array.isArray(input)) {
    if (input.length >= 3) {
      v = { r: input[0], g: input[1], b: input[2], a: 255 };
      if (input.length > 3) {
        v.a = n2b(input[3]);
      }
    }
  } else {
    v = clone(input, { r: 0, g: 0, b: 0, a: 1 });
    v.a = n2b(v.a);
  }
  return v;
}
function functionParse(str) {
  if (str.charAt(0) === "r") {
    return rgbParse(str);
  }
  return hueParse(str);
}
var Color = class {
  constructor(input) {
    if (input instanceof Color) {
      return input;
    }
    const type = typeof input;
    let v;
    if (type === "object") {
      v = fromObject(input);
    } else if (type === "string") {
      v = hexParse(input) || nameParse(input) || functionParse(input);
    }
    this._rgb = v;
    this._valid = !!v;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
    var v = clone(this._rgb);
    if (v) {
      v.a = b2n(v.a);
    }
    return v;
  }
  set rgb(obj) {
    this._rgb = fromObject(obj);
  }
  rgbString() {
    return this._valid ? rgbString(this._rgb) : void 0;
  }
  hexString() {
    return this._valid ? hexString(this._rgb) : void 0;
  }
  hslString() {
    return this._valid ? hslString(this._rgb) : void 0;
  }
  mix(color2, weight) {
    if (color2) {
      const c1 = this.rgb;
      const c2 = color2.rgb;
      let w2;
      const p = weight === w2 ? 0.5 : weight;
      const w = 2 * p - 1;
      const a = c1.a - c2.a;
      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
      w2 = 1 - w1;
      c1.r = 255 & w1 * c1.r + w2 * c2.r + 0.5;
      c1.g = 255 & w1 * c1.g + w2 * c2.g + 0.5;
      c1.b = 255 & w1 * c1.b + w2 * c2.b + 0.5;
      c1.a = p * c1.a + (1 - p) * c2.a;
      this.rgb = c1;
    }
    return this;
  }
  interpolate(color2, t2) {
    if (color2) {
      this._rgb = interpolate2(this._rgb, color2._rgb, t2);
    }
    return this;
  }
  clone() {
    return new Color(this.rgb);
  }
  alpha(a) {
    this._rgb.a = n2b(a);
    return this;
  }
  clearer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 - ratio;
    return this;
  }
  greyscale() {
    const rgb = this._rgb;
    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
    rgb.r = rgb.g = rgb.b = val;
    return this;
  }
  opaquer(ratio) {
    const rgb = this._rgb;
    rgb.a *= 1 + ratio;
    return this;
  }
  negate() {
    const v = this._rgb;
    v.r = 255 - v.r;
    v.g = 255 - v.g;
    v.b = 255 - v.b;
    return this;
  }
  lighten(ratio) {
    modHSL(this._rgb, 2, ratio);
    return this;
  }
  darken(ratio) {
    modHSL(this._rgb, 2, -ratio);
    return this;
  }
  saturate(ratio) {
    modHSL(this._rgb, 1, ratio);
    return this;
  }
  desaturate(ratio) {
    modHSL(this._rgb, 1, -ratio);
    return this;
  }
  rotate(deg) {
    rotate(this._rgb, deg);
    return this;
  }
};

// node_modules/chart.js/dist/chunks/helpers.segment.js
function noop() {
}
var uid = (() => {
  let id = 0;
  return () => id++;
})();
function isNullOrUndef(value) {
  return value === null || typeof value === "undefined";
}
function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
function isNumberFinite(value) {
  return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === "undefined" ? defaultValue : value;
}
var toPercentage = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : +value / dimension;
var toDimension = (value, dimension) => typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === "function") {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  let i, len, keys;
  if (isArray(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i = len - 1; i >= 0; i--) {
        fn.call(thisArg, loopable[i], i);
      }
    } else {
      for (i = 0; i < len; i++) {
        fn.call(thisArg, loopable[i], i);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i = 0; i < len; i++) {
      fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone2(source) {
  if (isArray(source)) {
    return source.map(clone2);
  }
  if (isObject(source)) {
    const target = /* @__PURE__ */ Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k = 0;
    for (; k < klen; ++k) {
      target[keys[k]] = clone2(source[keys[k]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key) {
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(key) === -1;
}
function _merger(key, target, source, options) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone2(sval);
  }
}
function merge(target, source, options) {
  const sources = isArray(source) ? source : [
    source
  ];
  const ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options = options || {};
  const merger = options.merger || _merger;
  let current;
  for (let i = 0; i < ilen; ++i) {
    current = sources[i];
    if (!isObject(current)) {
      continue;
    }
    const keys = Object.keys(current);
    for (let k = 0, klen = keys.length; k < klen; ++k) {
      merger(keys[k], target, current, options);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {
    merger: _mergerIf
  });
}
function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone2(sval);
  }
}
var keyResolvers = {
  // Chart.helpers.core resolveObjectKey should resolve empty key to root object
  "": (v) => v,
  // default resolvers
  x: (o) => o.x,
  y: (o) => o.y
};
function _splitKey(key) {
  const parts = key.split(".");
  const keys = [];
  let tmp = "";
  for (const part of parts) {
    tmp += part;
    if (tmp.endsWith("\\")) {
      tmp = tmp.slice(0, -1) + ".";
    } else {
      keys.push(tmp);
      tmp = "";
    }
  }
  return keys;
}
function _getKeyResolver(key) {
  const keys = _splitKey(key);
  return (obj) => {
    for (const k of keys) {
      if (k === "") {
        break;
      }
      obj = obj && obj[k];
    }
    return obj;
  };
}
function resolveObjectKey(obj, key) {
  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
  return resolver(obj);
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
var defined = (value) => typeof value !== "undefined";
var isFunction = (value) => typeof value === "function";
var setsEqual = (a, b) => {
  if (a.size !== b.size) {
    return false;
  }
  for (const item of a) {
    if (!b.has(item)) {
      return false;
    }
  }
  return true;
};
function _isClickEvent(e) {
  return e.type === "mouseup" || e.type === "click" || e.type === "contextmenu";
}
var PI = Math.PI;
var TAU = 2 * PI;
var PITAU = TAU + PI;
var INFINITY = Number.POSITIVE_INFINITY;
var RAD_PER_DEG = PI / 180;
var HALF_PI = PI / 2;
var QUARTER_PI = PI / 4;
var TWO_THIRDS_PI = PI * 2 / 3;
var log10 = Math.log10;
var sign = Math.sign;
function almostEquals(x, y, epsilon) {
  return Math.abs(x - y) < epsilon;
}
function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1e3) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i;
  for (i = 1; i < sqrt; i++) {
    if (value % i === 0) {
      result.push(i);
      result.push(value / i);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a, b) => a - b).pop();
  return result;
}
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostWhole(x, epsilon) {
  const rounded = Math.round(x);
  return rounded - epsilon <= x && rounded + epsilon >= x;
}
function _setMinAndMaxByKey(array, target, property) {
  let i, ilen, value;
  for (i = 0, ilen = array.length; i < ilen; i++) {
    value = array[i][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees) {
  return degrees * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x) {
  if (!isNumberFinite(x)) {
    return;
  }
  let e = 1;
  let p = 0;
  while (Math.round(x * e) / e !== x) {
    e *= 10;
    p++;
  }
  return p;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < -0.5 * PI) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _normalizeAngle(a) {
  return (a % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a = _normalizeAngle(angle);
  const s = _normalizeAngle(start);
  const e = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s - a);
  const angleToEnd = _normalizeAngle(e - a);
  const startToAngle = _normalizeAngle(a - s);
  const endToAngle = _normalizeAngle(a - e);
  return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}
function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}
function _isBetween(value, start, end, epsilon = 1e-6) {
  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
  cmp = cmp || ((index) => table[index] < value);
  let hi = table.length - 1;
  let lo = 0;
  let mid;
  while (hi - lo > 1) {
    mid = lo + hi >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return {
    lo,
    hi
  };
}
var _lookupByKey = (table, key, value, last) => _lookup(table, value, last ? (index) => {
  const ti = table[index][key];
  return ti < value || ti === value && table[index + 1][key] === value;
} : (index) => table[index][key] < value);
var _rlookupByKey = (table, key, value) => _lookup(table, value, (index) => table[index][key] >= value);
function _filterBetween(values, min, max) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min) {
    start++;
  }
  while (end > start && values[end - 1] > max) {
    end--;
  }
  return start > 0 || end < values.length ? values.slice(start, end) : values;
}
var arrayEvents = [
  "push",
  "pop",
  "shift",
  "splice",
  "unshift"
];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, "_chartjs", {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [
        listener
      ]
    }
  });
  arrayEvents.forEach((key) => {
    const method = "_onData" + _capitalize(key);
    const base = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base.apply(this, args);
        array._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === "function") {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index = listeners.indexOf(listener);
  if (index !== -1) {
    listeners.splice(index, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key) => {
    delete array[key];
  });
  delete array._chartjs;
}
function _arrayUnique(items) {
  const set2 = /* @__PURE__ */ new Set();
  let i, ilen;
  for (i = 0, ilen = items.length; i < ilen; ++i) {
    set2.add(items[i]);
  }
  if (set2.size === ilen) {
    return items;
  }
  return Array.from(set2);
}
var requestAnimFrame = function() {
  if (typeof window === "undefined") {
    return function(callback2) {
      return callback2();
    };
  }
  return window.requestAnimationFrame;
}();
function throttled(fn, thisArg) {
  let argsToUse = [];
  let ticking = false;
  return function(...args) {
    argsToUse = args;
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, argsToUse);
      });
    }
  };
}
function debounce(fn, delay) {
  let timeout;
  return function(...args) {
    if (delay) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay, args);
    } else {
      fn.apply(this, args);
    }
    return delay;
  };
}
var _toLeftRightCenter = (align) => align === "start" ? "left" : align === "end" ? "right" : "center";
var _alignStartEnd = (align, start, end) => align === "start" ? start : align === "end" ? end : (start + end) / 2;
var _textX = (align, left, right, rtl) => {
  const check = rtl ? "left" : "right";
  return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
var atEdge = (t2) => t2 === 0 || t2 === 1;
var elasticIn = (t2, s, p) => -(Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s) * TAU / p));
var elasticOut = (t2, s, p) => Math.pow(2, -10 * t2) * Math.sin((t2 - s) * TAU / p) + 1;
var effects = {
  linear: (t2) => t2,
  easeInQuad: (t2) => t2 * t2,
  easeOutQuad: (t2) => -t2 * (t2 - 2),
  easeInOutQuad: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 : -0.5 * (--t2 * (t2 - 2) - 1),
  easeInCubic: (t2) => t2 * t2 * t2,
  easeOutCubic: (t2) => (t2 -= 1) * t2 * t2 + 1,
  easeInOutCubic: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 + 2),
  easeInQuart: (t2) => t2 * t2 * t2 * t2,
  easeOutQuart: (t2) => -((t2 -= 1) * t2 * t2 * t2 - 1),
  easeInOutQuart: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 : -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2),
  easeInQuint: (t2) => t2 * t2 * t2 * t2 * t2,
  easeOutQuint: (t2) => (t2 -= 1) * t2 * t2 * t2 * t2 + 1,
  easeInOutQuint: (t2) => (t2 /= 0.5) < 1 ? 0.5 * t2 * t2 * t2 * t2 * t2 : 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2),
  easeInSine: (t2) => -Math.cos(t2 * HALF_PI) + 1,
  easeOutSine: (t2) => Math.sin(t2 * HALF_PI),
  easeInOutSine: (t2) => -0.5 * (Math.cos(PI * t2) - 1),
  easeInExpo: (t2) => t2 === 0 ? 0 : Math.pow(2, 10 * (t2 - 1)),
  easeOutExpo: (t2) => t2 === 1 ? 1 : -Math.pow(2, -10 * t2) + 1,
  easeInOutExpo: (t2) => atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * Math.pow(2, 10 * (t2 * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t2 * 2 - 1)) + 2),
  easeInCirc: (t2) => t2 >= 1 ? t2 : -(Math.sqrt(1 - t2 * t2) - 1),
  easeOutCirc: (t2) => Math.sqrt(1 - (t2 -= 1) * t2),
  easeInOutCirc: (t2) => (t2 /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t2 * t2) - 1) : 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1),
  easeInElastic: (t2) => atEdge(t2) ? t2 : elasticIn(t2, 0.075, 0.3),
  easeOutElastic: (t2) => atEdge(t2) ? t2 : elasticOut(t2, 0.075, 0.3),
  easeInOutElastic(t2) {
    const s = 0.1125;
    const p = 0.45;
    return atEdge(t2) ? t2 : t2 < 0.5 ? 0.5 * elasticIn(t2 * 2, s, p) : 0.5 + 0.5 * elasticOut(t2 * 2 - 1, s, p);
  },
  easeInBack(t2) {
    const s = 1.70158;
    return t2 * t2 * ((s + 1) * t2 - s);
  },
  easeOutBack(t2) {
    const s = 1.70158;
    return (t2 -= 1) * t2 * ((s + 1) * t2 + s) + 1;
  },
  easeInOutBack(t2) {
    let s = 1.70158;
    if ((t2 /= 0.5) < 1) {
      return 0.5 * (t2 * t2 * (((s *= 1.525) + 1) * t2 - s));
    }
    return 0.5 * ((t2 -= 2) * t2 * (((s *= 1.525) + 1) * t2 + s) + 2);
  },
  easeInBounce: (t2) => 1 - effects.easeOutBounce(1 - t2),
  easeOutBounce(t2) {
    const m = 7.5625;
    const d = 2.75;
    if (t2 < 1 / d) {
      return m * t2 * t2;
    }
    if (t2 < 2 / d) {
      return m * (t2 -= 1.5 / d) * t2 + 0.75;
    }
    if (t2 < 2.5 / d) {
      return m * (t2 -= 2.25 / d) * t2 + 0.9375;
    }
    return m * (t2 -= 2.625 / d) * t2 + 0.984375;
  },
  easeInOutBounce: (t2) => t2 < 0.5 ? effects.easeInBounce(t2 * 2) * 0.5 : effects.easeOutBounce(t2 * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
  if (value && typeof value === "object") {
    const type = value.toString();
    return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
  }
  return false;
}
function color(value) {
  return isPatternOrGradient(value) ? value : new Color(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
}
var numbers = [
  "x",
  "y",
  "borderWidth",
  "radius",
  "tension"
];
var colors = [
  "color",
  "borderColor",
  "backgroundColor"
];
function applyAnimationsDefaults(defaults2) {
  defaults2.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  });
  defaults2.describe("animation", {
    _fallback: false,
    _indexable: false,
    _scriptable: (name2) => name2 !== "onProgress" && name2 !== "onComplete" && name2 !== "fn"
  });
  defaults2.set("animations", {
    colors: {
      type: "color",
      properties: colors
    },
    numbers: {
      type: "number",
      properties: numbers
    }
  });
  defaults2.describe("animations", {
    _fallback: "animation"
  });
  defaults2.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (v) => v | 0
        }
      }
    }
  });
}
function applyLayoutsDefaults(defaults2) {
  defaults2.set("layout", {
    autoPadding: true,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
var intlCache = /* @__PURE__ */ new Map();
function getNumberFormat(locale2, options) {
  options = options || {};
  const cacheKey = locale2 + JSON.stringify(options);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale2, options);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale2, options) {
  return getNumberFormat(locale2, options).format(num);
}
var formatters = {
  values(value) {
    return isArray(value) ? value : "" + value;
  },
  numeric(tickValue, index, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const locale2 = this.chart.options.locale;
    let notation;
    let delta = tickValue;
    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
      if (maxTick < 1e-4 || maxTick > 1e15) {
        notation = "scientific";
      }
      delta = calculateDelta(tickValue, ticks);
    }
    const logDelta = log10(Math.abs(delta));
    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options = {
      notation,
      minimumFractionDigits: numDecimal,
      maximumFractionDigits: numDecimal
    };
    Object.assign(options, this.options.ticks.format);
    return formatNumber(tickValue, locale2, options);
  },
  logarithmic(tickValue, index, ticks) {
    if (tickValue === 0) {
      return "0";
    }
    const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
    if ([
      1,
      2,
      3,
      5,
      10,
      15
    ].includes(remain) || index > 0.8 * ticks.length) {
      return formatters.numeric.call(this, tickValue, index, ticks);
    }
    return "";
  }
};
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
var Ticks = {
  formatters
};
function applyScaleDefaults(defaults2) {
  defaults2.set("scale", {
    display: true,
    offset: false,
    reverse: false,
    beginAtZero: false,
    bounds: "ticks",
    grace: 0,
    grid: {
      display: true,
      lineWidth: 1,
      drawOnChartArea: true,
      drawTicks: true,
      tickLength: 8,
      tickWidth: (_ctx, options) => options.lineWidth,
      tickColor: (_ctx, options) => options.color,
      offset: false
    },
    border: {
      display: true,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: false,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: false,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: true,
      autoSkip: true,
      autoSkipPadding: 3,
      labelOffset: 0,
      callback: Ticks.formatters.values,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: false,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  });
  defaults2.route("scale.ticks", "color", "", "color");
  defaults2.route("scale.grid", "color", "", "borderColor");
  defaults2.route("scale.border", "color", "", "borderColor");
  defaults2.route("scale.title", "color", "", "color");
  defaults2.describe("scale", {
    _fallback: false,
    _scriptable: (name2) => !name2.startsWith("before") && !name2.startsWith("after") && name2 !== "callback" && name2 !== "parser",
    _indexable: (name2) => name2 !== "borderDash" && name2 !== "tickBorderDash" && name2 !== "dash"
  });
  defaults2.describe("scales", {
    _fallback: "scale"
  });
  defaults2.describe("scale.ticks", {
    _scriptable: (name2) => name2 !== "backdropPadding" && name2 !== "callback",
    _indexable: (name2) => name2 !== "backdropPadding"
  });
}
var overrides = /* @__PURE__ */ Object.create(null);
var descriptors = /* @__PURE__ */ Object.create(null);
function getScope$1(node, key) {
  if (!key) {
    return node;
  }
  const keys = key.split(".");
  for (let i = 0, n = keys.length; i < n; ++i) {
    const k = keys[i];
    node = node[k] || (node[k] = /* @__PURE__ */ Object.create(null));
  }
  return node;
}
function set(root, scope, values) {
  if (typeof scope === "string") {
    return merge(getScope$1(root, scope), values);
  }
  return merge(getScope$1(root, ""), scope);
}
var Defaults = class {
  constructor(_descriptors2, _appliers) {
    this.animation = void 0;
    this.backgroundColor = "rgba(0,0,0,0.1)";
    this.borderColor = "rgba(0,0,0,0.1)";
    this.color = "#666";
    this.datasets = {};
    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
    this.elements = {};
    this.events = [
      "mousemove",
      "mouseout",
      "click",
      "touchstart",
      "touchmove"
    ];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: "normal",
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};
    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
    this.hoverColor = (ctx, options) => getHoverColor(options.color);
    this.indexAxis = "x";
    this.interaction = {
      mode: "nearest",
      intersect: true,
      includeInvisible: false
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = void 0;
    this.scales = {};
    this.showLine = true;
    this.drawActiveElementsOnTop = true;
    this.describe(_descriptors2);
    this.apply(_appliers);
  }
  set(scope, values) {
    return set(this, scope, values);
  }
  get(scope) {
    return getScope$1(this, scope);
  }
  describe(scope, values) {
    return set(descriptors, scope, values);
  }
  override(scope, values) {
    return set(overrides, scope, values);
  }
  route(scope, name2, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = "_" + name2;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name2],
        writable: true
      },
      [name2]: {
        enumerable: true,
        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];
          if (isObject(local)) {
            return Object.assign({}, target, local);
          }
          return valueOrDefault(local, target);
        },
        set(value) {
          this[privateName] = value;
        }
      }
    });
  }
  apply(appliers) {
    appliers.forEach((apply) => apply(this));
  }
};
var defaults = /* @__PURE__ */ new Defaults({
  _scriptable: (name2) => !name2.startsWith("on"),
  _indexable: (name2) => name2 !== "events",
  hover: {
    _fallback: "interaction"
  },
  interaction: {
    _scriptable: false,
    _indexable: false
  }
}, [
  applyAnimationsDefaults,
  applyLayoutsDefaults,
  applyScaleDefaults
]);
function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
function _measureText(ctx, data, gc, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i, j, jlen, thing, nestedThing;
  for (i = 0; i < ilen; i++) {
    thing = arrayOfThings[i];
    if (thing !== void 0 && thing !== null && isArray(thing) !== true) {
      longest = _measureText(ctx, data, gc, longest, thing);
    } else if (isArray(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];
        if (nestedThing !== void 0 && nestedThing !== null && !isArray(nestedThing)) {
          longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  const gcLen = gc.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i = 0; i < gcLen; i++) {
      delete data[gc[i]];
    }
    gc.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  ctx = ctx || canvas.getContext("2d");
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options, x, y) {
  drawPointLegend(ctx, options, x, y, null);
}
function drawPointLegend(ctx, options, x, y, w) {
  let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
  const style = options.pointStyle;
  const rotation = options.rotation;
  const radius = options.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === "object") {
    type = style.toString();
    if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
    default:
      if (w) {
        ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
      } else {
        ctx.arc(x, y, radius, 0, TAU);
      }
      ctx.closePath();
      break;
    case "triangle":
      width = w ? w / 2 : radius;
      ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
      rad += TWO_THIRDS_PI;
      ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
      ctx.closePath();
      break;
    case "rectRounded":
      cornerRadius = radius * 0.516;
      size = radius - cornerRadius;
      xOffset = Math.cos(rad + QUARTER_PI) * size;
      xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
      yOffset = Math.sin(rad + QUARTER_PI) * size;
      yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
      ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
      ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
      ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
      ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
      ctx.closePath();
      break;
    case "rect":
      if (!rotation) {
        size = Math.SQRT1_2 * radius;
        width = w ? w / 2 : size;
        ctx.rect(x - width, y - size, 2 * width, 2 * size);
        break;
      }
      rad += QUARTER_PI;
    case "rectRot":
      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
      ctx.moveTo(x - xOffsetW, y - yOffset);
      ctx.lineTo(x + yOffsetW, y - xOffset);
      ctx.lineTo(x + xOffsetW, y + yOffset);
      ctx.lineTo(x - yOffsetW, y + xOffset);
      ctx.closePath();
      break;
    case "crossRot":
      rad += QUARTER_PI;
    case "cross":
      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
      ctx.moveTo(x - xOffsetW, y - yOffset);
      ctx.lineTo(x + xOffsetW, y + yOffset);
      ctx.moveTo(x + yOffsetW, y - xOffset);
      ctx.lineTo(x - yOffsetW, y + xOffset);
      break;
    case "star":
      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
      ctx.moveTo(x - xOffsetW, y - yOffset);
      ctx.lineTo(x + xOffsetW, y + yOffset);
      ctx.moveTo(x + yOffsetW, y - xOffset);
      ctx.lineTo(x - yOffsetW, y + xOffset);
      rad += QUARTER_PI;
      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
      xOffset = Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
      ctx.moveTo(x - xOffsetW, y - yOffset);
      ctx.lineTo(x + xOffsetW, y + yOffset);
      ctx.moveTo(x + yOffsetW, y - xOffset);
      ctx.lineTo(x - yOffsetW, y + xOffset);
      break;
    case "line":
      xOffset = w ? w / 2 : Math.cos(rad) * radius;
      yOffset = Math.sin(rad) * radius;
      ctx.moveTo(x - xOffset, y - yOffset);
      ctx.lineTo(x + xOffset, y + yOffset);
      break;
    case "dash":
      ctx.moveTo(x, y);
      ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
      break;
    case false:
      ctx.closePath();
      break;
  }
  ctx.fill();
  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function renderText(ctx, text, x, y, font, opts = {}) {
  const lines = isArray(text) ? text : [
    text
  ];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
  let i, line;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i = 0; i < lines.length; ++i) {
    line = lines[i];
    if (opts.backdrop) {
      drawBackdrop(ctx, opts.backdrop);
    }
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line, x, y, opts.maxWidth);
    }
    ctx.fillText(line, x, y, opts.maxWidth);
    decorateText(ctx, x, y, line, opts);
    y += font.lineHeight;
  }
  ctx.restore();
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x, y, line, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line);
    const left = x - metrics.actualBoundingBoxLeft;
    const right = x + metrics.actualBoundingBoxRight;
    const top = y - metrics.actualBoundingBoxAscent;
    const bottom = y + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function drawBackdrop(ctx, opts) {
  const oldColor = ctx.fillStyle;
  ctx.fillStyle = opts.color;
  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
  ctx.fillStyle = oldColor;
}
function addRoundedRectPath(ctx, rect) {
  const { x, y, w, h: h4, radius } = rect;
  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
  ctx.lineTo(x, y + h4 - radius.bottomLeft);
  ctx.arc(x + radius.bottomLeft, y + h4 - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x + w - radius.bottomRight, y + h4);
  ctx.arc(x + w - radius.bottomRight, y + h4 - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x + w, y + radius.topRight);
  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x + radius.topLeft, y);
}
var LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
var FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
function toLineHeight(value, size) {
  const matches = ("" + value).match(LINE_HEIGHT);
  if (!matches || matches[1] === "normal") {
    return size * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
    case "px":
      return value;
    case "%":
      value /= 100;
      break;
  }
  return size * value;
}
var numberOrZero = (v) => +v || 0;
function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject(value) ? objProps ? (prop) => valueOrDefault(value[prop], value[props[prop]]) : (prop) => value[prop] : () => value;
  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
function toTRBLCorners(value) {
  return _readValueToProps(value, [
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options, fallback) {
  options = options || {};
  fallback = fallback || defaults.font;
  let size = valueOrDefault(options.size, fallback.size);
  if (typeof size === "string") {
    size = parseInt(size, 10);
  }
  let style = valueOrDefault(options.style, fallback.style);
  if (style && !("" + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = void 0;
  }
  const font = {
    family: valueOrDefault(options.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
    size,
    style,
    weight: valueOrDefault(options.weight, fallback.weight),
    string: ""
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context, index, info) {
  let cacheable = true;
  let i, ilen, value;
  for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    value = inputs[i];
    if (value === void 0) {
      continue;
    }
    if (context !== void 0 && typeof value === "function") {
      value = value(context);
      cacheable = false;
    }
    if (index !== void 0 && isArray(value)) {
      value = value[index % value.length];
      cacheable = false;
    }
    if (value !== void 0) {
      if (info && !cacheable) {
        info.cacheable = false;
      }
      return value;
    }
  }
}
function _addGrace(minmax, grace, beginAtZero) {
  const { min, max } = minmax;
  const change = toDimension(grace, (max - min) / 2);
  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;
  return {
    min: keepZero(min, -Math.abs(change)),
    max: keepZero(max, change)
  };
}
function createContext(parentContext, context) {
  return Object.assign(Object.create(parentContext), context);
}
function _createResolver(scopes, prefixes = [
  ""
], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {
  if (!defined(fallback)) {
    fallback = _resolve("_fallback", scopes);
  }
  const cache = {
    [Symbol.toStringTag]: "Object",
    _cacheable: true,
    _scopes: scopes,
    _rootScopes: rootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([
      scope,
      ...scopes
    ], prefixes, rootScopes, fallback)
  };
  return new Proxy(cache, {
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes[0][prop];
      return true;
    },
    get(target, prop) {
      return _cached(target, prop, () => _resolveWithPrefixes(prop, prefixes, scopes, target));
    },
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes[0]);
    },
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      target[prop] = storage[prop] = value;
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: /* @__PURE__ */ new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    get(target, prop, receiver) {
      return _cached(target, prop, () => _resolveWithContext(target, prop, receiver));
    },
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
        enumerable: true,
        configurable: true
      } : void 0 : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults2 = {
  scriptable: true,
  indexable: true
}) {
  const { _scriptable = defaults2.scriptable, _indexable = defaults2.indexable, _allKeys = defaults2.allKeys } = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}
var readKey = (prefix, name2) => prefix ? prefix + _capitalize(name2) : name2;
var needsSubResolver = (prop, value) => isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve2) {
  if (Object.prototype.hasOwnProperty.call(target, prop)) {
    return target[prop];
  }
  const value = resolve2();
  target[prop] = value;
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  let value = _proxy[prop];
  if (isFunction(value) && descriptors2.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors2.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors2);
  }
  return value;
}
function _resolveScriptable(prop, value, target, receiver) {
  const { _proxy, _context, _subProxy, _stack } = target;
  if (_stack.has(prop)) {
    throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
  }
  _stack.add(prop);
  value = value(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (needsSubResolver(prop, value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const { _proxy, _context, _subProxy, _descriptors: descriptors2 } = target;
  if (defined(_context.index) && isIndexable(prop)) {
    value = value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;
    const scopes = _proxy._scopes.filter((s) => s !== arr);
    value = [];
    for (const item of arr) {
      const resolver = createSubResolver(scopes, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors2));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}
var getScope = (key, parent) => key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : void 0;
function addScopes(set2, parentScopes, key, parentFallback, value) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);
    if (scope) {
      set2.add(scope);
      const fallback = resolveFallback(scope._fallback, key, value);
      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [
    ...parentScopes,
    ...rootScopes
  ];
  const set2 = /* @__PURE__ */ new Set();
  set2.add(value);
  let key = addScopesFromKey(set2, allScopes, prop, fallback || prop, value);
  if (key === null) {
    return false;
  }
  if (defined(fallback) && fallback !== prop) {
    key = addScopesFromKey(set2, allScopes, fallback, key, value);
    if (key === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set2), [
    ""
  ], rootScopes, fallback, () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set2, allScopes, key, fallback, item) {
  while (key) {
    key = addScopes(set2, allScopes, key, fallback, item);
  }
  return key;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray(target) && isObject(value)) {
    return value;
  }
  return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
  let value;
  for (const prefix of prefixes) {
    value = _resolve(readKey(prefix, prop), scopes);
    if (defined(value)) {
      return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
  }
}
function _resolve(key, scopes) {
  for (const scope of scopes) {
    if (!scope) {
      continue;
    }
    const value = scope[key];
    if (defined(value)) {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys = target._keys;
  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys;
}
function resolveKeysFromAllScopes(scopes) {
  const set2 = /* @__PURE__ */ new Set();
  for (const scope of scopes) {
    for (const key of Object.keys(scope).filter((k) => !k.startsWith("_"))) {
      set2.add(key);
    }
  }
  return Array.from(set2);
}
var EPSILON = Number.EPSILON || 1e-14;
function _isDomSupported() {
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === "[object ShadowRoot]") {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === "string") {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf("%") !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
var getComputedStyle2 = (element) => element.ownerDocument.defaultView.getComputedStyle(element, null);
function getStyle(el, property) {
  return getComputedStyle2(el).getPropertyValue(property);
}
var positions = [
  "top",
  "right",
  "bottom",
  "left"
];
function getPositionedStyle(styles, style, suffix) {
  const result = {};
  suffix = suffix ? "-" + suffix : "";
  for (let i = 0; i < 4; i++) {
    const pos = positions[i];
    result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
var useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(e, canvas) {
  const touches = e.touches;
  const source = touches && touches.length ? touches[0] : e;
  const { offsetX, offsetY } = source;
  let box = false;
  let x, y;
  if (useOffsetPos(offsetX, offsetY, e.target)) {
    x = offsetX;
    y = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x = source.clientX - rect.left;
    y = source.clientY - rect.top;
    box = true;
  }
  return {
    x,
    y,
    box
  };
}
function getRelativePosition(event, chart) {
  if ("native" in event) {
    return event;
  }
  const { canvas, currentDevicePixelRatio } = chart;
  const style = getComputedStyle2(canvas);
  const borderBox = style.boxSizing === "border-box";
  const paddings = getPositionedStyle(style, "padding");
  const borders = getPositionedStyle(style, "border", "width");
  const { x, y, box } = getCanvasPosition(event, canvas);
  const xOffset = paddings.left + (box && borders.left);
  const yOffset = paddings.top + (box && borders.top);
  let { width, height } = chart;
  if (borderBox) {
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  return {
    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === void 0 || height === void 0) {
    const container = _getParentNode(canvas);
    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle = getComputedStyle2(container);
      const containerBorder = getPositionedStyle(containerStyle, "border", "width");
      const containerPadding = getPositionedStyle(containerStyle, "padding");
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
var round1 = (v) => Math.round(v * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
  const style = getComputedStyle2(canvas);
  const margins = getPositionedStyle(style, "margin");
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let { width, height } = containerSize;
  if (style.boxSizing === "content-box") {
    const borders = getPositionedStyle(style, "border", "width");
    const paddings = getPositionedStyle(style, "padding");
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  const maintainHeight = bbWidth !== void 0 || bbHeight !== void 0;
  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
    height = containerSize.height;
    width = round1(Math.floor(height * aspectRatio));
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = Math.floor(chart.height);
  chart.width = Math.floor(chart.width);
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
var supportsEventListenerOptions = function() {
  let passiveSupported = false;
  try {
    const options = {
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    window.addEventListener("test", null, options);
    window.removeEventListener("test", null, options);
  } catch (e) {
  }
  return passiveSupported;
}();
function readUsedSize(element, property) {
  const value = getStyle(element, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : void 0;
}
var getRightToLeftAdapter = function(rectX, width) {
  return {
    x(x) {
      return rectX + rectX + width - x;
    },
    setWidth(w) {
      width = w;
    },
    textAlign(align) {
      if (align === "center") {
        return align;
      }
      return align === "right" ? "left" : "right";
    },
    xPlus(x, value) {
      return x - value;
    },
    leftForLtr(x, itemWidth) {
      return x - itemWidth;
    }
  };
};
var getLeftToRightAdapter = function() {
  return {
    x(x) {
      return x;
    },
    setWidth(w) {
    },
    textAlign(align) {
      return align;
    },
    xPlus(x, value) {
      return x + value;
    },
    leftForLtr(x, _itemWidth) {
      return x;
    }
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  let style, original;
  if (direction === "ltr" || direction === "rtl") {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue("direction"),
      style.getPropertyPriority("direction")
    ];
    style.setProperty("direction", direction, "important");
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== void 0) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty("direction", original[0], original[1]);
  }
}

// node_modules/chart.js/dist/chart.js
var Animator = class {
  constructor() {
    this._request = null;
    this._charts = /* @__PURE__ */ new Map();
    this._running = false;
    this._lastDate = void 0;
  }
  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach((fn) => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }
  _refresh() {
    if (this._request) {
      return;
    }
    this._running = true;
    this._request = requestAnimFrame.call(window, () => {
      this._update();
      this._request = null;
      if (this._running) {
        this._refresh();
      }
    });
  }
  _update(date = Date.now()) {
    let remaining = 0;
    this._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i = items.length - 1;
      let draw = false;
      let item;
      for (; i >= 0; --i) {
        item = items[i];
        if (item._active) {
          if (item._total > anims.duration) {
            anims.duration = item._total;
          }
          item.tick(date);
          draw = true;
        } else {
          items[i] = items[items.length - 1];
          items.pop();
        }
      }
      if (draw) {
        chart.draw();
        this._notify(chart, anims, date, "progress");
      }
      if (!items.length) {
        anims.running = false;
        this._notify(chart, anims, date, "complete");
        anims.initial = false;
      }
      remaining += items.length;
    });
    this._lastDate = date;
    if (remaining === 0) {
      this._running = false;
    }
  }
  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);
    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }
    return anims;
  }
  listen(chart, event, cb) {
    this._getAnims(chart).listeners[event].push(cb);
  }
  add(chart, items) {
    if (!items || !items.length) {
      return;
    }
    this._getAnims(chart).items.push(...items);
  }
  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }
  start(chart) {
    const anims = this._charts.get(chart);
    if (!anims) {
      return;
    }
    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
    this._refresh();
  }
  running(chart) {
    if (!this._running) {
      return false;
    }
    const anims = this._charts.get(chart);
    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }
    return true;
  }
  stop(chart) {
    const anims = this._charts.get(chart);
    if (!anims || !anims.items.length) {
      return;
    }
    const items = anims.items;
    let i = items.length - 1;
    for (; i >= 0; --i) {
      items[i].cancel();
    }
    anims.items = [];
    this._notify(chart, anims, Date.now(), "complete");
  }
  remove(chart) {
    return this._charts.delete(chart);
  }
};
var animator = /* @__PURE__ */ new Animator();
var transparent = "transparent";
var interpolators = {
  boolean(from2, to2, factor) {
    return factor > 0.5 ? to2 : from2;
  },
  color(from2, to2, factor) {
    const c0 = color(from2 || transparent);
    const c1 = c0.valid && color(to2 || transparent);
    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to2;
  },
  number(from2, to2, factor) {
    return from2 + (to2 - from2) * factor;
  }
};
var Animation = class {
  constructor(cfg, target, prop, to2) {
    const currentValue = target[prop];
    to2 = resolve([
      cfg.to,
      to2,
      currentValue,
      cfg.from
    ]);
    const from2 = resolve([
      cfg.from,
      currentValue,
      to2
    ]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from2];
    this._easing = effects[cfg.easing] || effects.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from2;
    this._to = to2;
    this._promises = void 0;
  }
  active() {
    return this._active;
  }
  update(cfg, to2, date) {
    if (this._active) {
      this._notify(false);
      const currentValue = this._target[this._prop];
      const elapsed = date - this._start;
      const remain = this._duration - elapsed;
      this._start = date;
      this._duration = Math.floor(Math.max(remain, cfg.duration));
      this._total += elapsed;
      this._loop = !!cfg.loop;
      this._to = resolve([
        cfg.to,
        to2,
        currentValue,
        cfg.from
      ]);
      this._from = resolve([
        cfg.from,
        currentValue,
        to2
      ]);
    }
  }
  cancel() {
    if (this._active) {
      this.tick(Date.now());
      this._active = false;
      this._notify(false);
    }
  }
  tick(date) {
    const elapsed = date - this._start;
    const duration = this._duration;
    const prop = this._prop;
    const from2 = this._from;
    const loop = this._loop;
    const to2 = this._to;
    let factor;
    this._active = from2 !== to2 && (loop || elapsed < duration);
    if (!this._active) {
      this._target[prop] = to2;
      this._notify(true);
      return;
    }
    if (elapsed < 0) {
      this._target[prop] = from2;
      return;
    }
    factor = elapsed / duration % 2;
    factor = loop && factor > 1 ? 2 - factor : factor;
    factor = this._easing(Math.min(1, Math.max(0, factor)));
    this._target[prop] = this._fn(from2, to2, factor);
  }
  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({
        res,
        rej
      });
    });
  }
  _notify(resolved) {
    const method = resolved ? "res" : "rej";
    const promises = this._promises || [];
    for (let i = 0; i < promises.length; i++) {
      promises[i][method]();
    }
  }
};
var Animations = class {
  constructor(chart, config) {
    this._chart = chart;
    this._properties = /* @__PURE__ */ new Map();
    this.configure(config);
  }
  configure(config) {
    if (!isObject(config)) {
      return;
    }
    const animationOptions = Object.keys(defaults.animation);
    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config).forEach((key) => {
      const cfg = config[key];
      if (!isObject(cfg)) {
        return;
      }
      const resolved = {};
      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }
      (isArray(cfg.properties) && cfg.properties || [
        key
      ]).forEach((prop) => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }
  _animateOptions(target, values) {
    const newOptions = values.options;
    const options = resolveTargetOptions(target, newOptions);
    if (!options) {
      return [];
    }
    const animations = this._createAnimations(options, newOptions);
    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {
      });
    }
    return animations;
  }
  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations = [];
    const running = target.$animations || (target.$animations = {});
    const props = Object.keys(values);
    const date = Date.now();
    let i;
    for (i = props.length - 1; i >= 0; --i) {
      const prop = props[i];
      if (prop.charAt(0) === "$") {
        continue;
      }
      if (prop === "options") {
        animations.push(...this._animateOptions(target, values));
        continue;
      }
      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);
      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }
      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }
      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations.push(animation);
    }
    return animations;
  }
  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }
    const animations = this._createAnimations(target, values);
    if (animations.length) {
      animator.add(this._chart, animations);
      return true;
    }
  }
};
function awaitAll(animations, properties) {
  const running = [];
  const keys = Object.keys(properties);
  for (let i = 0; i < keys.length; i++) {
    const anim = animations[keys[i]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options = target.options;
  if (!options) {
    target.options = newOptions;
    return;
  }
  if (options.$shared) {
    target.options = options = Object.assign({}, options, {
      $shared: false,
      $animations: {}
    });
  }
  return options;
}
function scaleClip(scale, allowedOverflow) {
  const opts = scale && scale.options || {};
  const reverse = opts.reverse;
  const min = opts.min === void 0 ? allowedOverflow : 0;
  const max = opts.max === void 0 ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x = scaleClip(xScale, allowedOverflow);
  const y = scaleClip(yScale, allowedOverflow);
  return {
    top: y.end,
    right: x.end,
    bottom: y.start,
    left: x.start
  };
}
function toClip(value) {
  let t2, r, b, l;
  if (isObject(value)) {
    t2 = value.top;
    r = value.right;
    b = value.bottom;
    l = value.left;
  } else {
    t2 = r = b = l = value;
  }
  return {
    top: t2,
    right: r,
    bottom: b,
    left: l,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i, ilen;
  for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    keys.push(metasets[i].index);
  }
  return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
  const keys = stack.keys;
  const singleMode = options.mode === "single";
  let i, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    datasetIndex = +keys[i];
    if (datasetIndex === dsIndex) {
      if (options.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {
      value += otherValue;
    }
  }
  return value;
}
function convertObjectDataToArray(data) {
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i, ilen, key;
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    key = keys[i];
    adata[i] = {
      x: key,
      y: data[key]
    };
  }
  return adata;
}
function isStacked(scale, meta) {
  const stacked = scale && scale.options.stacked;
  return stacked || stacked === void 0 && meta.stack !== void 0;
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
  const { min, max, minDefined, maxDefined } = scale.getUserBounds();
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {
    const value = stack[meta.index];
    if (positive && value > 0 || !positive && value < 0) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const { chart, _cachedMeta: meta } = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const { iScale, vScale, index: datasetIndex } = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i = 0; i < ilen; ++i) {
    const item = parsed[i];
    const { [iAxis]: index, [vAxis]: value } = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
    const visualValues = stack._visualValues || (stack._visualValues = {});
    visualValues[datasetIndex] = value;
  }
}
function getFirstScaleId(chart, axis) {
  const scales = chart.scales;
  return Object.keys(scales).filter((key) => scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index) {
  return createContext(parent, {
    active: false,
    dataset: void 0,
    datasetIndex: index,
    index,
    mode: "default",
    type: "dataset"
  });
}
function createDataContext(parent, index, element) {
  return createContext(parent, {
    active: false,
    dataIndex: index,
    parsed: void 0,
    raw: void 0,
    element,
    index,
    mode: "default",
    type: "data"
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === void 0 || stacks[axis][datasetIndex] === void 0) {
      return;
    }
    delete stacks[axis][datasetIndex];
    if (stacks[axis]._visualValues !== void 0 && stacks[axis]._visualValues[datasetIndex] !== void 0) {
      delete stacks[axis]._visualValues[datasetIndex];
    }
  }
}
var isDirectUpdateMode = (mode) => mode === "reset" || mode === "none";
var cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
var createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {
  keys: getSortedDatasetIndices(chart, true),
  values: null
};
var DatasetController = class {
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = void 0;
    this._parsing = false;
    this._data = void 0;
    this._objectData = void 0;
    this._sharedOptions = void 0;
    this._drawStart = void 0;
    this._drawCount = void 0;
    this.enableOptionSharing = false;
    this.supportsDecimation = false;
    this.$context = void 0;
    this._syncList = [];
    this.datasetElementType = new.target.datasetElementType;
    this.dataElementType = new.target.dataElementType;
    this.initialize();
  }
  initialize() {
    const meta = this._cachedMeta;
    this.configure();
    this.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    this.addElements();
    if (this.options.fill && !this.chart.isPluginEnabled("filler")) {
      console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
  }
  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }
    this.index = datasetIndex;
  }
  linkScales() {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    const chooseId = (axis, x, y, r) => axis === "x" ? x : axis === "r" ? r : y;
    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, "x"));
    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, "y"));
    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, "r"));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = this.getScaleForId(xid);
    meta.yScale = this.getScaleForId(yid);
    meta.rScale = this.getScaleForId(rid);
    meta.iScale = this.getScaleForId(iid);
    meta.vScale = this.getScaleForId(vid);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }
  _getOtherScale(scale) {
    const meta = this._cachedMeta;
    return scale === meta.iScale ? meta.vScale : meta.iScale;
  }
  reset() {
    this._update("reset");
  }
  _destroy() {
    const meta = this._cachedMeta;
    if (this._data) {
      unlistenArrayEvents(this._data, this);
    }
    if (meta._stacked) {
      clearStacks(meta);
    }
  }
  _dataCheck() {
    const dataset = this.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = this._data;
    if (isObject(data)) {
      this._data = convertObjectDataToArray(data);
    } else if (_data !== data) {
      if (_data) {
        unlistenArrayEvents(_data, this);
        const meta = this._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }
      if (data && Object.isExtensible(data)) {
        listenArrayEvents(data, this);
      }
      this._syncList = [];
      this._data = data;
    }
  }
  addElements() {
    const meta = this._cachedMeta;
    this._dataCheck();
    if (this.datasetElementType) {
      meta.dataset = new this.datasetElementType();
    }
  }
  buildOrUpdateElements(resetNewElements) {
    const meta = this._cachedMeta;
    const dataset = this.getDataset();
    let stackChanged = false;
    this._dataCheck();
    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);
    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }
    this._resyncElements(resetNewElements);
    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(this, meta._parsed);
    }
  }
  configure() {
    const config = this.chart.config;
    const scopeKeys = config.datasetScopeKeys(this._type);
    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
    this.options = config.createResolver(scopes, this.getContext());
    this._parsing = this.options.parsing;
    this._cachedDataOpts = {};
  }
  parse(start, count) {
    const { _cachedMeta: meta, _data: data } = this;
    const { iScale, _stacked } = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev = start > 0 && meta._parsed[start - 1];
    let i, cur, parsed;
    if (this._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if (isArray(data[start])) {
        parsed = this.parseArrayData(meta, data, start, count);
      } else if (isObject(data[start])) {
        parsed = this.parseObjectData(meta, data, start, count);
      } else {
        parsed = this.parsePrimitiveData(meta, data, start, count);
      }
      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
      for (i = 0; i < count; ++i) {
        meta._parsed[i + start] = cur = parsed[i];
        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }
          prev = cur;
        }
      }
      meta._sorted = sorted;
    }
    if (_stacked) {
      updateStacks(this, parsed);
    }
  }
  parsePrimitiveData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i, ilen, index;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      parsed[i] = {
        [iAxis]: singleScale || iScale.parse(labels[index], index),
        [vAxis]: vScale.parse(data[index], index)
      };
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      item = data[index];
      parsed[i] = {
        x: xScale.parse(item[0], index),
        y: yScale.parse(item[1], index)
      };
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const { xScale, yScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      item = data[index];
      parsed[i] = {
        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),
        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)
      };
    }
    return parsed;
  }
  getParsed(index) {
    return this._cachedMeta._parsed[index];
  }
  getDataElement(index) {
    return this._cachedMeta.data[index];
  }
  applyStack(scale, parsed, mode) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale.axis]._visualValues
    };
    return applyStack(stack, value, meta.index, {
      mode
    });
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    const parsedValue = parsed[scale.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale.axis];
    if (stack && values) {
      stack.values = values;
      value = applyStack(stack, parsedValue, this._cachedMeta.index);
    }
    range.min = Math.min(range.min, value);
    range.max = Math.max(range.max, value);
  }
  getMinMax(scale, canStack) {
    const meta = this._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale === meta.iScale;
    const ilen = _parsed.length;
    const otherScale = this._getOtherScale(scale);
    const stack = createStack(canStack, meta, this.chart);
    const range = {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    };
    const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
    let i, parsed;
    function _skip() {
      parsed = _parsed[i];
      const otherValue = parsed[otherScale.axis];
      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
    }
    for (i = 0; i < ilen; ++i) {
      if (_skip()) {
        continue;
      }
      this.updateRangeFromParsed(range, scale, parsed, stack);
      if (sorted) {
        break;
      }
    }
    if (sorted) {
      for (i = ilen - 1; i >= 0; --i) {
        if (_skip()) {
          continue;
        }
        this.updateRangeFromParsed(range, scale, parsed, stack);
        break;
      }
    }
    return range;
  }
  getAllParsedValues(scale) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i, ilen, value;
    for (i = 0, ilen = parsed.length; i < ilen; ++i) {
      value = parsed[i][scale.axis];
      if (isNumberFinite(value)) {
        values.push(value);
      }
    }
    return values;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(index) {
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = this.getParsed(index);
    return {
      label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
      value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
    };
  }
  _update(mode) {
    const meta = this._cachedMeta;
    this.update(mode || "default");
    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
  }
  update(mode) {
  }
  draw() {
    const ctx = this._ctx;
    const chart = this.chart;
    const meta = this._cachedMeta;
    const elements = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = this._drawStart || 0;
    const count = this._drawCount || elements.length - start;
    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
    let i;
    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }
    for (i = start; i < start + count; ++i) {
      const element = elements[i];
      if (element.hidden) {
        continue;
      }
      if (element.active && drawActiveElementsOnTop) {
        active.push(element);
      } else {
        element.draw(ctx, area);
      }
    }
    for (i = 0; i < active.length; ++i) {
      active[i].draw(ctx, area);
    }
  }
  getStyle(index, active) {
    const mode = active ? "active" : "default";
    return index === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
  }
  getContext(index, active, mode) {
    const dataset = this.getDataset();
    let context;
    if (index >= 0 && index < this._cachedMeta.data.length) {
      const element = this._cachedMeta.data[index];
      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
      context.parsed = this.getParsed(index);
      context.raw = dataset.data[index];
      context.index = context.dataIndex = index;
    } else {
      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
      context.dataset = dataset;
      context.index = context.datasetIndex = this.index;
    }
    context.active = !!active;
    context.mode = mode;
    return context;
  }
  resolveDatasetElementOptions(mode) {
    return this._resolveElementOptions(this.datasetElementType.id, mode);
  }
  resolveDataElementOptions(index, mode) {
    return this._resolveElementOptions(this.dataElementType.id, mode, index);
  }
  _resolveElementOptions(elementType, mode = "default", index) {
    const active = mode === "active";
    const cache = this._cachedDataOpts;
    const cacheKey = elementType + "-" + mode;
    const cached = cache[cacheKey];
    const sharing = this.enableOptionSharing && defined(index);
    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }
    const config = this.chart.config;
    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
    const prefixes = active ? [
      `${elementType}Hover`,
      "hover",
      elementType,
      ""
    ] : [
      elementType,
      ""
    ];
    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
    const names2 = Object.keys(defaults.elements[elementType]);
    const context = () => this.getContext(index, active, mode);
    const values = config.resolveNamedOptions(scopes, names2, context, prefixes);
    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }
    return values;
  }
  _resolveAnimations(index, transition, active) {
    const chart = this.chart;
    const cache = this._cachedDataOpts;
    const cacheKey = `animation-${transition}`;
    const cached = cache[cacheKey];
    if (cached) {
      return cached;
    }
    let options;
    if (chart.options.animation !== false) {
      const config = this.chart.config;
      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
      options = config.createResolver(scopes, this.getContext(index, active, transition));
    }
    const animations = new Animations(chart, options && options.animations);
    if (options && options._cacheable) {
      cache[cacheKey] = Object.freeze(animations);
    }
    return animations;
  }
  getSharedOptions(options) {
    if (!options.$shared) {
      return;
    }
    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
  }
  includeOptions(mode, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
  }
  _getSharedOptions(start, mode) {
    const firstOpts = this.resolveDataElementOptions(start, mode);
    const previouslySharedOptions = this._sharedOptions;
    const sharedOptions = this.getSharedOptions(firstOpts);
    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
    this.updateSharedOptions(sharedOptions, mode, firstOpts);
    return {
      sharedOptions,
      includeOptions
    };
  }
  updateElement(element, index, properties, mode) {
    if (isDirectUpdateMode(mode)) {
      Object.assign(element, properties);
    } else {
      this._resolveAnimations(index, mode).update(element, properties);
    }
  }
  updateSharedOptions(sharedOptions, mode, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode)) {
      this._resolveAnimations(void 0, mode).update(sharedOptions, newOptions);
    }
  }
  _setStyle(element, index, mode, active) {
    element.active = active;
    const options = this.getStyle(index, active);
    this._resolveAnimations(index, mode, active).update(element, {
      options: !active && this.getSharedOptions(options) || options
    });
  }
  removeHoverStyle(element, datasetIndex, index) {
    this._setStyle(element, index, "active", false);
  }
  setHoverStyle(element, datasetIndex, index) {
    this._setStyle(element, index, "active", true);
  }
  _removeDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, void 0, "active", false);
    }
  }
  _setDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, void 0, "active", true);
    }
  }
  _resyncElements(resetNewElements) {
    const data = this._data;
    const elements = this._cachedMeta.data;
    for (const [method, arg1, arg2] of this._syncList) {
      this[method](arg1, arg2);
    }
    this._syncList = [];
    const numMeta = elements.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);
    if (count) {
      this.parse(0, count);
    }
    if (numData > numMeta) {
      this._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      this._removeElements(numData, numMeta - numData);
    }
  }
  _insertElements(start, count, resetNewElements = true) {
    const meta = this._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i;
    const move = (arr) => {
      arr.length += count;
      for (i = arr.length - 1; i >= end; i--) {
        arr[i] = arr[i - count];
      }
    };
    move(data);
    for (i = start; i < end; ++i) {
      data[i] = new this.dataElementType();
    }
    if (this._parsing) {
      move(meta._parsed);
    }
    this.parse(start, count);
    if (resetNewElements) {
      this.updateElements(data, start, count, "reset");
    }
  }
  updateElements(element, start, count, mode) {
  }
  _removeElements(start, count) {
    const meta = this._cachedMeta;
    if (this._parsing) {
      const removed = meta._parsed.splice(start, count);
      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }
    meta.data.splice(start, count);
  }
  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
    this.chart._dataChanges.push([
      this.index,
      ...args
    ]);
  }
  _onDataPush() {
    const count = arguments.length;
    this._sync([
      "_insertElements",
      this.getDataset().data.length - count,
      count
    ]);
  }
  _onDataPop() {
    this._sync([
      "_removeElements",
      this._cachedMeta.data.length - 1,
      1
    ]);
  }
  _onDataShift() {
    this._sync([
      "_removeElements",
      0,
      1
    ]);
  }
  _onDataSplice(start, count) {
    if (count) {
      this._sync([
        "_removeElements",
        start,
        count
      ]);
    }
    const newCount = arguments.length - 2;
    if (newCount) {
      this._sync([
        "_insertElements",
        start,
        newCount
      ]);
    }
  }
  _onDataUnshift() {
    this._sync([
      "_insertElements",
      0,
      arguments.length
    ]);
  }
};
__publicField(DatasetController, "defaults", {});
__publicField(DatasetController, "datasetElementType", null);
__publicField(DatasetController, "dataElementType", null);
function getAllScaleValues(scale, type) {
  if (!scale._cache.$bar) {
    const visibleMetas = scale.getMatchingVisibleMetas(type);
    let values = [];
    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {
      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
    }
    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));
  }
  return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
  const scale = meta.iScale;
  const values = getAllScaleValues(scale, meta.type);
  let min = scale._length;
  let i, ilen, curr, prev;
  const updateMinAndPrev = () => {
    if (curr === 32767 || curr === -32768) {
      return;
    }
    if (defined(prev)) {
      min = Math.min(min, Math.abs(curr - prev) || min);
    }
    prev = curr;
  };
  for (i = 0, ilen = values.length; i < ilen; ++i) {
    curr = scale.getPixelForValue(values[i]);
    updateMinAndPrev();
  }
  prev = void 0;
  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {
    curr = scale.getPixelForTick(i);
    updateMinAndPrev();
  }
  return min;
}
function computeFitCategoryTraits(index, ruler, options, stackCount) {
  const thickness = options.barThickness;
  let size, ratio;
  if (isNullOrUndef(thickness)) {
    size = ruler.min * options.categoryPercentage;
    ratio = options.barPercentage;
  } else {
    size = thickness * stackCount;
    ratio = 1;
  }
  return {
    chunk: size / stackCount,
    ratio,
    start: ruler.pixels[index] - size / 2
  };
}
function computeFlexCategoryTraits(index, ruler, options, stackCount) {
  const pixels = ruler.pixels;
  const curr = pixels[index];
  let prev = index > 0 ? pixels[index - 1] : null;
  let next = index < pixels.length - 1 ? pixels[index + 1] : null;
  const percent = options.categoryPercentage;
  if (prev === null) {
    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
  }
  if (next === null) {
    next = curr + curr - prev;
  }
  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
  const size = Math.abs(next - prev) / 2 * percent;
  return {
    chunk: size / stackCount,
    ratio: options.barPercentage,
    start
  };
}
function parseFloatBar(entry, item, vScale, i) {
  const startValue = vScale.parse(entry[0], i);
  const endValue = vScale.parse(entry[1], i);
  const min = Math.min(startValue, endValue);
  const max = Math.max(startValue, endValue);
  let barStart = min;
  let barEnd = max;
  if (Math.abs(min) > Math.abs(max)) {
    barStart = max;
    barEnd = min;
  }
  item[vScale.axis] = barEnd;
  item._custom = {
    barStart,
    barEnd,
    start: startValue,
    end: endValue,
    min,
    max
  };
}
function parseValue(entry, item, vScale, i) {
  if (isArray(entry)) {
    parseFloatBar(entry, item, vScale, i);
  } else {
    item[vScale.axis] = vScale.parse(entry, i);
  }
  return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
  const iScale = meta.iScale;
  const vScale = meta.vScale;
  const labels = iScale.getLabels();
  const singleScale = iScale === vScale;
  const parsed = [];
  let i, ilen, item, entry;
  for (i = start, ilen = start + count; i < ilen; ++i) {
    entry = data[i];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
    parsed.push(parseValue(entry, item, vScale, i));
  }
  return parsed;
}
function isFloatBar(custom) {
  return custom && custom.barStart !== void 0 && custom.barEnd !== void 0;
}
function barSign(size, vScale, actualBase) {
  if (size !== 0) {
    return sign(size);
  }
  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
  let reverse, start, end, top, bottom;
  if (properties.horizontal) {
    reverse = properties.base > properties.x;
    start = "left";
    end = "right";
  } else {
    reverse = properties.base < properties.y;
    start = "bottom";
    end = "top";
  }
  if (reverse) {
    top = "end";
    bottom = "start";
  } else {
    top = "start";
    bottom = "end";
  }
  return {
    start,
    end,
    reverse,
    top,
    bottom
  };
}
function setBorderSkipped(properties, options, stack, index) {
  let edge = options.borderSkipped;
  const res = {};
  if (!edge) {
    properties.borderSkipped = res;
    return;
  }
  if (edge === true) {
    properties.borderSkipped = {
      top: true,
      right: true,
      bottom: true,
      left: true
    };
    return;
  }
  const { start, end, reverse, top, bottom } = borderProps(properties);
  if (edge === "middle" && stack) {
    properties.enableBorderRadius = true;
    if ((stack._top || 0) === index) {
      edge = top;
    } else if ((stack._bottom || 0) === index) {
      edge = bottom;
    } else {
      res[parseEdge(bottom, start, end, reverse)] = true;
      edge = top;
    }
  }
  res[parseEdge(edge, start, end, reverse)] = true;
  properties.borderSkipped = res;
}
function parseEdge(edge, a, b, reverse) {
  if (reverse) {
    edge = swap(edge, a, b);
    edge = startEnd(edge, b, a);
  } else {
    edge = startEnd(edge, a, b);
  }
  return edge;
}
function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
  return v === "start" ? start : v === "end" ? end : v;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
  properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
var BarController = class extends DatasetController {
  parsePrimitiveData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseArrayData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseObjectData(meta, data, start, count) {
    const { iScale, vScale } = meta;
    const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
    const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
    const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
    const parsed = [];
    let i, ilen, item, obj;
    for (i = start, ilen = start + count; i < ilen; ++i) {
      obj = data[i];
      item = {};
      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);
      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));
    }
    return parsed;
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    super.updateRangeFromParsed(range, scale, parsed, stack);
    const custom = parsed._custom;
    if (custom && scale === this._cachedMeta.vScale) {
      range.min = Math.min(range.min, custom.min);
      range.max = Math.max(range.max, custom.max);
    }
  }
  getMaxOverflow() {
    return 0;
  }
  getLabelAndValue(index) {
    const meta = this._cachedMeta;
    const { iScale, vScale } = meta;
    const parsed = this.getParsed(index);
    const custom = parsed._custom;
    const value = isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
    return {
      label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
      value
    };
  }
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
    const meta = this._cachedMeta;
    meta.stack = this.getDataset().stack;
  }
  update(mode) {
    const meta = this._cachedMeta;
    this.updateElements(meta.data, 0, meta.data.length, mode);
  }
  updateElements(bars, start, count, mode) {
    const reset2 = mode === "reset";
    const { index, _cachedMeta: { vScale } } = this;
    const base = vScale.getBasePixel();
    const horizontal = vScale.isHorizontal();
    const ruler = this._getRuler();
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    for (let i = start; i < start + count; i++) {
      const parsed = this.getParsed(i);
      const vpixels = reset2 || isNullOrUndef(parsed[vScale.axis]) ? {
        base,
        head: base
      } : this._calculateBarValuePixels(i);
      const ipixels = this._calculateBarIndexPixels(i, ruler);
      const stack = (parsed._stacks || {})[vScale.axis];
      const properties = {
        horizontal,
        base: vpixels.base,
        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
        x: horizontal ? vpixels.head : ipixels.center,
        y: horizontal ? ipixels.center : vpixels.head,
        height: horizontal ? ipixels.size : Math.abs(vpixels.size),
        width: horizontal ? Math.abs(vpixels.size) : ipixels.size
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? "active" : mode);
      }
      const options = properties.options || bars[i].options;
      setBorderSkipped(properties, options, stack, index);
      setInflateAmount(properties, options, ruler.ratio);
      this.updateElement(bars[i], i, properties, mode);
    }
  }
  _getStacks(last, dataIndex) {
    const { iScale } = this._cachedMeta;
    const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta) => meta.controller.options.grouped);
    const stacked = iScale.options.stacked;
    const stacks = [];
    const skipNull = (meta) => {
      const parsed = meta.controller.getParsed(dataIndex);
      const val = parsed && parsed[meta.vScale.axis];
      if (isNullOrUndef(val) || isNaN(val)) {
        return true;
      }
    };
    for (const meta of metasets) {
      if (dataIndex !== void 0 && skipNull(meta)) {
        continue;
      }
      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
        stacks.push(meta.stack);
      }
      if (meta.index === last) {
        break;
      }
    }
    if (!stacks.length) {
      stacks.push(void 0);
    }
    return stacks;
  }
  _getStackCount(index) {
    return this._getStacks(void 0, index).length;
  }
  _getStackIndex(datasetIndex, name2, dataIndex) {
    const stacks = this._getStacks(datasetIndex, dataIndex);
    const index = name2 !== void 0 ? stacks.indexOf(name2) : -1;
    return index === -1 ? stacks.length - 1 : index;
  }
  _getRuler() {
    const opts = this.options;
    const meta = this._cachedMeta;
    const iScale = meta.iScale;
    const pixels = [];
    let i, ilen;
    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {
      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
    }
    const barThickness = opts.barThickness;
    const min = barThickness || computeMinSampleSize(meta);
    return {
      min,
      pixels,
      start: iScale._startPixel,
      end: iScale._endPixel,
      stackCount: this._getStackCount(),
      scale: iScale,
      grouped: opts.grouped,
      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
    };
  }
  _calculateBarValuePixels(index) {
    const { _cachedMeta: { vScale, _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength } } = this;
    const actualBase = baseValue || 0;
    const parsed = this.getParsed(index);
    const custom = parsed._custom;
    const floating = isFloatBar(custom);
    let value = parsed[vScale.axis];
    let start = 0;
    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
    let head, size;
    if (length !== value) {
      start = length - value;
      length = value;
    }
    if (floating) {
      value = custom.barStart;
      length = custom.barEnd - custom.barStart;
      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {
        start = 0;
      }
      start += value;
    }
    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;
    let base = vScale.getPixelForValue(startValue);
    if (this.chart.getDataVisibility(index)) {
      head = vScale.getPixelForValue(start + length);
    } else {
      head = base;
    }
    size = head - base;
    if (Math.abs(size) < minBarLength) {
      size = barSign(size, vScale, actualBase) * minBarLength;
      if (value === actualBase) {
        base -= size / 2;
      }
      const startPixel = vScale.getPixelForDecimal(0);
      const endPixel = vScale.getPixelForDecimal(1);
      const min = Math.min(startPixel, endPixel);
      const max = Math.max(startPixel, endPixel);
      base = Math.max(Math.min(base, max), min);
      head = base + size;
      if (_stacked && !floating) {
        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);
      }
    }
    if (base === vScale.getPixelForValue(actualBase)) {
      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;
      base += halfGrid;
      size -= halfGrid;
    }
    return {
      size,
      base,
      head,
      center: head + size / 2
    };
  }
  _calculateBarIndexPixels(index, ruler) {
    const scale = ruler.scale;
    const options = this.options;
    const skipNull = options.skipNull;
    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);
    let center, size;
    if (ruler.grouped) {
      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
      const range = options.barThickness === "flex" ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);
      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : void 0);
      center = range.start + range.chunk * stackIndex + range.chunk / 2;
      size = Math.min(maxBarThickness, range.chunk * range.ratio);
    } else {
      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
    }
    return {
      base: center - size / 2,
      head: center + size / 2,
      center,
      size
    };
  }
  draw() {
    const meta = this._cachedMeta;
    const vScale = meta.vScale;
    const rects = meta.data;
    const ilen = rects.length;
    let i = 0;
    for (; i < ilen; ++i) {
      if (this.getParsed(i)[vScale.axis] !== null) {
        rects[i].draw(this._ctx);
      }
    }
  }
};
__publicField(BarController, "id", "bar");
__publicField(BarController, "defaults", {
  datasetElementType: false,
  dataElementType: "bar",
  categoryPercentage: 0.8,
  barPercentage: 0.9,
  grouped: true,
  animations: {
    numbers: {
      type: "number",
      properties: [
        "x",
        "y",
        "base",
        "width",
        "height"
      ]
    }
  }
});
__publicField(BarController, "overrides", {
  scales: {
    _index_: {
      type: "category",
      offset: true,
      grid: {
        offset: true
      }
    },
    _value_: {
      type: "linear",
      beginAtZero: true
    }
  }
});
function getRatioAndOffset(rotation, circumference, cutout) {
  let ratioX = 1;
  let ratioY = 1;
  let offsetX = 0;
  let offsetY = 0;
  if (circumference < TAU) {
    const startAngle = rotation;
    const endAngle = startAngle + circumference;
    const startX = Math.cos(startAngle);
    const startY = Math.sin(startAngle);
    const endX = Math.cos(endAngle);
    const endY = Math.sin(endAngle);
    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
    const maxX = calcMax(0, startX, endX);
    const maxY = calcMax(HALF_PI, startY, endY);
    const minX = calcMin(PI, startX, endX);
    const minY = calcMin(PI + HALF_PI, startY, endY);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }
  return {
    ratioX,
    ratioY,
    offsetX,
    offsetY
  };
}
var DoughnutController = class extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.enableOptionSharing = true;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.offsetX = void 0;
    this.offsetY = void 0;
  }
  linkScales() {
  }
  parse(start, count) {
    const data = this.getDataset().data;
    const meta = this._cachedMeta;
    if (this._parsing === false) {
      meta._parsed = data;
    } else {
      let getter = (i2) => +data[i2];
      if (isObject(data[start])) {
        const { key = "value" } = this._parsing;
        getter = (i2) => +resolveObjectKey(data[i2], key);
      }
      let i, ilen;
      for (i = start, ilen = start + count; i < ilen; ++i) {
        meta._parsed[i] = getter(i);
      }
    }
  }
  _getRotation() {
    return toRadians(this.options.rotation - 90);
  }
  _getCircumference() {
    return toRadians(this.options.circumference);
  }
  _getRotationExtents() {
    let min = TAU;
    let max = -TAU;
    for (let i = 0; i < this.chart.data.datasets.length; ++i) {
      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
        const controller = this.chart.getDatasetMeta(i).controller;
        const rotation = controller._getRotation();
        const circumference = controller._getCircumference();
        min = Math.min(min, rotation);
        max = Math.max(max, rotation + circumference);
      }
    }
    return {
      rotation: min,
      circumference: max - min
    };
  }
  update(mode) {
    const chart = this.chart;
    const { chartArea } = chart;
    const meta = this._cachedMeta;
    const arcs = meta.data;
    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);
    const chartWeight = this._getRingWeight(this.index);
    const { circumference, rotation } = this._getRotationExtents();
    const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
    const maxWidth = (chartArea.width - spacing) / ratioX;
    const maxHeight = (chartArea.height - spacing) / ratioY;
    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    const outerRadius = toDimension(this.options.radius, maxRadius);
    const innerRadius = Math.max(outerRadius * cutout, 0);
    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
    this.offsetX = offsetX * outerRadius;
    this.offsetY = offsetY * outerRadius;
    meta.total = this.calculateTotal();
    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  _circumference(i, reset2) {
    const opts = this.options;
    const meta = this._cachedMeta;
    const circumference = this._getCircumference();
    if (reset2 && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
      return 0;
    }
    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);
  }
  updateElements(arcs, start, count, mode) {
    const reset2 = mode === "reset";
    const chart = this.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const animateScale = reset2 && animationOpts.animateScale;
    const innerRadius = animateScale ? 0 : this.innerRadius;
    const outerRadius = animateScale ? 0 : this.outerRadius;
    const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
    let startAngle = this._getRotation();
    let i;
    for (i = 0; i < start; ++i) {
      startAngle += this._circumference(i, reset2);
    }
    for (i = start; i < start + count; ++i) {
      const circumference = this._circumference(i, reset2);
      const arc = arcs[i];
      const properties = {
        x: centerX + this.offsetX,
        y: centerY + this.offsetY,
        startAngle,
        endAngle: startAngle + circumference,
        circumference,
        outerRadius,
        innerRadius
      };
      if (includeOptions) {
        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? "active" : mode);
      }
      startAngle += circumference;
      this.updateElement(arc, i, properties, mode);
    }
  }
  calculateTotal() {
    const meta = this._cachedMeta;
    const metaData = meta.data;
    let total = 0;
    let i;
    for (i = 0; i < metaData.length; i++) {
      const value = meta._parsed[i];
      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
        total += Math.abs(value);
      }
    }
    return total;
  }
  calculateCircumference(value) {
    const total = this._cachedMeta.total;
    if (total > 0 && !isNaN(value)) {
      return TAU * (Math.abs(value) / total);
    }
    return 0;
  }
  getLabelAndValue(index) {
    const meta = this._cachedMeta;
    const chart = this.chart;
    const labels = chart.data.labels || [];
    const value = formatNumber(meta._parsed[index], chart.options.locale);
    return {
      label: labels[index] || "",
      value
    };
  }
  getMaxBorderWidth(arcs) {
    let max = 0;
    const chart = this.chart;
    let i, ilen, meta, controller, options;
    if (!arcs) {
      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
        if (chart.isDatasetVisible(i)) {
          meta = chart.getDatasetMeta(i);
          arcs = meta.data;
          controller = meta.controller;
          break;
        }
      }
    }
    if (!arcs) {
      return 0;
    }
    for (i = 0, ilen = arcs.length; i < ilen; ++i) {
      options = controller.resolveDataElementOptions(i);
      if (options.borderAlign !== "inner") {
        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
      }
    }
    return max;
  }
  getMaxOffset(arcs) {
    let max = 0;
    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {
      const options = this.resolveDataElementOptions(i);
      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
    }
    return max;
  }
  _getRingWeightOffset(datasetIndex) {
    let ringWeightOffset = 0;
    for (let i = 0; i < datasetIndex; ++i) {
      if (this.chart.isDatasetVisible(i)) {
        ringWeightOffset += this._getRingWeight(i);
      }
    }
    return ringWeightOffset;
  }
  _getRingWeight(datasetIndex) {
    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);
  }
  _getVisibleDatasetWeightTotal() {
    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
  }
};
__publicField(DoughnutController, "id", "doughnut");
__publicField(DoughnutController, "defaults", {
  datasetElementType: false,
  dataElementType: "arc",
  animation: {
    animateRotate: true,
    animateScale: false
  },
  animations: {
    numbers: {
      type: "number",
      properties: [
        "circumference",
        "endAngle",
        "innerRadius",
        "outerRadius",
        "startAngle",
        "x",
        "y",
        "offset",
        "borderWidth",
        "spacing"
      ]
    }
  },
  cutout: "50%",
  rotation: 0,
  circumference: 360,
  radius: "100%",
  spacing: 0,
  indexAxis: "r"
});
__publicField(DoughnutController, "descriptors", {
  _scriptable: (name2) => name2 !== "spacing",
  _indexable: (name2) => name2 !== "spacing"
});
__publicField(DoughnutController, "overrides", {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const { labels: { pointStyle, color: color2 } } = chart.legend.options;
            return data.labels.map((label, i) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                fontColor: color2,
                lineWidth: style.borderWidth,
                pointStyle,
                hidden: !chart.getDataVisibility(i),
                index: i
              };
            });
          }
          return [];
        }
      },
      onClick(e, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    }
  }
});
var PieController = class extends DoughnutController {
};
__publicField(PieController, "id", "pie");
__publicField(PieController, "defaults", {
  cutout: 0,
  rotation: 0,
  circumference: 360,
  radius: "100%"
});
function abstract() {
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
var DateAdapterBase = class {
  /**
  * Override default date adapter methods.
  * Accepts type parameter to define options type.
  * @example
  * Chart._adapters._date.override<{myAdapterOption: string}>({
  *   init() {
  *     console.log(this.options.myAdapterOption);
  *   }
  * })
  */
  static override(members) {
    Object.assign(DateAdapterBase.prototype, members);
  }
  constructor(options) {
    this.options = options || {};
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  init() {
  }
  formats() {
    return abstract();
  }
  parse() {
    return abstract();
  }
  format() {
    return abstract();
  }
  add() {
    return abstract();
  }
  diff() {
    return abstract();
  }
  startOf() {
    return abstract();
  }
  endOf() {
    return abstract();
  }
};
var adapters = {
  _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
  const { controller, data, _sorted } = metaset;
  const iScale = controller._cachedMeta.iScale;
  if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;
    if (!intersect) {
      return lookupMethod(data, axis, value);
    } else if (controller._sharedOptions) {
      const el = data[0];
      const range = typeof el.getRange === "function" && el.getRange(axis);
      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {
          lo: start.lo,
          hi: end.hi
        };
      }
    }
  }
  return {
    lo: 0,
    hi: data.length - 1
  };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position[axis];
  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
    const { index, data } = metasets[i];
    const { lo, hi } = binarySearch(metasets[i], axis, value, intersect);
    for (let j = lo; j <= hi; ++j) {
      const element = data[j];
      if (!element.skip) {
        handler(element, index, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf("x") !== -1;
  const useY = axis.indexOf("y") !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
  const items = [];
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return items;
  }
  const evaluationFunc = function(element, datasetIndex, index) {
    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {
      return;
    }
    if (element.inRange(position.x, position.y, useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index
      });
    }
  };
  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
  return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
  let items = [];
  function evaluationFunc(element, datasetIndex, index) {
    const { startAngle, endAngle } = element.getProps([
      "startAngle",
      "endAngle"
    ], useFinalPosition);
    const { angle } = getAngleFromPoint(element, {
      x: position.x,
      y: position.y
    });
    if (_angleBetween(angle, startAngle, endAngle)) {
      items.push({
        element,
        datasetIndex,
        index
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  let items = [];
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  function evaluationFunc(element, datasetIndex, index) {
    const inRange2 = element.inRange(position.x, position.y, useFinalPosition);
    if (intersect && !inRange2) {
      return;
    }
    const center = element.getCenterPoint(useFinalPosition);
    const pointInArea = !!includeInvisible || chart.isPointInArea(center);
    if (!pointInArea && !inRange2) {
      return;
    }
    const distance = distanceMetric(position, center);
    if (distance < minDistance) {
      items = [
        {
          element,
          datasetIndex,
          index
        }
      ];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({
        element,
        datasetIndex,
        index
      });
    }
  }
  evaluateInteractionItems(chart, axis, position, evaluationFunc);
  return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
  if (!includeInvisible && !chart.isPointInArea(position)) {
    return [];
  }
  return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
  const items = [];
  const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
  let intersectsItem = false;
  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {
    if (element[rangeMethod](position[axis], useFinalPosition)) {
      items.push({
        element,
        datasetIndex,
        index
      });
      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
    }
  });
  if (intersect && !intersectsItem) {
    return [];
  }
  return items;
}
var Interaction = {
  evaluateInteractionItems,
  modes: {
    index(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || "x";
      const includeInvisible = options.includeInvisible || false;
      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      const elements = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach((meta) => {
        const index = items[0].index;
        const element = meta.data[index];
        if (element && !element.skip) {
          elements.push({
            element,
            datasetIndex: meta.index,
            index
          });
        }
      });
      return elements;
    },
    dataset(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (let i = 0; i < data.length; ++i) {
          items.push({
            element: data[i],
            datasetIndex,
            index: i
          });
        }
      }
      return items;
    },
    point(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
    },
    nearest(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || "xy";
      const includeInvisible = options.includeInvisible || false;
      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
    },
    x(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      return getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
    },
    y(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      return getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
    }
  }
};
var STATIC_POSITIONS = [
  "left",
  "top",
  "right",
  "bottom"
];
function filterByPosition(array, position) {
  return array.filter((v) => v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter((v) => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
  return array.sort((a, b) => {
    const v0 = reverse ? b : a;
    const v1 = reverse ? a : b;
    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i, ilen, box, pos, stack, stackWeight;
  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    box = boxes[i];
    ({ position: pos, options: { stack, stackWeight = 1 } } = box);
    layoutBoxes.push({
      index: i,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && pos + stack,
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts2) {
  const stacks = {};
  for (const wrap of layouts2) {
    const { stack, pos, stackWeight } = wrap;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts2, params) {
  const stacks = buildStacks(layouts2);
  const { vBoxMaxWidth, hBoxMaxHeight } = params;
  let i, ilen, layout;
  for (i = 0, ilen = layouts2.length; i < ilen; ++i) {
    layout = layouts2[i];
    const { fullSize } = layout.box;
    const stack = stacks[layout.stack];
    const factor = stack && layout.stackWeight / stack.weight;
    if (layout.horizontal) {
      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout.height = hBoxMaxHeight;
    } else {
      layout.width = vBoxMaxWidth;
      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter((wrap) => wrap.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
  const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, "chartArea"),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a, b) {
  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
  const { pos, box } = layout;
  const maxPadding = chartArea.maxPadding;
  if (!isObject(pos)) {
    if (layout.size) {
      chartArea[pos] -= layout.size;
    }
    const stack = stacks[layout.stack] || {
      size: 0,
      count: 1
    };
    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
    layout.size = stack.size / stack.count;
    chartArea[pos] += layout.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout.horizontal ? {
    same: widthChanged,
    other: heightChanged
  } : {
    same: heightChanged,
    other: widthChanged
  };
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos("top");
  chartArea.x += updatePos("left");
  updatePos("right");
  updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions2) {
    const margin = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    positions2.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal ? marginForPositions([
    "left",
    "right"
  ]) : marginForPositions([
    "top",
    "bottom"
  ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i, ilen, layout, box, refit, changed;
  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
    layout = boxes[i];
    box = layout.box;
    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
    const { same, other } = updateDims(chartArea, params, layout, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let { x, y } = chartArea;
  for (const layout of boxes) {
    const box = layout.box;
    const stack = stacks[layout.stack] || {
      count: 1,
      placed: 0,
      weight: 1
    };
    const weight = layout.stackWeight / stack.weight || 1;
    if (layout.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if (defined(stack.start)) {
        y = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y, width, height);
      }
      stack.start = y;
      stack.placed += width;
      y = box.bottom;
    } else {
      const height1 = chartArea.h * weight;
      const width1 = stack.size || box.width;
      if (defined(stack.start)) {
        x = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);
      }
      stack.start = x;
      stack.placed += height1;
      x = box.right;
    }
  }
  chartArea.x = x;
  chartArea.y = y;
}
var layouts = {
  addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item.fullSize = item.fullSize || false;
    item.position = item.position || "top";
    item.weight = item.weight || 0;
    item._layers = item._layers || function() {
      return [
        {
          z: 0,
          draw(chartArea) {
            item.draw(chartArea);
          }
        }
      ];
    };
    chart.boxes.push(item);
  },
  removeBox(chart, layoutItem) {
    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index !== -1) {
      chart.boxes.splice(index, 1);
    }
  },
  configure(chart, item, options) {
    item.fullSize = options.fullSize;
    item.position = options.position;
    item.weight = options.weight;
  },
  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }
    const padding = toPadding(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    each(chart.boxes, (box) => {
      if (typeof box.beforeLayout === "function") {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, toPadding(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);
    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w
    };
    each(boxes.chartArea, (layout) => {
      const box = layout.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h, {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      });
    });
  }
};
var BasePlatform = class {
  acquireContext(canvas, aspectRatio) {
  }
  releaseContext(context) {
    return false;
  }
  addEventListener(chart, type, listener) {
  }
  removeEventListener(chart, type, listener) {
  }
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(element, width, height, aspectRatio) {
    width = Math.max(0, width || element.width);
    height = height || element.height;
    return {
      width,
      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
    };
  }
  isAttached(canvas) {
    return true;
  }
  updateConfig(config) {
  }
};
var BasicPlatform = class extends BasePlatform {
  acquireContext(item) {
    return item && item.getContext && item.getContext("2d") || null;
  }
  updateConfig(config) {
    config.options.animation = false;
  }
};
var EXPANDO_KEY = "$chartjs";
var EVENT_TYPES = {
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
};
var isNullOrEmpty = (value) => value === null || value === "";
function initCanvas(canvas, aspectRatio) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute("height");
  const renderWidth = canvas.getAttribute("width");
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || "block";
  style.boxSizing = style.boxSizing || "border-box";
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = readUsedSize(canvas, "width");
    if (displayWidth !== void 0) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === "") {
      canvas.height = canvas.width / (aspectRatio || 2);
    } else {
      const displayHeight = readUsedSize(canvas, "height");
      if (displayHeight !== void 0) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
var eventListenerOptions = supportsEventListenerOptions ? {
  passive: true
} : false;
function addListener(node, type, listener) {
  node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(chart, type, listener) {
  chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}
function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES[event.type] || event.type;
  const { x, y } = getRelativePosition(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x !== void 0 ? x : null,
    y: y !== void 0 ? y : null
  };
}
function nodeListContains(nodeList, canvas) {
  for (const node of nodeList) {
    if (node === canvas || node.contains(canvas)) {
      return true;
    }
  }
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.addedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const observer = new MutationObserver((entries) => {
    let trigger = false;
    for (const entry of entries) {
      trigger = trigger || nodeListContains(entry.removedNodes, canvas);
      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
    }
    if (trigger) {
      listener();
    }
  });
  observer.observe(document, {
    childList: true,
    subtree: true
  });
  return observer;
}
var drpListeningCharts = /* @__PURE__ */ new Map();
var oldDevicePixelRatio = 0;
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener("resize", onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener("resize", onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && _getParentNode(canvas);
  if (!container) {
    return;
  }
  const resize = throttled((width, height) => {
    const w = container.clientWidth;
    listener(width, height);
    if (w < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver((entries) => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === "resize") {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = throttled((event) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart);
  addListener(canvas, type, proxy);
  return proxy;
}
var DomPlatform = class extends BasePlatform {
  acquireContext(canvas, aspectRatio) {
    const context = canvas && canvas.getContext && canvas.getContext("2d");
    if (context && context.canvas === canvas) {
      initCanvas(canvas, aspectRatio);
      return context;
    }
    return null;
  }
  releaseContext(context) {
    const canvas = context.canvas;
    if (!canvas[EXPANDO_KEY]) {
      return false;
    }
    const initial = canvas[EXPANDO_KEY].initial;
    [
      "height",
      "width"
    ].forEach((prop) => {
      const value = initial[prop];
      if (isNullOrUndef(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach((key) => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }
  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler = handlers[type] || createProxyAndListen;
    proxies[type] = handler(chart, type, listener);
  }
  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];
    if (!proxy) {
      return;
    }
    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler = handlers[type] || removeListener;
    handler(chart, type, proxy);
    proxies[type] = void 0;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(canvas, width, height, aspectRatio) {
    return getMaximumSize(canvas, width, height, aspectRatio);
  }
  isAttached(canvas) {
    const container = _getParentNode(canvas);
    return !!(container && container.isConnected);
  }
};
function _detectPlatform(canvas) {
  if (!_isDomSupported() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) {
    return BasicPlatform;
  }
  return DomPlatform;
}
var Element = class {
  constructor() {
    __publicField(this, "active", false);
  }
  tooltipPosition(useFinalPosition) {
    const { x, y } = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    return {
      x,
      y
    };
  }
  hasValue() {
    return isNumber(this.x) && isNumber(this.y);
  }
  getProps(props, final) {
    const anims = this.$animations;
    if (!final || !anims) {
      return this;
    }
    const ret = {};
    props.forEach((prop) => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
    });
    return ret;
  }
};
__publicField(Element, "defaults", {});
__publicField(Element, "defaultRoutes");
function autoSkip(scale, ticks) {
  const tickOpts = scale.options.ticks;
  const determinedMaxTicks = determineMaxTicks(scale);
  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
    }
    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing);
  return newTicks;
}
function determineMaxTicks(scale) {
  const offset = scale.options.offset;
  const tickLength = scale._tickSize();
  const maxScale = scale._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }
  const factors = _factorize(evenMajorSpacing);
  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {
    const factor = factors[i];
    if (factor > spacing) {
      return factor;
    }
  }
  return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i, ilen;
  for (i = 0, ilen = ticks.length; i < ilen; i++) {
    if (ticks[i].major) {
      result.push(i);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
  let count = 0;
  let next = majorIndices[0];
  let i;
  spacing = Math.ceil(spacing);
  for (i = 0; i < ticks.length; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = majorIndices[count * spacing];
    }
  }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  const start = valueOrDefault(majorStart, 0);
  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length, i, next;
  spacing = Math.ceil(spacing);
  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }
  next = start;
  while (next < 0) {
    count++;
    next = Math.round(start + count * spacing);
  }
  for (i = Math.max(start, 0); i < end; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = Math.round(start + count * spacing);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i = 1; i < len; ++i) {
    if (arr[i] - arr[i - 1] !== diff) {
      return false;
    }
  }
  return diff;
}
var reverseAlign = (align) => align === "left" ? "right" : align === "right" ? "left" : align;
var offsetFromEdge = (scale, edge, offset) => edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset;
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i = 0;
  for (; i < len; i += increment) {
    result.push(arr[Math.floor(i)]);
  }
  return result;
}
function getPixelForGridLine(scale, index, offsetGridLines) {
  const length = scale.ticks.length;
  const validIndex2 = Math.min(index, length - 1);
  const start = scale._startPixel;
  const end = scale._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale.getPixelForTick(validIndex2);
  let offset;
  if (offsetGridLines) {
    if (length === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index === 0) {
      offset = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale.getPixelForTick(validIndex2 - 1)) / 2;
    }
    lineValue += validIndex2 < index ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length) {
  each(caches, (cache) => {
    const gc = cache.gc;
    const gcLen = gc.length / 2;
    let i;
    if (gcLen > length) {
      for (i = 0; i < gcLen; ++i) {
        delete cache.data[gc[i]];
      }
      gc.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options) {
  return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
  if (!options.display) {
    return 0;
  }
  const font = toFont(options.font, fallback);
  const padding = toPadding(options.padding);
  const lines = isArray(options.text) ? options.text.length : 1;
  return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
  return createContext(parent, {
    scale,
    type: "scale"
  });
}
function createTickContext(parent, index, tick) {
  return createContext(parent, {
    tick,
    index,
    type: "tick"
  });
}
function titleAlign(align, position, reverse) {
  let ret = _toLeftRightCenter(align);
  if (reverse && position !== "right" || !reverse && position === "right") {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale, offset, position, align) {
  const { top, left, bottom, right, chart } = scale;
  const { chartArea, scales } = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale.isHorizontal()) {
    titleX = _alignStartEnd(align, left, right);
    if (isObject(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position === "center") {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale, position, offset);
    }
    maxWidth = right - left;
  } else {
    if (isObject(position)) {
      const positionAxisID1 = Object.keys(position)[0];
      const value1 = position[positionAxisID1];
      titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;
    } else if (position === "center") {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale, position, offset);
    }
    titleY = _alignStartEnd(align, bottom, top);
    rotation = position === "left" ? -HALF_PI : HALF_PI;
  }
  return {
    titleX,
    titleY,
    maxWidth,
    rotation
  };
}
var Scale = class extends Element {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = void 0;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = void 0;
    this.maxHeight = void 0;
    this.paddingTop = void 0;
    this.paddingBottom = void 0;
    this.paddingLeft = void 0;
    this.paddingRight = void 0;
    this.axis = void 0;
    this.labelRotation = void 0;
    this.min = void 0;
    this.max = void 0;
    this._range = void 0;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = void 0;
    this._endPixel = void 0;
    this._reversePixels = false;
    this._userMax = void 0;
    this._userMin = void 0;
    this._suggestedMax = void 0;
    this._suggestedMin = void 0;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = void 0;
  }
  init(options) {
    this.options = options.setContext(this.getContext());
    this.axis = options.axis;
    this._userMin = this.parse(options.min);
    this._userMax = this.parse(options.max);
    this._suggestedMin = this.parse(options.suggestedMin);
    this._suggestedMax = this.parse(options.suggestedMax);
  }
  parse(raw, index) {
    return raw;
  }
  getUserBounds() {
    let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);
    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: finiteOrDefault(_userMin, _suggestedMin),
      max: finiteOrDefault(_userMax, _suggestedMax),
      minDefined: isNumberFinite(_userMin),
      maxDefined: isNumberFinite(_userMax)
    };
  }
  getMinMax(canStack) {
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    let range;
    if (minDefined && maxDefined) {
      return {
        min,
        max
      };
    }
    const metas = this.getMatchingVisibleMetas();
    for (let i = 0, ilen = metas.length; i < ilen; ++i) {
      range = metas[i].controller.getMinMax(this, canStack);
      if (!minDefined) {
        min = Math.min(min, range.min);
      }
      if (!maxDefined) {
        max = Math.max(max, range.max);
      }
    }
    min = maxDefined && min > max ? max : min;
    max = minDefined && min > max ? min : max;
    return {
      min: finiteOrDefault(min, finiteOrDefault(max, min)),
      max: finiteOrDefault(max, finiteOrDefault(min, max))
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }
  getLabelItems(chartArea = this.chart.chartArea) {
    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
    return items;
  }
  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }
  beforeUpdate() {
    callback(this.options.beforeUpdate, [
      this
    ]);
  }
  update(maxWidth, maxHeight, margins) {
    const { beginAtZero, grace, ticks: tickOpts } = this.options;
    const sampleSize = tickOpts.sampleSize;
    this.beforeUpdate();
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    this.ticks = null;
    this._labelSizes = null;
    this._gridLineItems = null;
    this._labelItems = null;
    this.beforeSetDimensions();
    this.setDimensions();
    this.afterSetDimensions();
    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
    if (!this._dataLimitsCached) {
      this.beforeDataLimits();
      this.determineDataLimits();
      this.afterDataLimits();
      this._range = _addGrace(this, grace, beginAtZero);
      this._dataLimitsCached = true;
    }
    this.beforeBuildTicks();
    this.ticks = this.buildTicks() || [];
    this.afterBuildTicks();
    const samplingEnabled = sampleSize < this.ticks.length;
    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
    this.configure();
    this.beforeCalculateLabelRotation();
    this.calculateLabelRotation();
    this.afterCalculateLabelRotation();
    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
      this.ticks = autoSkip(this, this.ticks);
      this._labelSizes = null;
      this.afterAutoSkip();
    }
    if (samplingEnabled) {
      this._convertTicksToLabels(this.ticks);
    }
    this.beforeFit();
    this.fit();
    this.afterFit();
    this.afterUpdate();
  }
  configure() {
    let reversePixels = this.options.reverse;
    let startPixel, endPixel;
    if (this.isHorizontal()) {
      startPixel = this.left;
      endPixel = this.right;
    } else {
      startPixel = this.top;
      endPixel = this.bottom;
      reversePixels = !reversePixels;
    }
    this._startPixel = startPixel;
    this._endPixel = endPixel;
    this._reversePixels = reversePixels;
    this._length = endPixel - startPixel;
    this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
    callback(this.options.afterUpdate, [
      this
    ]);
  }
  beforeSetDimensions() {
    callback(this.options.beforeSetDimensions, [
      this
    ]);
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = 0;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = 0;
      this.bottom = this.height;
    }
    this.paddingLeft = 0;
    this.paddingTop = 0;
    this.paddingRight = 0;
    this.paddingBottom = 0;
  }
  afterSetDimensions() {
    callback(this.options.afterSetDimensions, [
      this
    ]);
  }
  _callHooks(name2) {
    this.chart.notifyPlugins(name2, this.getContext());
    callback(this.options[name2], [
      this
    ]);
  }
  beforeDataLimits() {
    this._callHooks("beforeDataLimits");
  }
  determineDataLimits() {
  }
  afterDataLimits() {
    this._callHooks("afterDataLimits");
  }
  beforeBuildTicks() {
    this._callHooks("beforeBuildTicks");
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks("afterBuildTicks");
  }
  beforeTickToLabelConversion() {
    callback(this.options.beforeTickToLabelConversion, [
      this
    ]);
  }
  generateTickLabels(ticks) {
    const tickOpts = this.options.ticks;
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      tick = ticks[i];
      tick.label = callback(tickOpts.callback, [
        tick.value,
        i,
        ticks
      ], this);
    }
  }
  afterTickToLabelConversion() {
    callback(this.options.afterTickToLabelConversion, [
      this
    ]);
  }
  beforeCalculateLabelRotation() {
    callback(this.options.beforeCalculateLabelRotation, [
      this
    ]);
  }
  calculateLabelRotation() {
    const options = this.options;
    const tickOpts = options.ticks;
    const numTicks = this.ticks.length;
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;
    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
      this.labelRotation = minRotation;
      return;
    }
    const labelSizes = this._getLabelSizes();
    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);
    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }
    this.labelRotation = labelRotation;
  }
  afterCalculateLabelRotation() {
    callback(this.options.afterCalculateLabelRotation, [
      this
    ]);
  }
  afterAutoSkip() {
  }
  beforeFit() {
    callback(this.options.beforeFit, [
      this
    ]);
  }
  fit() {
    const minSize = {
      width: 0,
      height: 0
    };
    const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
    const display = this._isVisible();
    const isHorizontal = this.isHorizontal();
    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);
      if (isHorizontal) {
        minSize.width = this.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = this.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }
      if (tickOpts.display && this.ticks.length) {
        const { first, last, widest, highest } = this._getLabelSizes();
        const tickPadding = tickOpts.padding * 2;
        const angleRadians = toRadians(this.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);
        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
        }
        this._calculatePadding(first, last, sin, cos);
      }
    }
    this._handleMargins();
    if (isHorizontal) {
      this.width = this._length = chart.width - this._margins.left - this._margins.right;
      this.height = minSize.height;
    } else {
      this.width = minSize.width;
      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
    }
  }
  _calculatePadding(first, last, sin, cos) {
    const { ticks: { align, padding }, position } = this.options;
    const isRotated = this.labelRotation !== 0;
    const labelsBelowTicks = position !== "top" && this.axis === "x";
    if (this.isHorizontal()) {
      const offsetLeft = this.getPixelForTick(0) - this.left;
      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;
      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align === "start") {
        paddingRight = last.width;
      } else if (align === "end") {
        paddingLeft = first.width;
      } else if (align !== "inner") {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }
      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;
      if (align === "start") {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align === "end") {
        paddingTop = last.height;
        paddingBottom = 0;
      }
      this.paddingTop = paddingTop + padding;
      this.paddingBottom = paddingBottom + padding;
    }
  }
  _handleMargins() {
    if (this._margins) {
      this._margins.left = Math.max(this.paddingLeft, this._margins.left);
      this._margins.top = Math.max(this.paddingTop, this._margins.top);
      this._margins.right = Math.max(this.paddingRight, this._margins.right);
      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
    }
  }
  afterFit() {
    callback(this.options.afterFit, [
      this
    ]);
  }
  isHorizontal() {
    const { axis, position } = this.options;
    return position === "top" || position === "bottom" || axis === "x";
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(ticks) {
    this.beforeTickToLabelConversion();
    this.generateTickLabels(ticks);
    let i, ilen;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      if (isNullOrUndef(ticks[i].label)) {
        ticks.splice(i, 1);
        ilen--;
        i--;
      }
    }
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let labelSizes = this._labelSizes;
    if (!labelSizes) {
      const sampleSize = this.options.ticks.sampleSize;
      let ticks = this.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);
    }
    return labelSizes;
  }
  _computeLabelSizes(ticks, length) {
    const { ctx, _longestTextCache: caches } = this;
    const widths = [];
    const heights = [];
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
    for (i = 0; i < length; ++i) {
      label = ticks[i].label;
      tickFont = this._resolveTickFontOptions(i);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {
        data: {},
        gc: []
      };
      lineHeight = tickFont.lineHeight;
      width = height = 0;
      if (!isNullOrUndef(label) && !isArray(label)) {
        width = _measureText(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if (isArray(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];
          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }
      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }
    garbageCollect(caches, length);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);
    const valueAt = (idx) => ({
      width: widths[idx] || 0,
      height: heights[idx] || 0
    });
    return {
      first: valueAt(0),
      last: valueAt(length - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights
    };
  }
  getLabelForValue(value) {
    return value;
  }
  getPixelForValue(value, index) {
    return NaN;
  }
  getValueForPixel(pixel) {
  }
  getPixelForTick(index) {
    const ticks = this.ticks;
    if (index < 0 || index > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index].value);
  }
  getPixelForDecimal(decimal) {
    if (this._reversePixels) {
      decimal = 1 - decimal;
    }
    const pixel = this._startPixel + decimal * this._length;
    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);
  }
  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const { min, max } = this;
    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
  }
  getContext(index) {
    const ticks = this.ticks || [];
    if (index >= 0 && index < ticks.length) {
      const tick = ticks[index];
      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
    }
    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
  }
  _tickSize() {
    const optionTicks = this.options.ticks;
    const rot = toRadians(this.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));
    const labelSizes = this._getLabelSizes();
    const padding = optionTicks.autoSkipPadding || 0;
    const w = labelSizes ? labelSizes.widest.width + padding : 0;
    const h4 = labelSizes ? labelSizes.highest.height + padding : 0;
    return this.isHorizontal() ? h4 * cos > w * sin ? w / cos : h4 / sin : h4 * sin < w * cos ? h4 / cos : w / sin;
  }
  _isVisible() {
    const display = this.options.display;
    if (display !== "auto") {
      return !!display;
    }
    return this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(chartArea) {
    const axis = this.axis;
    const chart = this.chart;
    const options = this.options;
    const { grid, position, border } = options;
    const offset = grid.offset;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl = getTickMarkLength(grid);
    const items = [];
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = borderOpts.display ? borderOpts.width : 0;
    const axisHalfWidth = axisWidth / 2;
    const alignBorderValue = function(pixel) {
      return _alignPixel(chart, pixel, axisWidth);
    };
    let borderValue, i, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
    if (position === "top") {
      borderValue = alignBorderValue(this.bottom);
      ty1 = this.bottom - tl;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y2 = chartArea.bottom;
    } else if (position === "bottom") {
      borderValue = alignBorderValue(this.top);
      y1 = chartArea.top;
      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = this.top + tl;
    } else if (position === "left") {
      borderValue = alignBorderValue(this.right);
      tx1 = this.right - tl;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position === "right") {
      borderValue = alignBorderValue(this.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = this.left + tl;
    } else if (axis === "x") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
      }
      y1 = chartArea.top;
      y2 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl;
    } else if (axis === "y") {
      if (position === "center") {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if (isObject(position)) {
        const positionAxisID1 = Object.keys(position)[0];
        const value1 = position[positionAxisID1];
        borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));
      }
      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }
    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit));
    for (i = 0; i < ticksLength; i += step) {
      const context = this.getContext(i);
      const optsAtIndex = grid.setContext(context);
      const optsAtIndexBorder = border.setContext(context);
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = optsAtIndexBorder.dash || [];
      const borderDashOffset = optsAtIndexBorder.dashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(this, i, offset);
      if (lineValue === void 0) {
        continue;
      }
      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);
      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y2 = alignedLineValue;
      }
      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset
      });
    }
    this._ticksLength = ticksLength;
    this._borderValue = borderValue;
    return items;
  }
  _computeLabelItems(chartArea) {
    const axis = this.axis;
    const options = this.options;
    const { position, ticks: optionTicks } = options;
    const isHorizontal = this.isHorizontal();
    const ticks = this.ticks;
    const { align, crossAlign, padding, mirror } = optionTicks;
    const tl = getTickMarkLength(options.grid);
    const tickAndPadding = tl + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -toRadians(this.labelRotation);
    const items = [];
    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = "middle";
    if (position === "top") {
      y = this.bottom - hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "bottom") {
      y = this.top + hTickAndPadding;
      textAlign = this._getXAxisLabelAlignment();
    } else if (position === "left") {
      const ret = this._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x = ret.x;
    } else if (position === "right") {
      const ret1 = this._getYAxisLabelAlignment(tl);
      textAlign = ret1.textAlign;
      x = ret1.x;
    } else if (axis === "x") {
      if (position === "center") {
        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }
      textAlign = this._getXAxisLabelAlignment();
    } else if (axis === "y") {
      if (position === "center") {
        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
      } else if (isObject(position)) {
        const positionAxisID1 = Object.keys(position)[0];
        const value1 = position[positionAxisID1];
        x = this.chart.scales[positionAxisID1].getPixelForValue(value1);
      }
      textAlign = this._getYAxisLabelAlignment(tl).textAlign;
    }
    if (axis === "y") {
      if (align === "start") {
        textBaseline = "top";
      } else if (align === "end") {
        textBaseline = "bottom";
      }
    }
    const labelSizes = this._getLabelSizes();
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      label = tick.label;
      const optsAtIndex = optionTicks.setContext(this.getContext(i));
      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
      font = this._resolveTickFontOptions(i);
      lineHeight = font.lineHeight;
      lineCount = isArray(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color2 = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;
      let tickTextAlign = textAlign;
      if (isHorizontal) {
        x = pixel;
        if (textAlign === "inner") {
          if (i === ilen - 1) {
            tickTextAlign = !this.options.reverse ? "right" : "left";
          } else if (i === 0) {
            tickTextAlign = !this.options.reverse ? "left" : "right";
          } else {
            tickTextAlign = "center";
          }
        }
        if (position === "top") {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === "near" || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === "center") {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }
        if (mirror) {
          textOffset *= -1;
        }
        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {
          x += lineHeight / 2 * Math.sin(rotation);
        }
      } else {
        y = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }
      let backdrop;
      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = toPadding(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i];
        const width = labelSizes.widths[i];
        let top = textOffset - labelPadding.top;
        let left = 0 - labelPadding.left;
        switch (textBaseline) {
          case "middle":
            top -= height / 2;
            break;
          case "bottom":
            top -= height;
            break;
        }
        switch (textAlign) {
          case "center":
            left -= width / 2;
            break;
          case "right":
            left -= width;
            break;
        }
        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor
        };
      }
      items.push({
        label,
        font,
        textOffset,
        options: {
          rotation,
          color: color2,
          strokeColor,
          strokeWidth,
          textAlign: tickTextAlign,
          textBaseline,
          translation: [
            x,
            y
          ],
          backdrop
        }
      });
    }
    return items;
  }
  _getXAxisLabelAlignment() {
    const { position, ticks } = this.options;
    const rotation = -toRadians(this.labelRotation);
    if (rotation) {
      return position === "top" ? "left" : "right";
    }
    let align = "center";
    if (ticks.align === "start") {
      align = "left";
    } else if (ticks.align === "end") {
      align = "right";
    } else if (ticks.align === "inner") {
      align = "inner";
    }
    return align;
  }
  _getYAxisLabelAlignment(tl) {
    const { position, ticks: { crossAlign, mirror, padding } } = this.options;
    const labelSizes = this._getLabelSizes();
    const tickAndPadding = tl + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x;
    if (position === "left") {
      if (mirror) {
        x = this.right + padding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x += widest / 2;
        } else {
          textAlign = "right";
          x += widest;
        }
      } else {
        x = this.right - tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x -= widest / 2;
        } else {
          textAlign = "left";
          x = this.left;
        }
      }
    } else if (position === "right") {
      if (mirror) {
        x = this.left + padding;
        if (crossAlign === "near") {
          textAlign = "right";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x -= widest / 2;
        } else {
          textAlign = "left";
          x -= widest;
        }
      } else {
        x = this.left + tickAndPadding;
        if (crossAlign === "near") {
          textAlign = "left";
        } else if (crossAlign === "center") {
          textAlign = "center";
          x += widest / 2;
        } else {
          textAlign = "right";
          x = this.right;
        }
      }
    } else {
      textAlign = "right";
    }
    return {
      textAlign,
      x
    };
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror) {
      return;
    }
    const chart = this.chart;
    const position = this.options.position;
    if (position === "left" || position === "right") {
      return {
        top: 0,
        left: this.left,
        bottom: chart.height,
        right: this.right
      };
    }
    if (position === "top" || position === "bottom") {
      return {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: chart.width
      };
    }
  }
  drawBackground() {
    const { ctx, options: { backgroundColor }, left, top, width, height } = this;
    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }
  getLineWidthForValue(value) {
    const grid = this.options.grid;
    if (!this._isVisible() || !grid.display) {
      return 0;
    }
    const ticks = this.ticks;
    const index = ticks.findIndex((t2) => t2.value === value);
    if (index >= 0) {
      const opts = grid.setContext(this.getContext(index));
      return opts.lineWidth;
    }
    return 0;
  }
  drawGrid(chartArea) {
    const grid = this.options.grid;
    const ctx = this.ctx;
    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
    let i, ilen;
    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }
      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };
    if (grid.display) {
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        const item = items[i];
        if (grid.drawOnChartArea) {
          drawLine({
            x: item.x1,
            y: item.y1
          }, {
            x: item.x2,
            y: item.y2
          }, item);
        }
        if (grid.drawTicks) {
          drawLine({
            x: item.tx1,
            y: item.ty1
          }, {
            x: item.tx2,
            y: item.ty2
          }, {
            color: item.tickColor,
            width: item.tickWidth,
            borderDash: item.tickBorderDash,
            borderDashOffset: item.tickBorderDashOffset
          });
        }
      }
    }
  }
  drawBorder() {
    const { chart, ctx, options: { border, grid } } = this;
    const borderOpts = border.setContext(this.getContext());
    const axisWidth = border.display ? borderOpts.width : 0;
    if (!axisWidth) {
      return;
    }
    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
    const borderValue = this._borderValue;
    let x1, x2, y1, y2;
    if (this.isHorizontal()) {
      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;
      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y2 = borderValue;
    } else {
      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;
      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }
    ctx.save();
    ctx.lineWidth = borderOpts.width;
    ctx.strokeStyle = borderOpts.color;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
    ctx.restore();
  }
  drawLabels(chartArea) {
    const optionTicks = this.options.ticks;
    if (!optionTicks.display) {
      return;
    }
    const ctx = this.ctx;
    const area = this._computeLabelArea();
    if (area) {
      clipArea(ctx, area);
    }
    const items = this.getLabelItems(chartArea);
    for (const item of items) {
      const renderTextOptions = item.options;
      const tickFont = item.font;
      const label = item.label;
      const y = item.textOffset;
      renderText(ctx, label, 0, y, tickFont, renderTextOptions);
    }
    if (area) {
      unclipArea(ctx);
    }
  }
  drawTitle() {
    const { ctx, options: { position, title, reverse } } = this;
    if (!title.display) {
      return;
    }
    const font = toFont(title.font);
    const padding = toPadding(title.padding);
    const align = title.align;
    let offset = font.lineHeight / 2;
    if (position === "bottom" || position === "center" || isObject(position)) {
      offset += padding.bottom;
      if (isArray(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }
    const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
    renderText(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align, position, reverse),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
  draw(chartArea) {
    if (!this._isVisible()) {
      return;
    }
    this.drawBackground();
    this.drawGrid(chartArea);
    this.drawBorder();
    this.drawTitle();
    this.drawLabels(chartArea);
  }
  _layers() {
    const opts = this.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);
    const bz = valueOrDefault(opts.border && opts.border.z, 0);
    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {
      return [
        {
          z: tz,
          draw: (chartArea) => {
            this.draw(chartArea);
          }
        }
      ];
    }
    return [
      {
        z: gz,
        draw: (chartArea) => {
          this.drawBackground();
          this.drawGrid(chartArea);
          this.drawTitle();
        }
      },
      {
        z: bz,
        draw: () => {
          this.drawBorder();
        }
      },
      {
        z: tz,
        draw: (chartArea) => {
          this.drawLabels(chartArea);
        }
      }
    ];
  }
  getMatchingVisibleMetas(type) {
    const metas = this.chart.getSortedVisibleDatasetMetas();
    const axisID = this.axis + "AxisID";
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      const meta = metas[i];
      if (meta[axisID] === this.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }
    return result;
  }
  _resolveTickFontOptions(index) {
    const opts = this.options.ticks.setContext(this.getContext(index));
    return toFont(opts.font);
  }
  _maxDigits() {
    const fontSize = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / fontSize;
  }
};
var TypedRegistry = class {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = /* @__PURE__ */ Object.create(null);
  }
  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }
  register(item) {
    const proto = Object.getPrototypeOf(item);
    let parentScope;
    if (isIChartComponent(proto)) {
      parentScope = this.register(proto);
    }
    const items = this.items;
    const id = item.id;
    const scope = this.scope + "." + id;
    if (!id) {
      throw new Error("class does not have id: " + item);
    }
    if (id in items) {
      return scope;
    }
    items[id] = item;
    registerDefaults(item, scope, parentScope);
    if (this.override) {
      defaults.override(item.id, item.overrides);
    }
    return scope;
  }
  get(id) {
    return this.items[id];
  }
  unregister(item) {
    const items = this.items;
    const id = item.id;
    const scope = this.scope;
    if (id in items) {
      delete items[id];
    }
    if (scope && id in defaults[scope]) {
      delete defaults[scope][id];
      if (this.override) {
        delete overrides[id];
      }
    }
  }
};
function registerDefaults(item, scope, parentScope) {
  const itemDefaults = merge(/* @__PURE__ */ Object.create(null), [
    parentScope ? defaults.get(parentScope) : {},
    defaults.get(scope),
    item.defaults
  ]);
  defaults.set(scope, itemDefaults);
  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }
  if (item.descriptors) {
    defaults.describe(scope, item.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach((property) => {
    const propertyParts = property.split(".");
    const sourceName = propertyParts.pop();
    const sourceScope = [
      scope
    ].concat(propertyParts).join(".");
    const parts = routes[property].split(".");
    const targetName = parts.pop();
    const targetScope = parts.join(".");
    defaults.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return "id" in proto && "defaults" in proto;
}
var Registry = class {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, "datasets", true);
    this.elements = new TypedRegistry(Element, "elements");
    this.plugins = new TypedRegistry(Object, "plugins");
    this.scales = new TypedRegistry(Scale, "scales");
    this._typedRegistries = [
      this.controllers,
      this.scales,
      this.elements
    ];
  }
  add(...args) {
    this._each("register", args);
  }
  remove(...args) {
    this._each("unregister", args);
  }
  addControllers(...args) {
    this._each("register", args, this.controllers);
  }
  addElements(...args) {
    this._each("register", args, this.elements);
  }
  addPlugins(...args) {
    this._each("register", args, this.plugins);
  }
  addScales(...args) {
    this._each("register", args, this.scales);
  }
  getController(id) {
    return this._get(id, this.controllers, "controller");
  }
  getElement(id) {
    return this._get(id, this.elements, "element");
  }
  getPlugin(id) {
    return this._get(id, this.plugins, "plugin");
  }
  getScale(id) {
    return this._get(id, this.scales, "scale");
  }
  removeControllers(...args) {
    this._each("unregister", args, this.controllers);
  }
  removeElements(...args) {
    this._each("unregister", args, this.elements);
  }
  removePlugins(...args) {
    this._each("unregister", args, this.plugins);
  }
  removeScales(...args) {
    this._each("unregister", args, this.scales);
  }
  _each(method, args, typedRegistry) {
    [
      ...args
    ].forEach((arg) => {
      const reg = typedRegistry || this._getRegistryForType(arg);
      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {
        this._exec(method, reg, arg);
      } else {
        each(arg, (item) => {
          const itemReg = typedRegistry || this._getRegistryForType(item);
          this._exec(method, itemReg, item);
        });
      }
    });
  }
  _exec(method, registry2, component) {
    const camelMethod = _capitalize(method);
    callback(component["before" + camelMethod], [], component);
    registry2[method](component);
    callback(component["after" + camelMethod], [], component);
  }
  _getRegistryForType(type) {
    for (let i = 0; i < this._typedRegistries.length; i++) {
      const reg = this._typedRegistries[i];
      if (reg.isForType(type)) {
        return reg;
      }
    }
    return this.plugins;
  }
  _get(id, typedRegistry, type) {
    const item = typedRegistry.get(id);
    if (item === void 0) {
      throw new Error('"' + id + '" is not a registered ' + type + ".");
    }
    return item;
  }
};
var registry = /* @__PURE__ */ new Registry();
var PluginService = class {
  constructor() {
    this._init = [];
  }
  notify(chart, hook, args, filter) {
    if (hook === "beforeInit") {
      this._init = this._createDescriptors(chart, true);
      this._notify(this._init, chart, "install");
    }
    const descriptors2 = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
    const result = this._notify(descriptors2, chart, hook, args);
    if (hook === "afterDestroy") {
      this._notify(descriptors2, chart, "stop");
      this._notify(this._init, chart, "uninstall");
    }
    return result;
  }
  _notify(descriptors2, chart, hook, args) {
    args = args || {};
    for (const descriptor of descriptors2) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [
        chart,
        args,
        descriptor.options
      ];
      if (callback(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }
    return true;
  }
  invalidate() {
    if (!isNullOrUndef(this._cache)) {
      this._oldCache = this._cache;
      this._cache = void 0;
    }
  }
  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }
    const descriptors2 = this._cache = this._createDescriptors(chart);
    this._notifyStateChanges(chart);
    return descriptors2;
  }
  _createDescriptors(chart, all) {
    const config = chart && chart.config;
    const options = valueOrDefault(config.options && config.options.plugins, {});
    const plugins = allPlugins(config);
    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
  }
  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors2 = this._cache;
    const diff = (a, b) => a.filter((x) => !b.some((y) => x.plugin.id === y.plugin.id));
    this._notify(diff(previousDescriptors, descriptors2), chart, "stop");
    this._notify(diff(descriptors2, previousDescriptors), chart, "start");
  }
};
function allPlugins(config) {
  const localIds = {};
  const plugins = [];
  const keys = Object.keys(registry.plugins.items);
  for (let i = 0; i < keys.length; i++) {
    plugins.push(registry.getPlugin(keys[i]));
  }
  const local = config.plugins || [];
  for (let i1 = 0; i1 < local.length; i1++) {
    const plugin = local[i1];
    if (plugins.indexOf(plugin) === -1) {
      plugins.push(plugin);
      localIds[plugin.id] = true;
    }
  }
  return {
    plugins,
    localIds
  };
}
function getOpts(options, all) {
  if (!all && options === false) {
    return null;
  }
  if (options === true) {
    return {};
  }
  return options;
}
function createDescriptors(chart, { plugins, localIds }, options, all) {
  const result = [];
  const context = chart.getContext();
  for (const plugin of plugins) {
    const id = plugin.id;
    const opts = getOpts(options[id], all);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, {
        plugin,
        local: localIds[id]
      }, opts, context)
    });
  }
  return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
  const keys = config.pluginScopeKeys(plugin);
  const scopes = config.getOptionScopes(opts, keys);
  if (local && plugin.defaults) {
    scopes.push(plugin.defaults);
  }
  return config.createResolver(scopes, context, [
    ""
  ], {
    scriptable: false,
    indexable: false,
    allKeys: true
  });
}
function getIndexAxis(type, options) {
  const datasetDefaults = defaults.datasets[type] || {};
  const datasetOptions = (options.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id, indexAxis) {
  let axis = id;
  if (id === "_index_") {
    axis = indexAxis;
  } else if (id === "_value_") {
    axis = indexAxis === "x" ? "y" : "x";
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? "_index_" : "_value_";
}
function axisFromPosition(position) {
  if (position === "top" || position === "bottom") {
    return "x";
  }
  if (position === "left" || position === "right") {
    return "y";
  }
}
function determineAxis(id, scaleOptions) {
  if (id === "x" || id === "y" || id === "r") {
    return id;
  }
  id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);
  if (id) {
    return id;
  }
  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);
}
function mergeScaleConfig(config, options) {
  const chartDefaults = overrides[config.type] || {
    scales: {}
  };
  const configScales = options.scales || {};
  const chartIndexAxis = getIndexAxis(config.type, options);
  const scales = /* @__PURE__ */ Object.create(null);
  Object.keys(configScales).forEach((id) => {
    const scaleConf = configScales[id];
    if (!isObject(scaleConf)) {
      return console.error(`Invalid scale configuration for scale: ${id}`);
    }
    if (scaleConf._proxy) {
      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
    }
    const axis = determineAxis(id, scaleConf);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    scales[id] = mergeIf(/* @__PURE__ */ Object.create(null), [
      {
        axis
      },
      scaleConf,
      defaultScaleOptions[axis],
      defaultScaleOptions[defaultId]
    ]);
  });
  config.data.datasets.forEach((dataset) => {
    const type = dataset.type || config.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
    const datasetDefaults = overrides[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach((defaultID) => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id = dataset[axis + "AxisID"] || axis;
      scales[id] = scales[id] || /* @__PURE__ */ Object.create(null);
      mergeIf(scales[id], [
        {
          axis
        },
        configScales[id],
        defaultScaleOptions[defaultID]
      ]);
    });
  });
  Object.keys(scales).forEach((key) => {
    const scale = scales[key];
    mergeIf(scale, [
      defaults.scales[scale.type],
      defaults.scale
    ]);
  });
  return scales;
}
function initOptions(config) {
  const options = config.options || (config.options = {});
  options.plugins = valueOrDefault(options.plugins, {});
  options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config) {
  config = config || {};
  config.data = initData(config.data);
  initOptions(config);
  return config;
}
var keyCache = /* @__PURE__ */ new Map();
var keysCached = /* @__PURE__ */ new Set();
function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);
  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }
  return keys;
}
var addIfFound = (set2, obj, key) => {
  const opts = resolveObjectKey(obj, key);
  if (opts !== void 0) {
    set2.add(opts);
  }
};
var Config = class {
  constructor(config) {
    this._config = initConfig(config);
    this._scopeCache = /* @__PURE__ */ new Map();
    this._resolverCache = /* @__PURE__ */ new Map();
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(type) {
    this._config.type = type;
  }
  get data() {
    return this._config.data;
  }
  set data(data) {
    this._config.data = initData(data);
  }
  get options() {
    return this._config.options;
  }
  set options(options) {
    this._config.options = options;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const config = this._config;
    this.clearCache();
    initOptions(config);
  }
  clearCache() {
    this._scopeCache.clear();
    this._resolverCache.clear();
  }
  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType, () => [
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetAnimationScopeKeys(datasetType, transition) {
    return cachedKeys(`${datasetType}.transition.${transition}`, () => [
      [
        `datasets.${datasetType}.transitions.${transition}`,
        `transitions.${transition}`
      ],
      [
        `datasets.${datasetType}`,
        ""
      ]
    ]);
  }
  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`, () => [
      [
        `datasets.${datasetType}.elements.${elementType}`,
        `datasets.${datasetType}`,
        `elements.${elementType}`,
        ""
      ]
    ]);
  }
  pluginScopeKeys(plugin) {
    const id = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id}`, () => [
      [
        `plugins.${id}`,
        ...plugin.additionalOptionScopes || []
      ]
    ]);
  }
  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;
    let cache = _scopeCache.get(mainScope);
    if (!cache || resetCache) {
      cache = /* @__PURE__ */ new Map();
      _scopeCache.set(mainScope, cache);
    }
    return cache;
  }
  getOptionScopes(mainScope, keyLists, resetCache) {
    const { options, type } = this;
    const cache = this._cachedScopes(mainScope, resetCache);
    const cached = cache.get(keyLists);
    if (cached) {
      return cached;
    }
    const scopes = /* @__PURE__ */ new Set();
    keyLists.forEach((keys) => {
      if (mainScope) {
        scopes.add(mainScope);
        keys.forEach((key) => addIfFound(scopes, mainScope, key));
      }
      keys.forEach((key) => addIfFound(scopes, options, key));
      keys.forEach((key) => addIfFound(scopes, overrides[type] || {}, key));
      keys.forEach((key) => addIfFound(scopes, defaults, key));
      keys.forEach((key) => addIfFound(scopes, descriptors, key));
    });
    const array = Array.from(scopes);
    if (array.length === 0) {
      array.push(/* @__PURE__ */ Object.create(null));
    }
    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }
    return array;
  }
  chartOptionScopes() {
    const { options, type } = this;
    return [
      options,
      overrides[type] || {},
      defaults.datasets[type] || {},
      {
        type
      },
      defaults,
      descriptors
    ];
  }
  resolveNamedOptions(scopes, names2, context, prefixes = [
    ""
  ]) {
    const result = {
      $shared: true
    };
    const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);
    let options = resolver;
    if (needContext(resolver, names2)) {
      result.$shared = false;
      context = isFunction(context) ? context() : context;
      const subResolver = this.createResolver(scopes, context, subPrefixes);
      options = _attachContext(resolver, context, subResolver);
    }
    for (const prop of names2) {
      result[prop] = options[prop];
    }
    return result;
  }
  createResolver(scopes, context, prefixes = [
    ""
  ], descriptorDefaults) {
    const { resolver } = getResolver(this._resolverCache, scopes, prefixes);
    return isObject(context) ? _attachContext(resolver, context, void 0, descriptorDefaults) : resolver;
  }
};
function getResolver(resolverCache, scopes, prefixes) {
  let cache = resolverCache.get(scopes);
  if (!cache) {
    cache = /* @__PURE__ */ new Map();
    resolverCache.set(scopes, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = _createResolver(scopes, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter((p) => !p.toLowerCase().includes("hover"))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
var hasFunction = (value) => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);
function needContext(proxy, names2) {
  const { isScriptable, isIndexable } = _descriptors(proxy);
  for (const prop of names2) {
    const scriptable = isScriptable(prop);
    const indexable = isIndexable(prop);
    const value = (indexable || scriptable) && proxy[prop];
    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {
      return true;
    }
  }
  return false;
}
var version = "4.2.0";
var KNOWN_POSITIONS = [
  "top",
  "bottom",
  "left",
  "right",
  "chartArea"
];
function positionIsHorizontal(position, axis) {
  return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
  return function(a, b) {
    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
  };
}
function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins("afterRender");
  callback(animationOptions && animationOptions.onComplete, [
    context
  ], chart);
}
function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  callback(animationOptions && animationOptions.onProgress, [
    context
  ], chart);
}
function getCanvas(item) {
  if (_isDomSupported() && typeof item === "string") {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
var instances = {};
var getChart = (key) => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter((c) => c.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
  const keys = Object.keys(obj);
  for (const key of keys) {
    const intKey = +key;
    if (intKey >= start) {
      const value = obj[key];
      delete obj[key];
      if (move > 0 || intKey > start) {
        obj[intKey + move] = value;
      }
    }
  }
}
function determineLastEvent(e, lastEvent, inChartArea, isClick) {
  if (!inChartArea || e.type === "mouseout") {
    return null;
  }
  if (isClick) {
    return lastEvent;
  }
  return e;
}
function getDatasetArea(meta) {
  const { xScale, yScale } = meta;
  if (xScale && yScale) {
    return {
      left: xScale.left,
      right: xScale.right,
      top: yScale.top,
      bottom: yScale.bottom
    };
  }
}
var Chart = class {
  static register(...items) {
    registry.add(...items);
    invalidatePlugins();
  }
  static unregister(...items) {
    registry.remove(...items);
    invalidatePlugins();
  }
  constructor(item, userConfig) {
    const config = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item);
    const existingChart = getChart(initialCanvas);
    if (existingChart) {
      throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "' must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
    }
    const options = config.createResolver(config.chartOptionScopes(), this.getContext());
    this.platform = new (config.platform || _detectPlatform(initialCanvas))();
    this.platform.updateConfig(config);
    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
    const canvas = context && context.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = uid();
    this.ctx = context;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = void 0;
    this.boxes = [];
    this.currentDevicePixelRatio = void 0;
    this.chartArea = void 0;
    this._active = [];
    this._lastEvent = void 0;
    this._listeners = {};
    this._responsiveListeners = void 0;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = void 0;
    this.$context = void 0;
    this._doResize = debounce((mode) => this.update(mode), options.resizeDelay || 0);
    this._dataChanges = [];
    instances[this.id] = this;
    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    animator.listen(this, "complete", onAnimationsComplete);
    animator.listen(this, "progress", onAnimationProgress);
    this._initialize();
    if (this.attached) {
      this.update();
    }
  }
  get aspectRatio() {
    const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
    if (!isNullOrUndef(aspectRatio)) {
      return aspectRatio;
    }
    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }
    return height ? width / height : null;
  }
  get data() {
    return this.config.data;
  }
  set data(data) {
    this.config.data = data;
  }
  get options() {
    return this._options;
  }
  set options(options) {
    this.config.options = options;
  }
  get registry() {
    return registry;
  }
  _initialize() {
    this.notifyPlugins("beforeInit");
    if (this.options.responsive) {
      this.resize();
    } else {
      retinaScale(this, this.options.devicePixelRatio);
    }
    this.bindEvents();
    this.notifyPlugins("afterInit");
    return this;
  }
  clear() {
    clearCanvas(this.canvas, this.ctx);
    return this;
  }
  stop() {
    animator.stop(this);
    return this;
  }
  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {
        width,
        height
      };
    }
  }
  _resize(width, height) {
    const options = this.options;
    const canvas = this.canvas;
    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
    const mode = this.width ? "resize" : "attach";
    this.width = newSize.width;
    this.height = newSize.height;
    this._aspectRatio = this.aspectRatio;
    if (!retinaScale(this, newRatio, true)) {
      return;
    }
    this.notifyPlugins("resize", {
      size: newSize
    });
    callback(options.onResize, [
      this,
      newSize
    ], this);
    if (this.attached) {
      if (this._doResize(mode)) {
        this.render();
      }
    }
  }
  ensureScalesHaveIDs() {
    const options = this.options;
    const scalesOptions = options.scales || {};
    each(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }
  buildOrUpdateScales() {
    const options = this.options;
    const scaleOpts = options.scales;
    const scales = this.scales;
    const updated = Object.keys(scales).reduce((obj, id) => {
      obj[id] = false;
      return obj;
    }, {});
    let items = [];
    if (scaleOpts) {
      items = items.concat(Object.keys(scaleOpts).map((id) => {
        const scaleOptions = scaleOpts[id];
        const axis = determineAxis(id, scaleOptions);
        const isRadial = axis === "r";
        const isHorizontal = axis === "x";
        return {
          options: scaleOptions,
          dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
          dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
        };
      }));
    }
    each(items, (item) => {
      const scaleOptions = item.options;
      const id = scaleOptions.id;
      const axis = determineAxis(id, scaleOptions);
      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);
      if (scaleOptions.position === void 0 || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
        scaleOptions.position = item.dposition;
      }
      updated[id] = true;
      let scale = null;
      if (id in scales && scales[id].type === scaleType) {
        scale = scales[id];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale = new scaleClass({
          id,
          type: scaleType,
          ctx: this.ctx,
          chart: this
        });
        scales[scale.id] = scale;
      }
      scale.init(scaleOptions, options);
    });
    each(updated, (hasUpdated, id) => {
      if (!hasUpdated) {
        delete scales[id];
      }
    });
    each(scales, (scale) => {
      layouts.configure(this, scale, scale.options);
      layouts.addBox(this, scale);
    });
  }
  _updateMetasets() {
    const metasets = this._metasets;
    const numData = this.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a, b) => a.index - b.index);
    if (numMeta > numData) {
      for (let i = numData; i < numMeta; ++i) {
        this._destroyDatasetMeta(i);
      }
      metasets.splice(numData, numMeta - numData);
    }
    this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
  }
  _removeUnreferencedMetasets() {
    const { _metasets: metasets, data: { datasets } } = this;
    if (metasets.length > datasets.length) {
      delete this._stacks;
    }
    metasets.forEach((meta, index) => {
      if (datasets.filter((x) => x === meta._dataset).length === 0) {
        this._destroyDatasetMeta(index);
      }
    });
  }
  buildOrUpdateControllers() {
    const newControllers = [];
    const datasets = this.data.datasets;
    let i, ilen;
    this._removeUnreferencedMetasets();
    for (i = 0, ilen = datasets.length; i < ilen; i++) {
      const dataset = datasets[i];
      let meta = this.getDatasetMeta(i);
      const type = dataset.type || this.config.type;
      if (meta.type && meta.type !== type) {
        this._destroyDatasetMeta(i);
        meta = this.getDatasetMeta(i);
      }
      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
      meta.order = dataset.order || 0;
      meta.index = i;
      meta.label = "" + dataset.label;
      meta.visible = this.isDatasetVisible(i);
      if (meta.controller) {
        meta.controller.updateIndex(i);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const { datasetElementType, dataElementType } = defaults.datasets[type];
        Object.assign(ControllerClass, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(this, i);
        newControllers.push(meta.controller);
      }
    }
    this._updateMetasets();
    return newControllers;
  }
  _resetElements() {
    each(this.data.datasets, (dataset, datasetIndex) => {
      this.getDatasetMeta(datasetIndex).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements();
    this.notifyPlugins("reset");
  }
  update(mode) {
    const config = this.config;
    config.update();
    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
    const animsDisabled = this._animationsDisabled = !options.animation;
    this._updateScales();
    this._checkEventBindings();
    this._updateHiddenIndices();
    this._plugins.invalidate();
    if (this.notifyPlugins("beforeUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    const newControllers = this.buildOrUpdateControllers();
    this.notifyPlugins("beforeElementsUpdate");
    let minPadding = 0;
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {
      const { controller } = this.getDatasetMeta(i);
      const reset2 = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset2);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }
    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
    this._updateLayout(minPadding);
    if (!animsDisabled) {
      each(newControllers, (controller) => {
        controller.reset();
      });
    }
    this._updateDatasets(mode);
    this.notifyPlugins("afterUpdate", {
      mode
    });
    this._layers.sort(compare2Level("z", "_idx"));
    const { _active, _lastEvent } = this;
    if (_lastEvent) {
      this._eventHandler(_lastEvent, true);
    } else if (_active.length) {
      this._updateHoverStyles(_active, _active, true);
    }
    this.render();
  }
  _updateScales() {
    each(this.scales, (scale) => {
      layouts.removeBox(this, scale);
    });
    this.ensureScalesHaveIDs();
    this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const options = this.options;
    const existingEvents = new Set(Object.keys(this._listeners));
    const newEvents = new Set(options.events);
    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
      this.unbindEvents();
      this.bindEvents();
    }
  }
  _updateHiddenIndices() {
    const { _hiddenIndices } = this;
    const changes = this._getUniformDataChanges() || [];
    for (const { method, start, count } of changes) {
      const move = method === "_removeElements" ? -count : count;
      moveNumericKeys(_hiddenIndices, start, move);
    }
  }
  _getUniformDataChanges() {
    const _dataChanges = this._dataChanges;
    if (!_dataChanges || !_dataChanges.length) {
      return;
    }
    this._dataChanges = [];
    const datasetCount = this.data.datasets.length;
    const makeSet = (idx) => new Set(_dataChanges.filter((c) => c[0] === idx).map((c, i) => i + "," + c.splice(1).join(",")));
    const changeSet = makeSet(0);
    for (let i = 1; i < datasetCount; i++) {
      if (!setsEqual(changeSet, makeSet(i))) {
        return;
      }
    }
    return Array.from(changeSet).map((c) => c.split(",")).map((a) => ({
      method: a[1],
      start: +a[2],
      count: +a[3]
    }));
  }
  _updateLayout(minPadding) {
    if (this.notifyPlugins("beforeLayout", {
      cancelable: true
    }) === false) {
      return;
    }
    layouts.update(this, this.width, this.height, minPadding);
    const area = this.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    this._layers = [];
    each(this.boxes, (box) => {
      if (noArea && box.position === "chartArea") {
        return;
      }
      if (box.configure) {
        box.configure();
      }
      this._layers.push(...box._layers());
    }, this);
    this._layers.forEach((item, index) => {
      item._idx = index;
    });
    this.notifyPlugins("afterLayout");
  }
  _updateDatasets(mode) {
    if (this.notifyPlugins("beforeDatasetsUpdate", {
      mode,
      cancelable: true
    }) === false) {
      return;
    }
    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this.getDatasetMeta(i).controller.configure();
    }
    for (let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1) {
      this._updateDataset(i1, isFunction(mode) ? mode({
        datasetIndex: i1
      }) : mode);
    }
    this.notifyPlugins("afterDatasetsUpdate", {
      mode
    });
  }
  _updateDataset(index, mode) {
    const meta = this.getDatasetMeta(index);
    const args = {
      meta,
      index,
      mode,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetUpdate", args) === false) {
      return;
    }
    meta.controller._update(mode);
    args.cancelable = false;
    this.notifyPlugins("afterDatasetUpdate", args);
  }
  render() {
    if (this.notifyPlugins("beforeRender", {
      cancelable: true
    }) === false) {
      return;
    }
    if (animator.has(this)) {
      if (this.attached && !animator.running(this)) {
        animator.start(this);
      }
    } else {
      this.draw();
      onAnimationsComplete({
        chart: this
      });
    }
  }
  draw() {
    let i;
    if (this._resizeBeforeDraw) {
      const { width, height } = this._resizeBeforeDraw;
      this._resize(width, height);
      this._resizeBeforeDraw = null;
    }
    this.clear();
    if (this.width <= 0 || this.height <= 0) {
      return;
    }
    if (this.notifyPlugins("beforeDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const layers = this._layers;
    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
      layers[i].draw(this.chartArea);
    }
    this._drawDatasets();
    for (; i < layers.length; ++i) {
      layers[i].draw(this.chartArea);
    }
    this.notifyPlugins("afterDraw");
  }
  _getSortedDatasetMetas(filterVisible) {
    const metasets = this._sortedMetasets;
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metasets.length; i < ilen; ++i) {
      const meta = metasets[i];
      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }
    return result;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    if (this.notifyPlugins("beforeDatasetsDraw", {
      cancelable: true
    }) === false) {
      return;
    }
    const metasets = this.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      this._drawDataset(metasets[i]);
    }
    this.notifyPlugins("afterDatasetsDraw");
  }
  _drawDataset(meta) {
    const ctx = this.ctx;
    const clip = meta._clip;
    const useClip = !clip.disabled;
    const area = getDatasetArea(meta) || this.chartArea;
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };
    if (this.notifyPlugins("beforeDatasetDraw", args) === false) {
      return;
    }
    if (useClip) {
      clipArea(ctx, {
        left: clip.left === false ? 0 : area.left - clip.left,
        right: clip.right === false ? this.width : area.right + clip.right,
        top: clip.top === false ? 0 : area.top - clip.top,
        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
      });
    }
    meta.controller.draw();
    if (useClip) {
      unclipArea(ctx);
    }
    args.cancelable = false;
    this.notifyPlugins("afterDatasetDraw", args);
  }
  isPointInArea(point) {
    return _isPointInArea(point, this.chartArea, this._minPadding);
  }
  getElementsAtEventForMode(e, mode, options, useFinalPosition) {
    const method = Interaction.modes[mode];
    if (typeof method === "function") {
      return method(this, e, options, useFinalPosition);
    }
    return [];
  }
  getDatasetMeta(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    const metasets = this._metasets;
    let meta = metasets.filter((x) => x && x._dataset === dataset).pop();
    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }
    return meta;
  }
  getContext() {
    return this.$context || (this.$context = createContext(null, {
      chart: this,
      type: "chart"
    }));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    if (!dataset) {
      return false;
    }
    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
  }
  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }
  toggleDataVisibility(index) {
    this._hiddenIndices[index] = !this._hiddenIndices[index];
  }
  getDataVisibility(index) {
    return !this._hiddenIndices[index];
  }
  _updateVisibility(datasetIndex, dataIndex, visible) {
    const mode = visible ? "show" : "hide";
    const meta = this.getDatasetMeta(datasetIndex);
    const anims = meta.controller._resolveAnimations(void 0, mode);
    if (defined(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      this.update();
    } else {
      this.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {
        visible
      });
      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : void 0);
    }
  }
  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }
  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }
  _destroyDatasetMeta(datasetIndex) {
    const meta = this._metasets[datasetIndex];
    if (meta && meta.controller) {
      meta.controller._destroy();
    }
    delete this._metasets[datasetIndex];
  }
  _stop() {
    let i, ilen;
    this.stop();
    animator.remove(this);
    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
      this._destroyDatasetMeta(i);
    }
  }
  destroy() {
    this.notifyPlugins("beforeDestroy");
    const { canvas, ctx } = this;
    this._stop();
    this.config.clearCache();
    if (canvas) {
      this.unbindEvents();
      clearCanvas(canvas, ctx);
      this.platform.releaseContext(ctx);
      this.canvas = null;
      this.ctx = null;
    }
    delete instances[this.id];
    this.notifyPlugins("afterDestroy");
  }
  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }
  bindEvents() {
    this.bindUserEvents();
    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }
  bindUserEvents() {
    const listeners = this._listeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const listener = (e, x, y) => {
      e.offsetX = x;
      e.offsetY = y;
      this._eventHandler(e);
    };
    each(this.options.events, (type) => _add(type, listener));
  }
  bindResponsiveEvents() {
    if (!this._responsiveListeners) {
      this._responsiveListeners = {};
    }
    const listeners = this._responsiveListeners;
    const platform = this.platform;
    const _add = (type, listener2) => {
      platform.addEventListener(this, type, listener2);
      listeners[type] = listener2;
    };
    const _remove = (type, listener2) => {
      if (listeners[type]) {
        platform.removeEventListener(this, type, listener2);
        delete listeners[type];
      }
    };
    const listener = (width, height) => {
      if (this.canvas) {
        this.resize(width, height);
      }
    };
    let detached;
    const attached = () => {
      _remove("attach", attached);
      this.attached = true;
      this.resize();
      _add("resize", listener);
      _add("detach", detached);
    };
    detached = () => {
      this.attached = false;
      _remove("resize", listener);
      this._stop();
      this._resize(0, 0);
      _add("attach", attached);
    };
    if (platform.isAttached(this.canvas)) {
      attached();
    } else {
      detached();
    }
  }
  unbindEvents() {
    each(this._listeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._listeners = {};
    each(this._responsiveListeners, (listener, type) => {
      this.platform.removeEventListener(this, type, listener);
    });
    this._responsiveListeners = void 0;
  }
  updateHoverStyle(items, mode, enabled) {
    const prefix = enabled ? "set" : "remove";
    let meta, item, i, ilen;
    if (mode === "dataset") {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller["_" + prefix + "DatasetHoverStyle"]();
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      item = items[i];
      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
      if (controller) {
        controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
      }
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements) {
    const lastActive = this._active || [];
    const active = activeElements.map(({ datasetIndex, index }) => {
      const meta = this.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("No dataset found at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index],
        index
      };
    });
    const changed = !_elementsEqual(active, lastActive);
    if (changed) {
      this._active = active;
      this._lastEvent = null;
      this._updateHoverStyles(active, lastActive);
    }
  }
  notifyPlugins(hook, args, filter) {
    return this._plugins.notify(this, hook, args, filter);
  }
  isPluginEnabled(pluginId) {
    return this._plugins._cache.filter((p) => p.plugin.id === pluginId).length === 1;
  }
  _updateHoverStyles(active, lastActive, replay) {
    const hoverOptions = this.options.hover;
    const diff = (a, b) => a.filter((x) => !b.some((y) => x.datasetIndex === y.datasetIndex && x.index === y.index));
    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);
    if (deactivated.length) {
      this.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }
    if (activated.length && hoverOptions.mode) {
      this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }
  _eventHandler(e, replay) {
    const args = {
      event: e,
      replay,
      cancelable: true,
      inChartArea: this.isPointInArea(e)
    };
    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);
    if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) {
      return;
    }
    const changed = this._handleEvent(e, replay, args.inChartArea);
    args.cancelable = false;
    this.notifyPlugins("afterEvent", args, eventFilter);
    if (changed || args.changed) {
      this.render();
    }
    return this;
  }
  _handleEvent(e, replay, inChartArea) {
    const { _active: lastActive = [], options } = this;
    const useFinalPosition = replay;
    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
    const isClick = _isClickEvent(e);
    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
    if (inChartArea) {
      this._lastEvent = null;
      callback(options.onHover, [
        e,
        active,
        this
      ], this);
      if (isClick) {
        callback(options.onClick, [
          e,
          active,
          this
        ], this);
      }
    }
    const changed = !_elementsEqual(active, lastActive);
    if (changed || replay) {
      this._active = active;
      this._updateHoverStyles(active, lastActive, replay);
    }
    this._lastEvent = lastEvent;
    return changed;
  }
  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
    if (e.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const hoverOptions = this.options.hover;
    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
  }
};
__publicField(Chart, "defaults", defaults);
__publicField(Chart, "instances", instances);
__publicField(Chart, "overrides", overrides);
__publicField(Chart, "registry", registry);
__publicField(Chart, "version", version);
__publicField(Chart, "getChart", getChart);
function invalidatePlugins() {
  return each(Chart.instances, (chart) => chart._plugins.invalidate());
}
function clipArc(ctx, element, endAngle) {
  const { startAngle, pixelMargin, x, y, outerRadius, innerRadius } = element;
  let angleMargin = pixelMargin / outerRadius;
  ctx.beginPath();
  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  if (innerRadius > pixelMargin) {
    angleMargin = pixelMargin / innerRadius;
    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
  }
  ctx.closePath();
  ctx.clip();
}
function toRadiusCorners(value) {
  return _readValueToProps(value, [
    "outerStart",
    "outerEnd",
    "innerStart",
    "innerEnd"
  ]);
}
function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
  const o = toRadiusCorners(arc.options.borderRadius);
  const halfThickness = (outerRadius - innerRadius) / 2;
  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
  const computeOuterLimit = (val) => {
    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
  };
  return {
    outerStart: computeOuterLimit(o.outerStart),
    outerEnd: computeOuterLimit(o.outerEnd),
    innerStart: _limitValue(o.innerStart, 0, innerLimit),
    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)
  };
}
function rThetaToXY(r, theta, x, y) {
  return {
    x: x + r * Math.cos(theta),
    y: y + r * Math.sin(theta)
  };
}
function pathArc(ctx, element, offset, spacing, end, circular) {
  const { x, y, startAngle: start, pixelMargin, innerRadius: innerR } = element;
  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
  let spacingOffset = 0;
  const alpha2 = end - start;
  if (spacing) {
    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha2 * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha2;
    spacingOffset = (alpha2 - adjustedAngle) / 2;
  }
  const beta = Math.max(1e-3, alpha2 * outerRadius - offset / PI) / outerRadius;
  const angleOffset = (alpha2 - beta) / 2;
  const startAngle = start + angleOffset + spacingOffset;
  const endAngle = end - angleOffset - spacingOffset;
  const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
  const outerStartAdjustedRadius = outerRadius - outerStart;
  const outerEndAdjustedRadius = outerRadius - outerEnd;
  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
  const innerStartAdjustedRadius = innerRadius + innerStart;
  const innerEndAdjustedRadius = innerRadius + innerEnd;
  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
  ctx.beginPath();
  if (circular) {
    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
    if (outerEnd > 0) {
      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
    }
    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
    ctx.lineTo(p4.x, p4.y);
    if (innerEnd > 0) {
      const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
      ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
    }
    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
    if (innerStart > 0) {
      const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
      ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
    }
    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
    ctx.lineTo(p8.x, p8.y);
    if (outerStart > 0) {
      const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
      ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
    }
  } else {
    ctx.moveTo(x, y);
    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
    ctx.lineTo(outerStartX, outerStartY);
    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
    ctx.lineTo(outerEndX, outerEndY);
  }
  ctx.closePath();
}
function drawArc(ctx, element, offset, spacing, circular) {
  const { fullCircles, startAngle, circumference } = element;
  let endAngle = element.endAngle;
  if (fullCircles) {
    pathArc(ctx, element, offset, spacing, endAngle, circular);
    for (let i = 0; i < fullCircles; ++i) {
      ctx.fill();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  pathArc(ctx, element, offset, spacing, endAngle, circular);
  ctx.fill();
  return endAngle;
}
function drawBorder(ctx, element, offset, spacing, circular) {
  const { fullCircles, startAngle, circumference, options } = element;
  const { borderWidth, borderJoinStyle } = options;
  const inner = options.borderAlign === "inner";
  if (!borderWidth) {
    return;
  }
  if (inner) {
    ctx.lineWidth = borderWidth * 2;
    ctx.lineJoin = borderJoinStyle || "round";
  } else {
    ctx.lineWidth = borderWidth;
    ctx.lineJoin = borderJoinStyle || "bevel";
  }
  let endAngle = element.endAngle;
  if (fullCircles) {
    pathArc(ctx, element, offset, spacing, endAngle, circular);
    for (let i = 0; i < fullCircles; ++i) {
      ctx.stroke();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + (circumference % TAU || TAU);
    }
  }
  if (inner) {
    clipArc(ctx, element, endAngle);
  }
  if (!fullCircles) {
    pathArc(ctx, element, offset, spacing, endAngle, circular);
    ctx.stroke();
  }
}
var ArcElement = class extends Element {
  constructor(cfg) {
    super();
    this.options = void 0;
    this.circumference = void 0;
    this.startAngle = void 0;
    this.endAngle = void 0;
    this.innerRadius = void 0;
    this.outerRadius = void 0;
    this.pixelMargin = 0;
    this.fullCircles = 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(chartX, chartY, useFinalPosition) {
    const point = this.getProps([
      "x",
      "y"
    ], useFinalPosition);
    const { angle, distance } = getAngleFromPoint(point, {
      x: chartX,
      y: chartY
    });
    const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius",
      "circumference"
    ], useFinalPosition);
    const rAdjust = this.options.spacing / 2;
    const _circumference = valueOrDefault(circumference, endAngle - startAngle);
    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);
    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
    return betweenAngles && withinRadius;
  }
  getCenterPoint(useFinalPosition) {
    const { x, y, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
      "x",
      "y",
      "startAngle",
      "endAngle",
      "innerRadius",
      "outerRadius",
      "circumference"
    ], useFinalPosition);
    const { offset, spacing } = this.options;
    const halfAngle = (startAngle + endAngle) / 2;
    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
    return {
      x: x + Math.cos(halfAngle) * halfRadius,
      y: y + Math.sin(halfAngle) * halfRadius
    };
  }
  tooltipPosition(useFinalPosition) {
    return this.getCenterPoint(useFinalPosition);
  }
  draw(ctx) {
    const { options, circumference } = this;
    const offset = (options.offset || 0) / 4;
    const spacing = (options.spacing || 0) / 2;
    const circular = options.circular;
    this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
      return;
    }
    ctx.save();
    const halfAngle = (this.startAngle + this.endAngle) / 2;
    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));
    const radiusOffset = offset * fix;
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    drawArc(ctx, this, radiusOffset, spacing, circular);
    drawBorder(ctx, this, radiusOffset, spacing, circular);
    ctx.restore();
  }
};
__publicField(ArcElement, "id", "arc");
__publicField(ArcElement, "defaults", {
  borderAlign: "center",
  borderColor: "#fff",
  borderJoinStyle: void 0,
  borderRadius: 0,
  borderWidth: 2,
  offset: 0,
  spacing: 0,
  angle: void 0,
  circular: true
});
__publicField(ArcElement, "defaultRoutes", {
  backgroundColor: "backgroundColor"
});
function getBarBounds(bar, useFinalPosition) {
  const { x, y, base, width, height } = bar.getProps([
    "x",
    "y",
    "base",
    "width",
    "height"
  ], useFinalPosition);
  let left, right, top, bottom, half;
  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x, base);
    right = Math.max(x, base);
    top = y - half;
    bottom = y + half;
  } else {
    half = width / 2;
    left = x - half;
    right = x + half;
    top = Math.min(y, base);
    bottom = Math.max(y, base);
  }
  return {
    left,
    top,
    right,
    bottom
  };
}
function skipOrLimit(skip2, value, min, max) {
  return skip2 ? 0 : _limitValue(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
  const value = bar.options.borderWidth;
  const skip2 = bar.borderSkipped;
  const o = toTRBL(value);
  return {
    t: skipOrLimit(skip2.top, o.top, 0, maxH),
    r: skipOrLimit(skip2.right, o.right, 0, maxW),
    b: skipOrLimit(skip2.bottom, o.bottom, 0, maxH),
    l: skipOrLimit(skip2.left, o.left, 0, maxW)
  };
}
function parseBorderRadius(bar, maxW, maxH) {
  const { enableBorderRadius } = bar.getProps([
    "enableBorderRadius"
  ]);
  const value = bar.options.borderRadius;
  const o = toTRBLCorners(value);
  const maxR = Math.min(maxW, maxH);
  const skip2 = bar.borderSkipped;
  const enableBorder = enableBorderRadius || isObject(value);
  return {
    topLeft: skipOrLimit(!enableBorder || skip2.top || skip2.left, o.topLeft, 0, maxR),
    topRight: skipOrLimit(!enableBorder || skip2.top || skip2.right, o.topRight, 0, maxR),
    bottomLeft: skipOrLimit(!enableBorder || skip2.bottom || skip2.left, o.bottomLeft, 0, maxR),
    bottomRight: skipOrLimit(!enableBorder || skip2.bottom || skip2.right, o.bottomRight, 0, maxR)
  };
}
function boundingRects(bar) {
  const bounds = getBarBounds(bar);
  const width = bounds.right - bounds.left;
  const height = bounds.bottom - bounds.top;
  const border = parseBorderWidth(bar, width / 2, height / 2);
  const radius = parseBorderRadius(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height,
      radius
    },
    inner: {
      x: bounds.left + border.l,
      y: bounds.top + border.t,
      w: width - border.l - border.r,
      h: height - border.t - border.b,
      radius: {
        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
      }
    }
  };
}
function inRange(bar, x, y, useFinalPosition) {
  const skipX = x === null;
  const skipY = y === null;
  const skipBoth = skipX && skipY;
  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
  ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
  const x = rect.x !== refRect.x ? -amount : 0;
  const y = rect.y !== refRect.y ? -amount : 0;
  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
  const h4 = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
  return {
    x: rect.x + x,
    y: rect.y + y,
    w: rect.w + w,
    h: rect.h + h4,
    radius: rect.radius
  };
}
var BarElement = class extends Element {
  constructor(cfg) {
    super();
    this.options = void 0;
    this.horizontal = void 0;
    this.base = void 0;
    this.width = void 0;
    this.height = void 0;
    this.inflateAmount = void 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  draw(ctx) {
    const { inflateAmount, options: { borderColor, backgroundColor } } = this;
    const { inner, outer } = boundingRects(this);
    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
    ctx.save();
    if (outer.w !== inner.w || outer.h !== inner.h) {
      ctx.beginPath();
      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
      ctx.clip();
      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
      ctx.fillStyle = borderColor;
      ctx.fill("evenodd");
    }
    ctx.beginPath();
    addRectPath(ctx, inflateRect(inner, inflateAmount));
    ctx.fillStyle = backgroundColor;
    ctx.fill();
    ctx.restore();
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    return inRange(this, mouseX, mouseY, useFinalPosition);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange(this, mouseX, null, useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange(this, null, mouseY, useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const { x, y, base, horizontal } = this.getProps([
      "x",
      "y",
      "base",
      "horizontal"
    ], useFinalPosition);
    return {
      x: horizontal ? (x + base) / 2 : x,
      y: horizontal ? y : (y + base) / 2
    };
  }
  getRange(axis) {
    return axis === "x" ? this.width / 2 : this.height / 2;
  }
};
__publicField(BarElement, "id", "bar");
__publicField(BarElement, "defaults", {
  borderSkipped: "start",
  borderWidth: 0,
  borderRadius: 0,
  inflateAmount: "auto",
  pointStyle: void 0
});
__publicField(BarElement, "defaultRoutes", {
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
var getBoxSize = (labelOpts, fontSize) => {
  let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
  }
  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};
var itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
var Legend = class extends Element {
  constructor(config) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this.legendItems = void 0;
    this.columnSizes = void 0;
    this.lineWidths = void 0;
    this.maxHeight = void 0;
    this.maxWidth = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.height = void 0;
    this.width = void 0;
    this._margins = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight, margins) {
    this.maxWidth = maxWidth;
    this.maxHeight = maxHeight;
    this._margins = margins;
    this.setDimensions();
    this.buildLabels();
    this.fit();
  }
  setDimensions() {
    if (this.isHorizontal()) {
      this.width = this.maxWidth;
      this.left = this._margins.left;
      this.right = this.width;
    } else {
      this.height = this.maxHeight;
      this.top = this._margins.top;
      this.bottom = this.height;
    }
  }
  buildLabels() {
    const labelOpts = this.options.labels || {};
    let legendItems = callback(labelOpts.generateLabels, [
      this.chart
    ], this) || [];
    if (labelOpts.filter) {
      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));
    }
    if (labelOpts.sort) {
      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));
    }
    if (this.options.reverse) {
      legendItems.reverse();
    }
    this.legendItems = legendItems;
  }
  fit() {
    const { options, ctx } = this;
    if (!options.display) {
      this.width = this.height = 0;
      return;
    }
    const labelOpts = options.labels;
    const labelFont = toFont(labelOpts.font);
    const fontSize = labelFont.size;
    const titleHeight = this._computeTitleHeight();
    const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;
    if (this.isHorizontal()) {
      width = this.maxWidth;
      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = this.maxHeight;
      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
    }
    this.width = Math.min(width, options.maxWidth || this.maxWidth);
    this.height = Math.min(height, options.maxHeight || this.maxHeight);
  }
  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const { ctx, maxWidth, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const lineWidths = this.lineWidths = [
      0
    ];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = "left";
    ctx.textBaseline = "middle";
    let row = -1;
    let top = -lineHeight;
    this.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }
      hitboxes[i] = {
        left: 0,
        top,
        row,
        width: itemWidth,
        height: itemHeight
      };
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }
  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
    const { ctx, maxHeight, options: { labels: { padding } } } = this;
    const hitboxes = this.legendHitBoxes = [];
    const columnSizes = this.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    this.legendItems.forEach((legendItem, i) => {
      const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({
          width: currentColWidth,
          height: currentColHeight
        });
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }
      hitboxes[i] = {
        left,
        top: currentColHeight,
        col,
        width: itemWidth,
        height: itemHeight
      };
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({
      width: currentColWidth,
      height: currentColHeight
    });
    return totalWidth;
  }
  adjustHitBoxes() {
    if (!this.options.display) {
      return;
    }
    const titleHeight = this._computeTitleHeight();
    const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);
    if (this.isHorizontal()) {
      let row = 0;
      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);
        }
        hitbox.top += this.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
      for (const hitbox1 of hitboxes) {
        if (hitbox1.col !== col) {
          col = hitbox1.col;
          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
        }
        hitbox1.top = top;
        hitbox1.left += this.left + padding;
        hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);
        top += hitbox1.height + padding;
      }
    }
  }
  isHorizontal() {
    return this.options.position === "top" || this.options.position === "bottom";
  }
  draw() {
    if (this.options.display) {
      const ctx = this.ctx;
      clipArea(ctx, this);
      this._draw();
      unclipArea(ctx);
    }
  }
  _draw() {
    const { options: opts, columnSizes, lineWidths, ctx } = this;
    const { align, labels: labelOpts } = opts;
    const defaultColor = defaults.color;
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const labelFont = toFont(labelOpts.font);
    const { padding } = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor;
    this.drawTitle();
    ctx.textAlign = rtlHelper.textAlign("left");
    ctx.textBaseline = "middle";
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
    const drawLegendBox = function(x, y, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }
      ctx.save();
      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);
      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
      ctx.lineCap = valueOrDefault(legendItem.lineCap, "butt");
      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);
      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, "miter");
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);
      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));
      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxHeight * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x, boxWidth / 2);
        const centerY = y + halfFontSize;
        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
      } else {
        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
        const borderRadius = toTRBLCorners(legendItem.borderRadius);
        ctx.beginPath();
        if (Object.values(borderRadius).some((v) => v !== 0)) {
          addRoundedRectPath(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }
        ctx.fill();
        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }
      ctx.restore();
    };
    const fillText = function(x, y, legendItem) {
      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };
    const isHorizontal = this.isHorizontal();
    const titleHeight = this._computeTitleHeight();
    if (isHorizontal) {
      cursor = {
        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),
        y: this.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor = {
        x: this.left + padding,
        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
        line: 0
      };
    }
    overrideTextDirection(this.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    this.legendItems.forEach((legendItem, i) => {
      ctx.strokeStyle = legendItem.fontColor;
      ctx.fillStyle = legendItem.fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x = cursor.x;
      let y = cursor.y;
      rtlHelper.setWidth(this.width);
      if (isHorizontal) {
        if (i > 0 && x + width + padding > this.right) {
          y = cursor.y += lineHeight;
          cursor.line++;
          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);
        }
      } else if (i > 0 && y + lineHeight > this.bottom) {
        x = cursor.x = x + columnSizes[cursor.line].width + padding;
        cursor.line++;
        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
      }
      const realX = rtlHelper.x(x);
      drawLegendBox(realX, y, legendItem);
      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
      fillText(rtlHelper.x(x), y, legendItem);
      if (isHorizontal) {
        cursor.x += width + padding;
      } else if (typeof legendItem.text !== "string") {
        const fontLineHeight = labelFont.lineHeight;
        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);
      } else {
        cursor.y += lineHeight;
      }
    });
    restoreTextDirection(this.ctx, opts.textDirection);
  }
  drawTitle() {
    const opts = this.options;
    const titleOpts = opts.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    if (!titleOpts.display) {
      return;
    }
    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);
    const ctx = this.ctx;
    const position = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y;
    let left = this.left;
    let maxWidth = this.width;
    if (this.isHorizontal()) {
      maxWidth = Math.max(...this.lineWidths);
      y = this.top + topPaddingPlusHalfFontSize;
      left = _alignStartEnd(opts.align, left, this.right - maxWidth);
    } else {
      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
    }
    const x = _alignStartEnd(position, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));
    ctx.textBaseline = "middle";
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    renderText(ctx, titleOpts.text, x, y, titleFont);
  }
  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = toFont(titleOpts.font);
    const titlePadding = toPadding(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }
  _getLegendItemAt(x, y) {
    let i, hitBox, lh;
    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {
      lh = this.legendHitBoxes;
      for (i = 0; i < lh.length; ++i) {
        hitBox = lh[i];
        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {
          return this.legendItems[i];
        }
      }
    }
    return null;
  }
  handleEvent(e) {
    const opts = this.options;
    if (!isListened(e.type, opts)) {
      return;
    }
    const hoveredItem = this._getLegendItemAt(e.x, e.y);
    if (e.type === "mousemove" || e.type === "mouseout") {
      const previous = this._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);
      if (previous && !sameItem) {
        callback(opts.onLeave, [
          e,
          previous,
          this
        ], this);
      }
      this._hoveredItem = hoveredItem;
      if (hoveredItem && !sameItem) {
        callback(opts.onHover, [
          e,
          hoveredItem,
          this
        ], this);
      }
    } else if (hoveredItem) {
      callback(opts.onClick, [
        e,
        hoveredItem,
        this
      ], this);
    }
  }
};
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
  return {
    itemWidth,
    itemHeight
  };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
  let legendItemText = legendItem.text;
  if (legendItemText && typeof legendItemText !== "string") {
    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);
  }
  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
  let itemHeight = _itemHeight;
  if (typeof legendItem.text !== "string") {
    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
  }
  return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;
  return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
  if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === "click" || type === "mouseup")) {
    return true;
  }
  return false;
}
var plugin_legend = {
  id: "legend",
  _element: Legend,
  start(chart, _args, options) {
    const legend = chart.legend = new Legend({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, legend, options);
    layouts.addBox(chart, legend);
  },
  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },
  beforeUpdate(chart, _args, options) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options);
    legend.options = options;
  },
  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },
  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },
  defaults: {
    display: true,
    position: "top",
    align: "center",
    fullSize: true,
    reverse: false,
    weight: 1e3,
    onClick(e, legendItem, legend) {
      const index = legendItem.datasetIndex;
      const ci = legend.chart;
      if (ci.isDatasetVisible(index)) {
        ci.hide(index);
        legendItem.hidden = true;
      } else {
        ci.show(index);
        legendItem.hidden = false;
      }
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (ctx) => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const { labels: { usePointStyle, pointStyle, textAlign, color: color2, useBorderRadius, borderRadius } } = chart.legend.options;
        return chart._getSortedDatasetMetas().map((meta) => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
          const borderWidth = toPadding(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color2,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
            datasetIndex: meta.index
          };
        }, this);
      }
    },
    title: {
      color: (ctx) => ctx.chart.options.color,
      display: false,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: (name2) => !name2.startsWith("on"),
    labels: {
      _scriptable: (name2) => ![
        "generateLabels",
        "filter",
        "sort"
      ].includes(name2)
    }
  }
};
var Title = class extends Element {
  constructor(config) {
    super();
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this._padding = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.left = void 0;
    this.right = void 0;
    this.width = void 0;
    this.height = void 0;
    this.position = void 0;
    this.weight = void 0;
    this.fullSize = void 0;
  }
  update(maxWidth, maxHeight) {
    const opts = this.options;
    this.left = 0;
    this.top = 0;
    if (!opts.display) {
      this.width = this.height = this.right = this.bottom = 0;
      return;
    }
    this.width = this.right = maxWidth;
    this.height = this.bottom = maxHeight;
    const lineCount = isArray(opts.text) ? opts.text.length : 1;
    this._padding = toPadding(opts.padding);
    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;
    if (this.isHorizontal()) {
      this.height = textSize;
    } else {
      this.width = textSize;
    }
  }
  isHorizontal() {
    const pos = this.options.position;
    return pos === "top" || pos === "bottom";
  }
  _drawArgs(offset) {
    const { top, left, bottom, right, options } = this;
    const align = options.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    if (this.isHorizontal()) {
      titleX = _alignStartEnd(align, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options.position === "left") {
        titleX = left + offset;
        titleY = _alignStartEnd(align, bottom, top);
        rotation = PI * -0.5;
      } else {
        titleX = right - offset;
        titleY = _alignStartEnd(align, top, bottom);
        rotation = PI * 0.5;
      }
      maxWidth = bottom - top;
    }
    return {
      titleX,
      titleY,
      maxWidth,
      rotation
    };
  }
  draw() {
    const ctx = this.ctx;
    const opts = this.options;
    if (!opts.display) {
      return;
    }
    const fontOpts = toFont(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + this._padding.top;
    const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
    renderText(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: _toLeftRightCenter(opts.align),
      textBaseline: "middle",
      translation: [
        titleX,
        titleY
      ]
    });
  }
};
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var plugin_title = {
  id: "title",
  _element: Title,
  start(chart, _args, options) {
    createTitle(chart, options);
  },
  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },
  beforeUpdate(chart, _args, options) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "bold"
    },
    fullSize: true,
    padding: 10,
    position: "top",
    text: "",
    weight: 2e3
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
var map2 = /* @__PURE__ */ new WeakMap();
var plugin_subtitle = {
  id: "subtitle",
  start(chart, _args, options) {
    const title = new Title({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, title, options);
    layouts.addBox(chart, title);
    map2.set(chart, title);
  },
  stop(chart) {
    layouts.removeBox(chart, map2.get(chart));
    map2.delete(chart);
  },
  beforeUpdate(chart, _args, options) {
    const title = map2.get(chart);
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: "center",
    display: false,
    font: {
      weight: "normal"
    },
    fullSize: true,
    padding: 0,
    position: "top",
    text: "",
    weight: 1500
  },
  defaultRoutes: {
    color: "color"
  },
  descriptors: {
    _scriptable: true,
    _indexable: false
  }
};
var positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }
    let i, len;
    let x = 0;
    let y = 0;
    let count = 0;
    for (i = 0, len = items.length; i < len; ++i) {
      const el = items[i].element;
      if (el && el.hasValue()) {
        const pos = el.tooltipPosition();
        x += pos.x;
        y += pos.y;
        ++count;
      }
    }
    return {
      x: x / count,
      y: y / count
    };
  },
  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }
    let x = eventPosition.x;
    let y = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i, len, nearestElement;
    for (i = 0, len = items.length; i < len; ++i) {
      const el = items[i].element;
      if (el && el.hasValue()) {
        const center = el.getCenterPoint();
        const d = distanceBetweenPoints(eventPosition, center);
        if (d < minDistance) {
          minDistance = d;
          nearestElement = el;
        }
      }
    }
    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x = tp.x;
      y = tp.y;
    }
    return {
      x,
      y
    };
  }
};
function pushOrConcat(base, toPush) {
  if (toPush) {
    if (isArray(toPush)) {
      Array.prototype.push.apply(base, toPush);
    } else {
      base.push(toPush);
    }
  }
  return base;
}
function splitNewlines(str) {
  if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
    return str.split("\n");
  }
  return str;
}
function createTooltipItem(chart, item) {
  const { element, datasetIndex, index } = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const { label, value } = controller.getLabelAndValue(index);
  return {
    chart,
    label,
    parsed: controller.getParsed(index),
    raw: chart.data.datasets[datasetIndex].data[index],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index,
    datasetIndex,
    element
  };
}
function getTooltipSize(tooltip, options) {
  const ctx = tooltip.chart.ctx;
  const { body, footer, title } = tooltip;
  const { boxWidth, boxHeight } = options;
  const bodyFont = toFont(options.bodyFont);
  const titleFont = toFont(options.titleFont);
  const footerFont = toFont(options.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = toPadding(options.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
  }
  if (footerLineCount) {
    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  each(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
  each(body, (bodyItem) => {
    each(bodyItem.before, maxLineWidth);
    each(bodyItem.lines, maxLineWidth);
    each(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  each(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {
    width,
    height
  };
}
function determineYAlign(chart, size) {
  const { y, height } = size;
  if (y < height / 2) {
    return "top";
  } else if (y > chart.height - height / 2) {
    return "bottom";
  }
  return "center";
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
  const { x, width } = size;
  const caret = options.caretSize + options.caretPadding;
  if (xAlign === "left" && x + width + caret > chart.width) {
    return true;
  }
  if (xAlign === "right" && x - width - caret < 0) {
    return true;
  }
}
function determineXAlign(chart, options, size, yAlign) {
  const { x, width } = size;
  const { width: chartWidth, chartArea: { left, right } } = chart;
  let xAlign = "center";
  if (yAlign === "center") {
    xAlign = x <= (left + right) / 2 ? "left" : "right";
  } else if (x <= width / 2) {
    xAlign = "left";
  } else if (x >= chartWidth - width / 2) {
    xAlign = "right";
  }
  if (doesNotFitWithAlign(xAlign, chart, options, size)) {
    xAlign = "center";
  }
  return xAlign;
}
function determineAlignment(chart, options, size) {
  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
  return {
    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
    yAlign
  };
}
function alignX(size, xAlign) {
  let { x, width } = size;
  if (xAlign === "right") {
    x -= width;
  } else if (xAlign === "center") {
    x -= width / 2;
  }
  return x;
}
function alignY(size, yAlign, paddingAndSize) {
  let { y, height } = size;
  if (yAlign === "top") {
    y += paddingAndSize;
  } else if (yAlign === "bottom") {
    y -= height + paddingAndSize;
  } else {
    y -= height / 2;
  }
  return y;
}
function getBackgroundPoint(options, size, alignment, chart) {
  const { caretSize, caretPadding, cornerRadius } = options;
  const { xAlign, yAlign } = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
  let x = alignX(size, xAlign);
  const y = alignY(size, yAlign, paddingAndSize);
  if (yAlign === "center") {
    if (xAlign === "left") {
      x += paddingAndSize;
    } else if (xAlign === "right") {
      x -= paddingAndSize;
    }
  } else if (xAlign === "left") {
    x -= Math.max(topLeft, bottomLeft) + caretSize;
  } else if (xAlign === "right") {
    x += Math.max(topRight, bottomRight) + caretSize;
  }
  return {
    x: _limitValue(x, 0, chart.width - size.width),
    y: _limitValue(y, 0, chart.height - size.height)
  };
}
function getAlignedX(tooltip, align, options) {
  const padding = toPadding(options.padding);
  return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback2) {
  return pushOrConcat([], splitNewlines(callback2));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return createContext(parent, {
    tooltip,
    tooltipItems,
    type: "tooltip"
  });
}
function overrideCallbacks(callbacks, context) {
  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}
var defaultCallbacks = {
  beforeTitle: noop,
  title(tooltipItems) {
    if (tooltipItems.length > 0) {
      const item = tooltipItems[0];
      const labels = item.chart.data.labels;
      const labelCount = labels ? labels.length : 0;
      if (this && this.options && this.options.mode === "dataset") {
        return item.dataset.label || "";
      } else if (item.label) {
        return item.label;
      } else if (labelCount > 0 && item.dataIndex < labelCount) {
        return labels[item.dataIndex];
      }
    }
    return "";
  },
  afterTitle: noop,
  beforeBody: noop,
  beforeLabel: noop,
  label(tooltipItem) {
    if (this && this.options && this.options.mode === "dataset") {
      return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
    }
    let label = tooltipItem.dataset.label || "";
    if (label) {
      label += ": ";
    }
    const value = tooltipItem.formattedValue;
    if (!isNullOrUndef(value)) {
      label += value;
    }
    return label;
  },
  labelColor(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      borderColor: options.borderColor,
      backgroundColor: options.backgroundColor,
      borderWidth: options.borderWidth,
      borderDash: options.borderDash,
      borderDashOffset: options.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle(tooltipItem) {
    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
    const options = meta.controller.getStyle(tooltipItem.dataIndex);
    return {
      pointStyle: options.pointStyle,
      rotation: options.rotation
    };
  },
  afterLabel: noop,
  afterBody: noop,
  beforeFooter: noop,
  footer: noop,
  afterFooter: noop
};
function invokeCallbackWithFallback(callbacks, name2, ctx, arg) {
  const result = callbacks[name2].call(ctx, arg);
  if (typeof result === "undefined") {
    return defaultCallbacks[name2].call(ctx, arg);
  }
  return result;
}
var Tooltip = class extends Element {
  constructor(config) {
    super();
    this.opacity = 0;
    this._active = [];
    this._eventPosition = void 0;
    this._size = void 0;
    this._cachedAnimations = void 0;
    this._tooltipItems = [];
    this.$animations = void 0;
    this.$context = void 0;
    this.chart = config.chart;
    this.options = config.options;
    this.dataPoints = void 0;
    this.title = void 0;
    this.beforeBody = void 0;
    this.body = void 0;
    this.afterBody = void 0;
    this.footer = void 0;
    this.xAlign = void 0;
    this.yAlign = void 0;
    this.x = void 0;
    this.y = void 0;
    this.height = void 0;
    this.width = void 0;
    this.caretX = void 0;
    this.caretY = void 0;
    this.labelColors = void 0;
    this.labelPointStyles = void 0;
    this.labelTextColors = void 0;
  }
  initialize(options) {
    this.options = options;
    this._cachedAnimations = void 0;
    this.$context = void 0;
  }
  _resolveAnimations() {
    const cached = this._cachedAnimations;
    if (cached) {
      return cached;
    }
    const chart = this.chart;
    const options = this.options.setContext(this.getContext());
    const opts = options.enabled && chart.options.animation && options.animations;
    const animations = new Animations(this.chart, opts);
    if (opts._cacheable) {
      this._cachedAnimations = Object.freeze(animations);
    }
    return animations;
  }
  getContext() {
    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
  }
  getTitle(context, options) {
    const { callbacks } = options;
    const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context);
    const title = invokeCallbackWithFallback(callbacks, "title", this, context);
    const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }
  getBeforeBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "beforeBody", this, tooltipItems));
  }
  getBody(tooltipItems, options) {
    const { callbacks } = options;
    const bodyItems = [];
    each(tooltipItems, (context) => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context);
      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context)));
      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context));
      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }
  getAfterBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "afterBody", this, tooltipItems));
  }
  getFooter(tooltipItems, options) {
    const { callbacks } = options;
    const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
    const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
    const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }
  _createItems(options) {
    const active = this._active;
    const data = this.chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i, len;
    for (i = 0, len = active.length; i < len; ++i) {
      tooltipItems.push(createTooltipItem(this.chart, active[i]));
    }
    if (options.filter) {
      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));
    }
    if (options.itemSort) {
      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));
    }
    each(tooltipItems, (context) => {
      const scoped = overrideCallbacks(options.callbacks, context);
      labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context));
      labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context));
      labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context));
    });
    this.labelColors = labelColors;
    this.labelPointStyles = labelPointStyles;
    this.labelTextColors = labelTextColors;
    this.dataPoints = tooltipItems;
    return tooltipItems;
  }
  update(changed, replay) {
    const options = this.options.setContext(this.getContext());
    const active = this._active;
    let properties;
    let tooltipItems = [];
    if (!active.length) {
      if (this.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position = positioners[options.position].call(this, active, this._eventPosition);
      tooltipItems = this._createItems(options);
      this.title = this.getTitle(tooltipItems, options);
      this.beforeBody = this.getBeforeBody(tooltipItems, options);
      this.body = this.getBody(tooltipItems, options);
      this.afterBody = this.getAfterBody(tooltipItems, options);
      this.footer = this.getFooter(tooltipItems, options);
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, size);
      const alignment = determineAlignment(this.chart, options, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
      this.xAlign = alignment.xAlign;
      this.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size.width,
        height: size.height,
        caretX: position.x,
        caretY: position.y
      };
    }
    this._tooltipItems = tooltipItems;
    this.$context = void 0;
    if (properties) {
      this._resolveAnimations().update(this, properties);
    }
    if (changed && options.external) {
      options.external.call(this, {
        chart: this.chart,
        tooltip: this,
        replay
      });
    }
  }
  drawCaret(tooltipPoint, ctx, size, options) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }
  getCaretPosition(tooltipPoint, size, options) {
    const { xAlign, yAlign } = this;
    const { caretSize, cornerRadius } = options;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(cornerRadius);
    const { x: ptX, y: ptY } = tooltipPoint;
    const { width, height } = size;
    let x1, x2, x3, y1, y2, y3;
    if (yAlign === "center") {
      y2 = ptY + height / 2;
      if (xAlign === "left") {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y2 + caretSize;
        y3 = y2 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y2 - caretSize;
        y3 = y2 + caretSize;
      }
      x3 = x1;
    } else {
      if (xAlign === "left") {
        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
      } else if (xAlign === "right") {
        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
      } else {
        x2 = this.caretX;
      }
      if (yAlign === "top") {
        y1 = ptY;
        y2 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y2 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }
      y3 = y1;
    }
    return {
      x1,
      x2,
      x3,
      y1,
      y2,
      y3
    };
  }
  drawTitle(pt, ctx, options) {
    const title = this.title;
    const length = title.length;
    let titleFont, titleSpacing, i;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.titleAlign, options);
      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
      ctx.textBaseline = "middle";
      titleFont = toFont(options.titleFont);
      titleSpacing = options.titleSpacing;
      ctx.fillStyle = options.titleColor;
      ctx.font = titleFont.string;
      for (i = 0; i < length; ++i) {
        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;
        if (i + 1 === length) {
          pt.y += options.titleMarginBottom - titleSpacing;
        }
      }
    }
  }
  _drawColorBox(ctx, pt, i, rtlHelper, options) {
    const labelColors = this.labelColors[i];
    const labelPointStyle = this.labelPointStyles[i];
    const { boxHeight, boxWidth, boxPadding } = options;
    const bodyFont = toFont(options.bodyFont);
    const colorX = getAlignedX(this, "left", options);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;
    if (options.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options.multiKeyBackground;
      ctx.fillStyle = options.multiKeyBackground;
      drawPoint(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColors.borderColor;
      ctx.fillStyle = labelColors.backgroundColor;
      drawPoint(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;
      ctx.strokeStyle = labelColors.borderColor;
      ctx.setLineDash(labelColors.borderDash || []);
      ctx.lineDashOffset = labelColors.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);
      const borderRadius = toTRBLCorners(labelColors.borderRadius);
      if (Object.values(borderRadius).some((v) => v !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options.multiKeyBackground;
        addRoundedRectPath(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColors.backgroundColor;
        ctx.beginPath();
        addRoundedRectPath(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColors.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }
    ctx.fillStyle = this.labelTextColors[i];
  }
  drawBody(pt, ctx, options) {
    const { body } = this;
    const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
    const bodyFont = toFont(options.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
    const fillLineOfText = function(line) {
      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };
    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = "middle";
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(this, bodyAlignForCalculation, options);
    ctx.fillStyle = options.bodyColor;
    each(this.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
    for (i = 0, ilen = body.length; i < ilen; ++i) {
      bodyItem = body[i];
      textColor = this.labelTextColors[i];
      ctx.fillStyle = textColor;
      each(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;
      if (displayColors && lines.length) {
        this._drawColorBox(ctx, pt, i, rtlHelper, options);
        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }
      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }
      each(bodyItem.after, fillLineOfText);
    }
    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    each(this.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }
  drawFooter(pt, ctx, options) {
    const footer = this.footer;
    const length = footer.length;
    let footerFont, i;
    if (length) {
      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);
      pt.x = getAlignedX(this, options.footerAlign, options);
      pt.y += options.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
      ctx.textBaseline = "middle";
      footerFont = toFont(options.footerFont);
      ctx.fillStyle = options.footerColor;
      ctx.font = footerFont.string;
      for (i = 0; i < length; ++i) {
        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options.footerSpacing;
      }
    }
  }
  drawBackground(pt, ctx, tooltipSize, options) {
    const { xAlign, yAlign } = this;
    const { x, y } = pt;
    const { width, height } = tooltipSize;
    const { topLeft, topRight, bottomLeft, bottomRight } = toTRBLCorners(options.cornerRadius);
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x + topLeft, y);
    if (yAlign === "top") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x + width - topRight, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
    if (yAlign === "center" && xAlign === "right") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x + width, y + height - bottomRight);
    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
    if (yAlign === "bottom") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x + bottomLeft, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
    if (yAlign === "center" && xAlign === "left") {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x, y + topLeft);
    ctx.quadraticCurveTo(x, y, x + topLeft, y);
    ctx.closePath();
    ctx.fill();
    if (options.borderWidth > 0) {
      ctx.stroke();
    }
  }
  _updateAnimationTarget(options) {
    const chart = this.chart;
    const anims = this.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;
    if (animX || animY) {
      const position = positioners[options.position].call(this, this._active, this._eventPosition);
      if (!position) {
        return;
      }
      const size = this._size = getTooltipSize(this, options);
      const positionAndSize = Object.assign({}, position, this._size);
      const alignment = determineAlignment(chart, options, positionAndSize);
      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
      if (animX._to !== point.x || animY._to !== point.y) {
        this.xAlign = alignment.xAlign;
        this.yAlign = alignment.yAlign;
        this.width = size.width;
        this.height = size.height;
        this.caretX = position.x;
        this.caretY = position.y;
        this._resolveAnimations().update(this, point);
      }
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(ctx) {
    const options = this.options.setContext(this.getContext());
    let opacity = this.opacity;
    if (!opacity) {
      return;
    }
    this._updateAnimationTarget(options);
    const tooltipSize = {
      width: this.width,
      height: this.height
    };
    const pt = {
      x: this.x,
      y: this.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = toPadding(options.padding);
    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
    if (options.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      this.drawBackground(pt, ctx, tooltipSize, options);
      overrideTextDirection(ctx, options.textDirection);
      pt.y += padding.top;
      this.drawTitle(pt, ctx, options);
      this.drawBody(pt, ctx, options);
      this.drawFooter(pt, ctx, options);
      restoreTextDirection(ctx, options.textDirection);
      ctx.restore();
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements, eventPosition) {
    const lastActive = this._active;
    const active = activeElements.map(({ datasetIndex, index }) => {
      const meta = this.chart.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error("Cannot find a dataset at index " + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index],
        index
      };
    });
    const changed = !_elementsEqual(lastActive, active);
    const positionChanged = this._positionChanged(active, eventPosition);
    if (changed || positionChanged) {
      this._active = active;
      this._eventPosition = eventPosition;
      this._ignoreReplayEvents = true;
      this.update(true);
    }
  }
  handleEvent(e, replay, inChartArea = true) {
    if (replay && this._ignoreReplayEvents) {
      return false;
    }
    this._ignoreReplayEvents = false;
    const options = this.options;
    const lastActive = this._active || [];
    const active = this._getActiveElements(e, lastActive, replay, inChartArea);
    const positionChanged = this._positionChanged(active, e);
    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;
    if (changed) {
      this._active = active;
      if (options.enabled || options.external) {
        this._eventPosition = {
          x: e.x,
          y: e.y
        };
        this.update(true, replay);
      }
    }
    return changed;
  }
  _getActiveElements(e, lastActive, replay, inChartArea) {
    const options = this.options;
    if (e.type === "mouseout") {
      return [];
    }
    if (!inChartArea) {
      return lastActive;
    }
    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
    if (options.reverse) {
      active.reverse();
    }
    return active;
  }
  _positionChanged(active, e) {
    const { caretX, caretY, options } = this;
    const position = positioners[options.position].call(this, active, e);
    return position !== false && (caretX !== position.x || caretY !== position.y);
  }
};
__publicField(Tooltip, "positioners", positioners);
var plugin_tooltip = {
  id: "tooltip",
  _element: Tooltip,
  positioners,
  afterInit(chart, _args, options) {
    if (options) {
      chart.tooltip = new Tooltip({
        chart,
        options
      });
    }
  },
  beforeUpdate(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  reset(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  afterDraw(chart) {
    const tooltip = chart.tooltip;
    if (tooltip && tooltip._willRender()) {
      const args = {
        tooltip
      };
      if (chart.notifyPlugins("beforeTooltipDraw", {
        ...args,
        cancelable: true
      }) === false) {
        return;
      }
      tooltip.draw(chart.ctx);
      chart.notifyPlugins("afterTooltipDraw", args);
    }
  },
  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;
      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {
        args.changed = true;
      }
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: "#fff",
    displayColors: true,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "width",
          "height",
          "caretX",
          "caretY"
        ]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
    callbacks: defaultCallbacks
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: (name2) => name2 !== "filter" && name2 !== "itemSort" && name2 !== "external",
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: [
    "interaction"
  ]
};
var addIfString = (labels, raw, index, addedLabels) => {
  if (typeof raw === "string") {
    index = labels.push(raw) - 1;
    addedLabels.unshift({
      index,
      label: raw
    });
  } else if (isNaN(raw)) {
    index = null;
  }
  return index;
};
function findOrAddLabel(labels, raw, index, addedLabels) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index, addedLabels);
  }
  const last = labels.lastIndexOf(raw);
  return first !== last ? index : first;
}
var validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);
function _getLabelForValue(value) {
  const labels = this.getLabels();
  if (value >= 0 && value < labels.length) {
    return labels[value];
  }
  return value;
}
var CategoryScale = class extends Scale {
  constructor(cfg) {
    super(cfg);
    this._startValue = void 0;
    this._valueRange = 0;
    this._addedLabels = [];
  }
  init(scaleOptions) {
    const added = this._addedLabels;
    if (added.length) {
      const labels = this.getLabels();
      for (const { index, label } of added) {
        if (labels[index] === label) {
          labels.splice(index, 1);
        }
      }
      this._addedLabels = [];
    }
    super.init(scaleOptions);
  }
  parse(raw, index) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    const labels = this.getLabels();
    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);
    return validIndex(index, labels.length - 1);
  }
  determineDataLimits() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this.getMinMax(true);
    if (this.options.bounds === "ticks") {
      if (!minDefined) {
        min = 0;
      }
      if (!maxDefined) {
        max = this.getLabels().length - 1;
      }
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const min = this.min;
    const max = this.max;
    const offset = this.options.offset;
    const ticks = [];
    let labels = this.getLabels();
    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    this._startValue = this.min - (offset ? 0.5 : 0);
    for (let value = min; value <= max; value++) {
      ticks.push({
        value
      });
    }
    return ticks;
  }
  getLabelForValue(value) {
    return _getLabelForValue.call(this, value);
  }
  configure() {
    super.configure();
    if (!this.isHorizontal()) {
      this._reversePixels = !this._reversePixels;
    }
  }
  getPixelForValue(value) {
    if (typeof value !== "number") {
      value = this.parse(value);
    }
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getPixelForTick(index) {
    const ticks = this.ticks;
    if (index < 0 || index > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index].value);
  }
  getValueForPixel(pixel) {
    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
};
__publicField(CategoryScale, "id", "category");
__publicField(CategoryScale, "defaults", {
  ticks: {
    callback: _getLabelForValue
  }
});
function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const { min: rmin, max: rmax } = dataRange;
  const minDefined = !isNullOrUndef(min);
  const maxDefined = !isNullOrUndef(max);
  const countDefined = !isNullOrUndef(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
    return [
      {
        value: rmin
      },
      {
        value: rmax
      }
    ];
  }
  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  if (numSpaces > maxSpaces) {
    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;
  }
  if (!isNullOrUndef(precision)) {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }
  if (bounds === "ticks") {
    niceMin = Math.floor(rmin / spacing) * spacing;
    niceMax = Math.ceil(rmax / spacing) * spacing;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1e3)) {
    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
    spacing = (max - min) / numSpaces;
    niceMin = min;
    niceMax = max;
  } else if (countDefined) {
    niceMin = minDefined ? min : niceMin;
    niceMax = maxDefined ? max : niceMax;
    numSpaces = count - 1;
    spacing = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing;
    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));
  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min) {
      ticks.push({
        value: min
      });
      if (niceMin < min) {
        j++;
      }
      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min) {
      j++;
    }
  }
  for (; j < numSpaces; ++j) {
    ticks.push({
      value: Math.round((niceMin + j * spacing) * factor) / factor
    });
  }
  if (maxDefined && includeBounds && niceMax !== max) {
    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max;
    } else {
      ticks.push({
        value: max
      });
    }
  } else if (!maxDefined || niceMax === max) {
    ticks.push({
      value: niceMax
    });
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
  const rad = toRadians(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 1e-3;
  const length = 0.75 * minSpacing * ("" + value).length;
  return Math.min(minSpacing / ratio, length);
}
var LinearScaleBase = class extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._endValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index) {
    if (isNullOrUndef(raw)) {
      return null;
    }
    if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }
    return +raw;
  }
  handleTickRangeOptions() {
    const { beginAtZero } = this.options;
    const { minDefined, maxDefined } = this.getUserBounds();
    let { min, max } = this;
    const setMin = (v) => min = minDefined ? min : v;
    const setMax = (v) => max = maxDefined ? max : v;
    if (beginAtZero) {
      const minSign = sign(min);
      const maxSign = sign(max);
      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }
    if (min === max) {
      let offset = max === 0 ? 1 : Math.abs(max * 0.05);
      setMax(max + offset);
      if (!beginAtZero) {
        setMin(min - offset);
      }
    }
    this.min = min;
    this.max = max;
  }
  getTickLimit() {
    const tickOpts = this.options.ticks;
    let { maxTicksLimit, stepSize } = tickOpts;
    let maxTicks;
    if (stepSize) {
      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
      if (maxTicks > 1e3) {
        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
        maxTicks = 1e3;
      }
    } else {
      maxTicks = this.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }
    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }
    return maxTicks;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const opts = this.options;
    const tickOpts = opts.ticks;
    let maxTicks = this.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = this._range || this;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  configure() {
    const ticks = this.ticks;
    let start = this.min;
    let end = this.max;
    super.configure();
    if (this.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }
    this._startValue = start;
    this._endValue = end;
    this._valueRange = end - start;
  }
  getLabelForValue(value) {
    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
};
var LinearScale = class extends LinearScaleBase {
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? min : 0;
    this.max = isNumberFinite(max) ? max : 1;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    const horizontal = this.isHorizontal();
    const length = horizontal ? this.width : this.height;
    const minRotation = toRadians(this.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 1e-3;
    const tickFont = this._resolveTickFontOptions(0);
    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
  }
  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }
};
__publicField(LinearScale, "id", "linear");
__publicField(LinearScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.numeric
  }
});
var log10Floor = (v) => Math.floor(log10(v));
var changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);
function isMajor(tickVal) {
  const remain = tickVal / Math.pow(10, log10Floor(tickVal));
  return remain === 1;
}
function steps(min, max, rangeExp) {
  const rangeStep = Math.pow(10, rangeExp);
  const start = Math.floor(min / rangeStep);
  const end = Math.ceil(max / rangeStep);
  return end - start;
}
function startExp(min, max) {
  const range = max - min;
  let rangeExp = log10Floor(range);
  while (steps(min, max, rangeExp) > 10) {
    rangeExp++;
  }
  while (steps(min, max, rangeExp) < 10) {
    rangeExp--;
  }
  return Math.min(rangeExp, log10Floor(min));
}
function generateTicks(generationOptions, { min, max }) {
  min = finiteOrDefault(generationOptions.min, min);
  const ticks = [];
  const minExp = log10Floor(min);
  let exp = startExp(min, max);
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  const stepSize = Math.pow(10, exp);
  const base = minExp > exp ? Math.pow(10, minExp) : 0;
  const start = Math.round((min - base) * precision) / precision;
  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;
  let significand = Math.floor((start - offset) / Math.pow(10, exp));
  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
  while (value < max) {
    ticks.push({
      value,
      major: isMajor(value),
      significand
    });
    if (significand >= 10) {
      significand = significand < 15 ? 15 : 20;
    } else {
      significand++;
    }
    if (significand >= 20) {
      exp++;
      significand = 2;
      precision = exp >= 0 ? 1 : precision;
    }
    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
  }
  const lastTick = finiteOrDefault(generationOptions.max, value);
  ticks.push({
    value: lastTick,
    major: isMajor(lastTick),
    significand
  });
  return ticks;
}
var LogarithmicScale = class extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = void 0;
    this.end = void 0;
    this._startValue = void 0;
    this._valueRange = 0;
  }
  parse(raw, index) {
    const value = LinearScaleBase.prototype.parse.apply(this, [
      raw,
      index
    ]);
    if (value === 0) {
      this._zero = true;
      return void 0;
    }
    return isNumberFinite(value) && value > 0 ? value : null;
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(true);
    this.min = isNumberFinite(min) ? Math.max(0, min) : null;
    this.max = isNumberFinite(max) ? Math.max(0, max) : null;
    if (this.options.beginAtZero) {
      this._zero = true;
    }
    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {
      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
    }
    this.handleTickRangeOptions();
  }
  handleTickRangeOptions() {
    const { minDefined, maxDefined } = this.getUserBounds();
    let min = this.min;
    let max = this.max;
    const setMin = (v) => min = minDefined ? min : v;
    const setMax = (v) => max = maxDefined ? max : v;
    if (min === max) {
      if (min <= 0) {
        setMin(1);
        setMax(10);
      } else {
        setMin(changeExponent(min, -1));
        setMax(changeExponent(max, 1));
      }
    }
    if (min <= 0) {
      setMin(changeExponent(max, -1));
    }
    if (max <= 0) {
      setMax(changeExponent(min, 1));
    }
    this.min = min;
    this.max = max;
  }
  buildTicks() {
    const opts = this.options;
    const generationOptions = {
      min: this._userMin,
      max: this._userMax
    };
    const ticks = generateTicks(generationOptions, this);
    if (opts.bounds === "ticks") {
      _setMinAndMaxByKey(ticks, this, "value");
    }
    if (opts.reverse) {
      ticks.reverse();
      this.start = this.max;
      this.end = this.min;
    } else {
      this.start = this.min;
      this.end = this.max;
    }
    return ticks;
  }
  getLabelForValue(value) {
    return value === void 0 ? "0" : formatNumber(value, this.chart.options.locale, this.options.ticks.format);
  }
  configure() {
    const start = this.min;
    super.configure();
    this._startValue = log10(start);
    this._valueRange = log10(this.max) - log10(start);
  }
  getPixelForValue(value) {
    if (value === void 0 || value === 0) {
      value = this.min;
    }
    if (value === null || isNaN(value)) {
      return NaN;
    }
    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    const decimal = this.getDecimalForPixel(pixel);
    return Math.pow(10, this._startValue + decimal * this._valueRange);
  }
};
__publicField(LogarithmicScale, "id", "logarithmic");
__publicField(LogarithmicScale, "defaults", {
  ticks: {
    callback: Ticks.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
});
function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    const padding = toPadding(tickOpts.backdropPadding);
    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;
  }
  return 0;
}
function measureLabelSize(ctx, font, label) {
  label = isArray(label) ? label : [
    label
  ];
  return {
    w: _longestText(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}
function determineLimits(angle, pos, size, min, max) {
  if (angle === min || angle === max) {
    return {
      start: pos - size / 2,
      end: pos + size / 2
    };
  } else if (angle < min || angle > max) {
    return {
      start: pos - size,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size
  };
}
function fitWithPointLabels(scale) {
  const orig = {
    l: scale.left + scale._padding.left,
    r: scale.right - scale._padding.right,
    t: scale.top + scale._padding.top,
    b: scale.bottom - scale._padding.bottom
  };
  const limits = Object.assign({}, orig);
  const labelSizes = [];
  const padding = [];
  const valueCount = scale._pointLabels.length;
  const pointLabelOpts = scale.options.pointLabels;
  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;
  for (let i = 0; i < valueCount; i++) {
    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
    padding[i] = opts.padding;
    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
    const plFont = toFont(opts.font);
    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
    labelSizes[i] = textSize;
    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);
    const angle = Math.round(toDegrees(angleRadians));
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    updateLimits(limits, orig, angleRadians, hLimits, vLimits);
  }
  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
  const sin = Math.abs(Math.sin(angle));
  const cos = Math.abs(Math.cos(angle));
  let x = 0;
  let y = 0;
  if (hLimits.start < orig.l) {
    x = (orig.l - hLimits.start) / sin;
    limits.l = Math.min(limits.l, orig.l - x);
  } else if (hLimits.end > orig.r) {
    x = (hLimits.end - orig.r) / sin;
    limits.r = Math.max(limits.r, orig.r + x);
  }
  if (vLimits.start < orig.t) {
    y = (orig.t - vLimits.start) / cos;
    limits.t = Math.min(limits.t, orig.t - y);
  } else if (vLimits.end > orig.b) {
    y = (vLimits.end - orig.b) / cos;
    limits.b = Math.max(limits.b, orig.b + y);
  }
}
function buildPointLabelItems(scale, labelSizes, padding) {
  const items = [];
  const valueCount = scale._pointLabels.length;
  const opts = scale.options;
  const extra = getTickBackdropHeight(opts) / 2;
  const outerDistance = scale.drawingArea;
  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;
  for (let i = 0; i < valueCount; i++) {
    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);
    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));
    const size = labelSizes[i];
    const y = yForAngle(pointLabelPosition.y, size.h, angle);
    const textAlign = getTextAlignForAngle(angle);
    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
    items.push({
      x: pointLabelPosition.x,
      y,
      textAlign,
      left,
      top: y,
      right: left + size.w,
      bottom: y + size.h
    });
  }
  return items;
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return "center";
  } else if (angle < 180) {
    return "left";
  }
  return "right";
}
function leftForTextAlign(x, w, align) {
  if (align === "right") {
    x -= w;
  } else if (align === "center") {
    x -= w / 2;
  }
  return x;
}
function yForAngle(y, h4, angle) {
  if (angle === 90 || angle === 270) {
    y -= h4 / 2;
  } else if (angle > 270 || angle < 90) {
    y -= h4;
  }
  return y;
}
function drawPointLabels(scale, labelCount) {
  const { ctx, options: { pointLabels } } = scale;
  for (let i = labelCount - 1; i >= 0; i--) {
    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
    const plFont = toFont(optsAtIndex.font);
    const { x, y, textAlign, left, top, right, bottom } = scale._pointLabelItems[i];
    const { backdropColor } = optsAtIndex;
    if (!isNullOrUndef(backdropColor)) {
      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);
      const padding = toPadding(optsAtIndex.backdropPadding);
      ctx.fillStyle = backdropColor;
      const backdropLeft = left - padding.left;
      const backdropTop = top - padding.top;
      const backdropWidth = right - left + padding.width;
      const backdropHeight = bottom - top + padding.height;
      if (Object.values(borderRadius).some((v) => v !== 0)) {
        ctx.beginPath();
        addRoundedRectPath(ctx, {
          x: backdropLeft,
          y: backdropTop,
          w: backdropWidth,
          h: backdropHeight,
          radius: borderRadius
        });
        ctx.fill();
      } else {
        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
      }
    }
    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
      color: optsAtIndex.color,
      textAlign,
      textBaseline: "middle"
    });
  }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
  const { ctx } = scale;
  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);
  } else {
    let pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (let i = 1; i < labelCount; i++) {
      pointPosition = scale.getPointPosition(i, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
  const ctx = scale.ctx;
  const circular = gridLineOpts.circular;
  const { color: color2, lineWidth } = gridLineOpts;
  if (!circular && !labelCount || !color2 || !lineWidth || radius < 0) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = color2;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(borderOpts.dash);
  ctx.lineDashOffset = borderOpts.dashOffset;
  ctx.beginPath();
  pathRadiusLine(scale, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function createPointLabelContext(parent, index, label) {
  return createContext(parent, {
    label,
    index,
    type: "pointLabel"
  });
}
var RadialLinearScale = class extends LinearScaleBase {
  constructor(cfg) {
    super(cfg);
    this.xCenter = void 0;
    this.yCenter = void 0;
    this.drawingArea = void 0;
    this._pointLabels = [];
    this._pointLabelItems = [];
  }
  setDimensions() {
    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);
    const w = this.width = this.maxWidth - padding.width;
    const h4 = this.height = this.maxHeight - padding.height;
    this.xCenter = Math.floor(this.left + w / 2 + padding.left);
    this.yCenter = Math.floor(this.top + h4 / 2 + padding.top);
    this.drawingArea = Math.floor(Math.min(w, h4) / 2);
  }
  determineDataLimits() {
    const { min, max } = this.getMinMax(false);
    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;
    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;
    this.handleTickRangeOptions();
  }
  computeTickLimit() {
    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  }
  generateTickLabels(ticks) {
    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
    this._pointLabels = this.getLabels().map((value, index) => {
      const label = callback(this.options.pointLabels.callback, [
        value,
        index
      ], this);
      return label || label === 0 ? label : "";
    }).filter((v, i) => this.chart.getDataVisibility(i));
  }
  fit() {
    const opts = this.options;
    if (opts.display && opts.pointLabels.display) {
      fitWithPointLabels(this);
    } else {
      this.setCenterPoint(0, 0, 0, 0);
    }
  }
  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
  }
  getIndexAngle(index) {
    const angleMultiplier = TAU / (this._pointLabels.length || 1);
    const startAngle = this.options.startAngle || 0;
    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));
  }
  getDistanceFromCenterForValue(value) {
    if (isNullOrUndef(value)) {
      return NaN;
    }
    const scalingFactor = this.drawingArea / (this.max - this.min);
    if (this.options.reverse) {
      return (this.max - value) * scalingFactor;
    }
    return (value - this.min) * scalingFactor;
  }
  getValueForDistanceFromCenter(distance) {
    if (isNullOrUndef(distance)) {
      return NaN;
    }
    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
  }
  getPointLabelContext(index) {
    const pointLabels = this._pointLabels || [];
    if (index >= 0 && index < pointLabels.length) {
      const pointLabel = pointLabels[index];
      return createPointLabelContext(this.getContext(), index, pointLabel);
    }
  }
  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;
    return {
      x: Math.cos(angle) * distanceFromCenter + this.xCenter,
      y: Math.sin(angle) * distanceFromCenter + this.yCenter,
      angle
    };
  }
  getPointPositionForValue(index, value) {
    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
  }
  getBasePosition(index) {
    return this.getPointPositionForValue(index || 0, this.getBaseValue());
  }
  getPointLabelPosition(index) {
    const { left, top, right, bottom } = this._pointLabelItems[index];
    return {
      left,
      top,
      right,
      bottom
    };
  }
  drawBackground() {
    const { backgroundColor, grid: { circular } } = this.options;
    if (backgroundColor) {
      const ctx = this.ctx;
      ctx.save();
      ctx.beginPath();
      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
      ctx.closePath();
      ctx.fillStyle = backgroundColor;
      ctx.fill();
      ctx.restore();
    }
  }
  drawGrid() {
    const ctx = this.ctx;
    const opts = this.options;
    const { angleLines, grid, border } = opts;
    const labelCount = this._pointLabels.length;
    let i, offset, position;
    if (opts.pointLabels.display) {
      drawPointLabels(this, labelCount);
    }
    if (grid.display) {
      this.ticks.forEach((tick, index) => {
        if (index !== 0) {
          offset = this.getDistanceFromCenterForValue(tick.value);
          const context = this.getContext(index);
          const optsAtIndex = grid.setContext(context);
          const optsAtIndexBorder = border.setContext(context);
          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
        }
      });
    }
    if (angleLines.display) {
      ctx.save();
      for (i = labelCount - 1; i >= 0; i--) {
        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
        const { color: color2, lineWidth } = optsAtIndex;
        if (!lineWidth || !color2) {
          continue;
        }
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color2;
        ctx.setLineDash(optsAtIndex.borderDash);
        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
        position = this.getPointPosition(i, offset);
        ctx.beginPath();
        ctx.moveTo(this.xCenter, this.yCenter);
        ctx.lineTo(position.x, position.y);
        ctx.stroke();
      }
      ctx.restore();
    }
  }
  drawBorder() {
  }
  drawLabels() {
    const ctx = this.ctx;
    const opts = this.options;
    const tickOpts = opts.ticks;
    if (!tickOpts.display) {
      return;
    }
    const startAngle = this.getIndexAngle(0);
    let offset, width;
    ctx.save();
    ctx.translate(this.xCenter, this.yCenter);
    ctx.rotate(startAngle);
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    this.ticks.forEach((tick, index) => {
      if (index === 0 && !opts.reverse) {
        return;
      }
      const optsAtIndex = tickOpts.setContext(this.getContext(index));
      const tickFont = toFont(optsAtIndex.font);
      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
      if (optsAtIndex.showLabelBackdrop) {
        ctx.font = tickFont.string;
        width = ctx.measureText(tick.label).width;
        ctx.fillStyle = optsAtIndex.backdropColor;
        const padding = toPadding(optsAtIndex.backdropPadding);
        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
      }
      renderText(ctx, tick.label, 0, -offset, tickFont, {
        color: optsAtIndex.color
      });
    });
    ctx.restore();
  }
  drawTitle() {
  }
};
__publicField(RadialLinearScale, "id", "radialLinear");
__publicField(RadialLinearScale, "defaults", {
  display: true,
  animate: true,
  position: "chartArea",
  angleLines: {
    display: true,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0
  },
  grid: {
    circular: false
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: true,
    callback: Ticks.formatters.numeric
  },
  pointLabels: {
    backdropColor: void 0,
    backdropPadding: 2,
    display: true,
    font: {
      size: 10
    },
    callback(label) {
      return label;
    },
    padding: 5,
    centerPointLabels: false
  }
});
__publicField(RadialLinearScale, "defaultRoutes", {
  "angleLines.color": "borderColor",
  "pointLabels.color": "color",
  "ticks.color": "color"
});
__publicField(RadialLinearScale, "descriptors", {
  angleLines: {
    _fallback: "grid"
  }
});
var INTERVALS = {
  millisecond: {
    common: true,
    size: 1,
    steps: 1e3
  },
  second: {
    common: true,
    size: 1e3,
    steps: 60
  },
  minute: {
    common: true,
    size: 6e4,
    steps: 60
  },
  hour: {
    common: true,
    size: 36e5,
    steps: 24
  },
  day: {
    common: true,
    size: 864e5,
    steps: 30
  },
  week: {
    common: false,
    size: 6048e5,
    steps: 4
  },
  month: {
    common: true,
    size: 2628e6,
    steps: 12
  },
  quarter: {
    common: false,
    size: 7884e6,
    steps: 4
  },
  year: {
    common: true,
    size: 3154e7
  }
};
var UNITS = /* @__PURE__ */ Object.keys(INTERVALS);
function sorter(a, b) {
  return a - b;
}
function parse(scale, input) {
  if (isNullOrUndef(input)) {
    return null;
  }
  const adapter = scale._adapter;
  const { parser, round: round2, isoWeekday } = scale._parseOpts;
  let value = input;
  if (typeof parser === "function") {
    value = parser(value);
  }
  if (!isNumberFinite(value)) {
    value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round2) {
    value = round2 === "week" && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round2);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  const ilen = UNITS.length;
  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    const interval = INTERVALS[UNITS[i]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    const unit = UNITS[i];
    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    if (INTERVALS[UNITS[i]].common) {
      return UNITS[i];
    }
  }
}
function addTick(ticks, time, timestamps) {
  if (!timestamps) {
    ticks[time] = true;
  } else if (timestamps.length) {
    const { lo, hi } = _lookup(timestamps, time);
    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale, ticks, map3, majorUnit) {
  const adapter = scale._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index = map3[major];
    if (index >= 0) {
      ticks[index].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
  const ticks = [];
  const map3 = {};
  const ilen = values.length;
  let i, value;
  for (i = 0; i < ilen; ++i) {
    value = values[i];
    map3[value] = i;
    ticks.push({
      value,
      major: false
    });
  }
  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map3, majorUnit);
}
var TimeScale = class extends Scale {
  constructor(props) {
    super(props);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = "day";
    this._majorUnit = void 0;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = void 0;
  }
  init(scaleOpts, opts = {}) {
    const time = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    adapter.init(opts);
    mergeIf(time.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time.parser,
      round: time.round,
      isoWeekday: time.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }
  parse(raw, index) {
    if (raw === void 0) {
      return null;
    }
    return parse(this, raw);
  }
  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const options = this.options;
    const adapter = this._adapter;
    const unit = options.time.unit || "day";
    let { min, max, minDefined, maxDefined } = this.getUserBounds();
    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min = Math.min(min, bounds.min);
      }
      if (!maxDefined && !isNaN(bounds.max)) {
        max = Math.max(max, bounds.max);
      }
    }
    if (!minDefined || !maxDefined) {
      _applyBounds(this._getLabelBounds());
      if (options.bounds !== "ticks" || options.ticks.source !== "labels") {
        _applyBounds(this.getMinMax(false));
      }
    }
    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
    this.min = Math.min(min, max - 1);
    this.max = Math.max(min + 1, max);
  }
  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    if (arr.length) {
      min = arr[0];
      max = arr[arr.length - 1];
    }
    return {
      min,
      max
    };
  }
  buildTicks() {
    const options = this.options;
    const timeOpts = options.time;
    const tickOpts = options.ticks;
    const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
    if (options.bounds === "ticks" && timestamps.length) {
      this.min = this._userMin || timestamps[0];
      this.max = this._userMax || timestamps[timestamps.length - 1];
    }
    const min = this.min;
    const max = this.max;
    const ticks = _filterBetween(timestamps, min, max);
    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
    this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? void 0 : determineMajorUnit(this._unit);
    this.initOffsets(timestamps);
    if (options.reverse) {
      ticks.reverse();
    }
    return ticksFromTimestamps(this, ticks, this._majorUnit);
  }
  afterAutoSkip() {
    if (this.options.offsetAfterAutoskip) {
      this.initOffsets(this.ticks.map((tick) => +tick.value));
    }
  }
  initOffsets(timestamps = []) {
    let start = 0;
    let end = 0;
    let first, last;
    if (this.options.offset && timestamps.length) {
      first = this.getDecimalForValue(timestamps[0]);
      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
      }
      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }
    const limit = timestamps.length < 3 ? 0.5 : 0.25;
    start = _limitValue(start, 0, limit);
    end = _limitValue(end, 0, limit);
    this._offsets = {
      start,
      end,
      factor: 1 / (start + 1 + end)
    };
  }
  _generate() {
    const adapter = this._adapter;
    const min = this.min;
    const max = this.max;
    const options = this.options;
    const timeOpts = options.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
    const stepSize = valueOrDefault(options.ticks.stepSize, 1);
    const weekday = minor === "week" ? timeOpts.isoWeekday : false;
    const hasWeekday = isNumber(weekday) || weekday === true;
    const ticks = {};
    let first = min;
    let time, count;
    if (hasWeekday) {
      first = +adapter.startOf(first, "isoWeek", weekday);
    }
    first = +adapter.startOf(first, hasWeekday ? "day" : minor);
    if (adapter.diff(max, min, minor) > 1e5 * stepSize) {
      throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
    }
    const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
      addTick(ticks, time, timestamps);
    }
    if (time === max || options.bounds === "ticks" || count === 1) {
      addTick(ticks, time, timestamps);
    }
    return Object.keys(ticks).sort((a, b) => a - b).map((x) => +x);
  }
  getLabelForValue(value) {
    const adapter = this._adapter;
    const timeOpts = this.options.time;
    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }
    return adapter.format(value, timeOpts.displayFormats.datetime);
  }
  format(value, format) {
    const options = this.options;
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const fmt = format || formats[unit];
    return this._adapter.format(value, fmt);
  }
  _tickFormatFunction(time, index, ticks, format) {
    const options = this.options;
    const formatter = options.ticks.callback;
    if (formatter) {
      return callback(formatter, [
        time,
        index,
        ticks
      ], this);
    }
    const formats = options.time.displayFormats;
    const unit = this._unit;
    const majorUnit = this._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick = ticks[index];
    const major = majorUnit && majorFormat && tick && tick.major;
    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
  }
  generateTickLabels(ticks) {
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      tick.label = this._tickFormatFunction(tick.value, i, ticks);
    }
  }
  getDecimalForValue(value) {
    return value === null ? NaN : (value - this.min) / (this.max - this.min);
  }
  getPixelForValue(value) {
    const offsets = this._offsets;
    const pos = this.getDecimalForValue(value);
    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return this.min + pos * (this.max - this.min);
  }
  _getLabelSize(label) {
    const ticksOpts = this.options.ticks;
    const tickLabelWidth = this.ctx.measureText(label).width;
    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);
    const tickFontSize = this._resolveTickFontOptions(0).size;
    return {
      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
    };
  }
  _getLabelCapacity(exampleTime) {
    const timeOpts = this.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
      exampleTime
    ], this._majorUnit), format);
    const size = this._getLabelSize(exampleLabel);
    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
    return capacity > 0 ? capacity : 1;
  }
  getDataTimestamps() {
    let timestamps = this._cache.data || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const metas = this.getMatchingVisibleMetas();
    if (this._normalized && metas.length) {
      return this._cache.data = metas[0].controller.getAllParsedValues(this);
    }
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
    }
    return this._cache.data = this.normalize(timestamps);
  }
  getLabelTimestamps() {
    const timestamps = this._cache.labels || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const labels = this.getLabels();
    for (i = 0, ilen = labels.length; i < ilen; ++i) {
      timestamps.push(parse(this, labels[i]));
    }
    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
  }
  normalize(values) {
    return _arrayUnique(values.sort(sorter));
  }
};
__publicField(TimeScale, "id", "time");
__publicField(TimeScale, "defaults", {
  bounds: "data",
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: "millisecond",
    displayFormats: {}
  },
  ticks: {
    source: "auto",
    callback: false,
    major: {
      enabled: false
    }
  }
});
function interpolate3(table, val, reverse) {
  let lo = 0;
  let hi = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi].pos) {
      ({ lo, hi } = _lookupByKey(table, "pos", val));
    }
    ({ pos: prevSource, time: prevTarget } = table[lo]);
    ({ pos: nextSource, time: nextTarget } = table[hi]);
  } else {
    if (val >= table[lo].time && val <= table[hi].time) {
      ({ lo, hi } = _lookupByKey(table, "time", val));
    }
    ({ time: prevSource, pos: prevTarget } = table[lo]);
    ({ time: nextSource, pos: nextTarget } = table[hi]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
var TimeSeriesScale = class extends TimeScale {
  constructor(props) {
    super(props);
    this._table = [];
    this._minPos = void 0;
    this._tableRange = void 0;
  }
  initOffsets() {
    const timestamps = this._getTimestampsForTable();
    const table = this._table = this.buildLookupTable(timestamps);
    this._minPos = interpolate3(table, this.min);
    this._tableRange = interpolate3(table, this.max) - this._minPos;
    super.initOffsets(timestamps);
  }
  buildLookupTable(timestamps) {
    const { min, max } = this;
    const items = [];
    const table = [];
    let i, ilen, prev, curr, next;
    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
      curr = timestamps[i];
      if (curr >= min && curr <= max) {
        items.push(curr);
      }
    }
    if (items.length < 2) {
      return [
        {
          time: min,
          pos: 0
        },
        {
          time: max,
          pos: 1
        }
      ];
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      next = items[i + 1];
      prev = items[i - 1];
      curr = items[i];
      if (Math.round((next + prev) / 2) !== curr) {
        table.push({
          time: curr,
          pos: i / (ilen - 1)
        });
      }
    }
    return table;
  }
  _getTimestampsForTable() {
    let timestamps = this._cache.all || [];
    if (timestamps.length) {
      return timestamps;
    }
    const data = this.getDataTimestamps();
    const label = this.getLabelTimestamps();
    if (data.length && label.length) {
      timestamps = this.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }
    timestamps = this._cache.all = timestamps;
    return timestamps;
  }
  getDecimalForValue(value) {
    return (interpolate3(this._table, value) - this._minPos) / this._tableRange;
  }
  getValueForPixel(pixel) {
    const offsets = this._offsets;
    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate3(this._table, decimal * this._tableRange + this._minPos, true);
  }
};
__publicField(TimeSeriesScale, "id", "timeseries");
__publicField(TimeSeriesScale, "defaults", TimeScale.defaults);

// src/stats-modal.tsx
Chart.register(
  BarElement,
  BarController,
  plugin_legend,
  plugin_title,
  plugin_tooltip,
  plugin_subtitle,
  CategoryScale,
  LinearScale,
  PieController,
  ArcElement
);
var StatsModal = class extends import_obsidian4.Modal {
  constructor(app2, plugin) {
    super(app2);
    this.plugin = plugin;
    this.titleEl.setText(`${t("STATS_TITLE")} `);
    this.titleEl.addClass("sr-centered");
    this.titleEl.innerHTML += /* @__PURE__ */ (0, import_vhtml2.default)("select", { id: "sr-chart-period" }, /* @__PURE__ */ (0, import_vhtml2.default)("option", { value: "month", selected: true }, t("MONTH")), /* @__PURE__ */ (0, import_vhtml2.default)("option", { value: "quarter" }, t("QUARTER")), /* @__PURE__ */ (0, import_vhtml2.default)("option", { value: "year" }, t("YEAR")), /* @__PURE__ */ (0, import_vhtml2.default)("option", { value: "lifetime" }, t("LIFETIME")));
    this.modalEl.style.height = "100%";
    this.modalEl.style.width = "100%";
    if (import_obsidian4.Platform.isMobile) {
      this.contentEl.style.display = "block";
    }
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.style.textAlign = "center";
    let maxN = Math.max(...getKeysPreserveType(this.plugin.dueDatesFlashcards));
    for (let dueOffset = 0; dueOffset <= maxN; dueOffset++) {
      if (!Object.prototype.hasOwnProperty.call(this.plugin.dueDatesFlashcards, dueOffset)) {
        this.plugin.dueDatesFlashcards[dueOffset] = 0;
      }
    }
    const dueDatesFlashcardsCopy = { 0: 0 };
    for (const [dueOffset, dueCount] of getTypedObjectEntries(this.plugin.dueDatesFlashcards)) {
      if (dueOffset <= 0) {
        dueDatesFlashcardsCopy[0] += dueCount;
      } else {
        dueDatesFlashcardsCopy[dueOffset] = dueCount;
      }
    }
    const cardStats = this.plugin.cardStats;
    const scheduledCount = cardStats.youngCount + cardStats.matureCount;
    maxN = Math.max(maxN, 1);
    contentEl.innerHTML += /* @__PURE__ */ (0, import_vhtml2.default)("div", null, /* @__PURE__ */ (0, import_vhtml2.default)("canvas", { id: "forecastChart" }), /* @__PURE__ */ (0, import_vhtml2.default)("span", { id: "forecastChartSummary" }), /* @__PURE__ */ (0, import_vhtml2.default)("br", null), /* @__PURE__ */ (0, import_vhtml2.default)("br", null), /* @__PURE__ */ (0, import_vhtml2.default)("canvas", { id: "intervalsChart" }), /* @__PURE__ */ (0, import_vhtml2.default)("span", { id: "intervalsChartSummary" }), /* @__PURE__ */ (0, import_vhtml2.default)("br", null), /* @__PURE__ */ (0, import_vhtml2.default)("br", null), /* @__PURE__ */ (0, import_vhtml2.default)("canvas", { id: "easesChart" }), /* @__PURE__ */ (0, import_vhtml2.default)("span", { id: "easesChartSummary" }), /* @__PURE__ */ (0, import_vhtml2.default)("br", null), /* @__PURE__ */ (0, import_vhtml2.default)("br", null), /* @__PURE__ */ (0, import_vhtml2.default)("canvas", { id: "cardTypesChart" }), /* @__PURE__ */ (0, import_vhtml2.default)("br", null), /* @__PURE__ */ (0, import_vhtml2.default)("span", { id: "cardTypesChartSummary" }));
    createStatsChart(
      "bar",
      "forecastChart",
      t("FORECAST"),
      t("FORECAST_DESC"),
      Object.keys(dueDatesFlashcardsCopy),
      Object.values(dueDatesFlashcardsCopy),
      t("REVIEWS_PER_DAY", { avg: (scheduledCount / maxN).toFixed(1) }),
      t("SCHEDULED"),
      t("DAYS"),
      t("NUMBER_OF_CARDS")
    );
    maxN = Math.max(...getKeysPreserveType(cardStats.intervals));
    for (let interval = 0; interval <= maxN; interval++) {
      if (!Object.prototype.hasOwnProperty.call(cardStats.intervals, interval)) {
        cardStats.intervals[interval] = 0;
      }
    }
    const average_interval = textInterval(
      Math.round(
        getTypedObjectEntries(cardStats.intervals).map(([interval, count]) => interval * count).reduce((a, b) => a + b, 0) / scheduledCount * 10
      ) / 10 || 0,
      false
    ), longest_interval = textInterval(
      Math.max(...getKeysPreserveType(cardStats.intervals)) || 0,
      false
    );
    createStatsChart(
      "bar",
      "intervalsChart",
      t("INTERVALS"),
      t("INTERVALS_DESC"),
      Object.keys(cardStats.intervals),
      Object.values(cardStats.intervals),
      t("INTERVALS_SUMMARY", { avg: average_interval, longest: longest_interval }),
      t("COUNT"),
      t("DAYS"),
      t("NUMBER_OF_CARDS")
    );
    const eases = getKeysPreserveType(cardStats.eases);
    for (let ease = Math.min(...eases); ease <= Math.max(...eases); ease++) {
      if (!Object.prototype.hasOwnProperty.call(cardStats.eases, ease)) {
        cardStats.eases[ease] = 0;
      }
    }
    const average_ease = Math.round(
      getTypedObjectEntries(cardStats.eases).map(([ease, count]) => ease * count).reduce((a, b) => a + b, 0) / scheduledCount
    ) || 0;
    createStatsChart(
      "bar",
      "easesChart",
      t("EASES"),
      "",
      Object.keys(cardStats.eases),
      Object.values(cardStats.eases),
      t("EASES_SUMMARY", { avgEase: average_ease }),
      t("COUNT"),
      t("EASES"),
      t("NUMBER_OF_CARDS")
    );
    const totalCardsCount = this.plugin.deckTree.totalFlashcards;
    createStatsChart(
      "pie",
      "cardTypesChart",
      t("CARD_TYPES"),
      t("CARD_TYPES_DESC"),
      [
        `${t("CARD_TYPE_NEW")} - ${Math.round(
          cardStats.newCount / totalCardsCount * 100
        )}%`,
        `${t("CARD_TYPE_YOUNG")} - ${Math.round(
          cardStats.youngCount / totalCardsCount * 100
        )}%`,
        `${t("CARD_TYPE_MATURE")} - ${Math.round(
          cardStats.matureCount / totalCardsCount * 100
        )}%`
      ],
      [cardStats.newCount, cardStats.youngCount, cardStats.matureCount],
      t("CARD_TYPES_SUMMARY", { totalCardsCount })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
function createStatsChart(type, canvasId, title, subtitle, labels, data, summary, seriesTitle = "", xAxisTitle = "", yAxisTitle = "") {
  const style = getComputedStyle(document.body);
  const textColor = style.getPropertyValue("--text-normal");
  let scales = {}, backgroundColor = ["#2196f3"];
  if (type !== "pie") {
    scales = {
      x: {
        title: {
          display: true,
          text: xAxisTitle,
          color: textColor
        }
      },
      y: {
        title: {
          display: true,
          text: yAxisTitle,
          color: textColor
        }
      }
    };
  } else {
    backgroundColor = ["#2196f3", "#4caf50", "green"];
  }
  const shouldFilter = canvasId === "forecastChart" || canvasId === "intervalsChart";
  const statsChart = new Chart(document.getElementById(canvasId), {
    type,
    data: {
      labels: shouldFilter ? labels.slice(0, 31) : labels,
      datasets: [
        {
          label: seriesTitle,
          backgroundColor,
          data: shouldFilter ? data.slice(0, 31) : data
        }
      ]
    },
    options: {
      scales,
      plugins: {
        title: {
          display: true,
          text: title,
          font: {
            size: 22
          },
          color: textColor
        },
        subtitle: {
          display: true,
          text: subtitle,
          font: {
            size: 16,
            style: "italic"
          },
          color: textColor
        },
        legend: {
          display: false
        }
      },
      aspectRatio: 2
    }
  });
  if (shouldFilter) {
    const chartPeriodEl = document.getElementById("sr-chart-period");
    chartPeriodEl.addEventListener("click", () => {
      let filteredLabels, filteredData;
      const chartPeriod = chartPeriodEl.value;
      if (chartPeriod === "month") {
        filteredLabels = labels.slice(0, 31);
        filteredData = data.slice(0, 31);
      } else if (chartPeriod === "quarter") {
        filteredLabels = labels.slice(0, 91);
        filteredData = data.slice(0, 91);
      } else if (chartPeriod === "year") {
        filteredLabels = labels.slice(0, 366);
        filteredData = data.slice(0, 366);
      } else {
        filteredLabels = labels;
        filteredData = data;
      }
      statsChart.data.labels = filteredLabels;
      statsChart.data.datasets[0] = {
        label: seriesTitle,
        backgroundColor,
        data: filteredData
      };
      statsChart.update();
    });
  }
  document.getElementById(`${canvasId}Summary`).innerText = summary;
}

// src/sidebar.ts
var import_obsidian5 = require("obsidian");
var REVIEW_QUEUE_VIEW_TYPE = "review-queue-list-view";
var ReviewQueueListView = class extends import_obsidian5.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.registerEvent(this.app.workspace.on("file-open", () => this.redraw()));
    this.registerEvent(this.app.vault.on("rename", () => this.redraw()));
  }
  getViewType() {
    return REVIEW_QUEUE_VIEW_TYPE;
  }
  getDisplayText() {
    return t("NOTES_REVIEW_QUEUE");
  }
  getIcon() {
    return "SpacedRepIcon";
  }
  onHeaderMenu(menu) {
    menu.addItem((item) => {
      item.setTitle(t("CLOSE")).setIcon("cross").onClick(() => {
        this.app.workspace.detachLeavesOfType(REVIEW_QUEUE_VIEW_TYPE);
      });
    });
  }
  redraw() {
    const activeFile = this.app.workspace.getActiveFile();
    const rootEl = createDiv("nav-folder mod-root");
    const childrenEl = rootEl.createDiv("nav-folder-children");
    for (const deckKey in this.plugin.reviewDecks) {
      const deck = this.plugin.reviewDecks[deckKey];
      const deckCollapsed = !deck.activeFolders.has(deck.deckName);
      const deckFolderEl = this.createRightPaneFolder(
        childrenEl,
        deckKey,
        deckCollapsed,
        false,
        deck
      ).getElementsByClassName("nav-folder-children")[0];
      if (deck.newNotes.length > 0) {
        const newNotesFolderEl = this.createRightPaneFolder(
          deckFolderEl,
          t("NEW"),
          !deck.activeFolders.has(t("NEW")),
          deckCollapsed,
          deck
        );
        for (const newFile of deck.newNotes) {
          const fileIsOpen = activeFile && newFile.path === activeFile.path;
          if (fileIsOpen) {
            deck.activeFolders.add(deck.deckName);
            deck.activeFolders.add(t("NEW"));
            this.changeFolderIconToExpanded(newNotesFolderEl);
            this.changeFolderIconToExpanded(deckFolderEl);
          }
          this.createRightPaneFile(
            newNotesFolderEl,
            newFile,
            fileIsOpen,
            !deck.activeFolders.has(t("NEW")),
            deck,
            this.plugin
          );
        }
      }
      if (deck.scheduledNotes.length > 0) {
        const now = Date.now();
        let currUnix = -1;
        let schedFolderEl = null, folderTitle = "";
        const maxDaysToRender = this.plugin.data.settings.maxNDaysNotesReviewQueue;
        for (const sNote of deck.scheduledNotes) {
          if (sNote.dueUnix != currUnix) {
            const nDays = Math.ceil((sNote.dueUnix - now) / (24 * 3600 * 1e3));
            if (nDays > maxDaysToRender) {
              break;
            }
            if (nDays === -1) {
              folderTitle = t("YESTERDAY");
            } else if (nDays === 0) {
              folderTitle = t("TODAY");
            } else if (nDays === 1) {
              folderTitle = t("TOMORROW");
            } else {
              folderTitle = new Date(sNote.dueUnix).toDateString();
            }
            schedFolderEl = this.createRightPaneFolder(
              deckFolderEl,
              folderTitle,
              !deck.activeFolders.has(folderTitle),
              deckCollapsed,
              deck
            );
            currUnix = sNote.dueUnix;
          }
          const fileIsOpen = activeFile && sNote.note.path === activeFile.path;
          if (fileIsOpen) {
            deck.activeFolders.add(deck.deckName);
            deck.activeFolders.add(folderTitle);
            this.changeFolderIconToExpanded(schedFolderEl);
            this.changeFolderIconToExpanded(deckFolderEl);
          }
          this.createRightPaneFile(
            schedFolderEl,
            sNote.note,
            fileIsOpen,
            !deck.activeFolders.has(folderTitle),
            deck,
            this.plugin
          );
        }
      }
    }
    const contentEl = this.containerEl.children[1];
    contentEl.empty();
    contentEl.appendChild(rootEl);
  }
  createRightPaneFolder(parentEl, folderTitle, collapsed, hidden, deck) {
    const folderEl = parentEl.createDiv("nav-folder");
    const folderTitleEl = folderEl.createDiv("nav-folder-title");
    const childrenEl = folderEl.createDiv("nav-folder-children");
    const collapseIconEl = folderTitleEl.createDiv(
      "nav-folder-collapse-indicator collapse-icon"
    );
    collapseIconEl.innerHTML = COLLAPSE_ICON;
    if (collapsed) {
      collapseIconEl.childNodes[0].style.transform = "rotate(-90deg)";
    }
    folderTitleEl.createDiv("nav-folder-title-content").setText(folderTitle);
    if (hidden) {
      folderEl.style.display = "none";
    }
    folderTitleEl.onClickEvent(() => {
      for (const child of childrenEl.childNodes) {
        if (child.style.display === "block" || child.style.display === "") {
          child.style.display = "none";
          collapseIconEl.childNodes[0].style.transform = "rotate(-90deg)";
          deck.activeFolders.delete(folderTitle);
        } else {
          child.style.display = "block";
          collapseIconEl.childNodes[0].style.transform = "";
          deck.activeFolders.add(folderTitle);
        }
      }
    });
    return folderEl;
  }
  createRightPaneFile(folderEl, file, fileElActive, hidden, deck, plugin) {
    const navFileEl = folderEl.getElementsByClassName("nav-folder-children")[0].createDiv("nav-file");
    if (hidden) {
      navFileEl.style.display = "none";
    }
    const navFileTitle = navFileEl.createDiv("nav-file-title");
    if (fileElActive) {
      navFileTitle.addClass("is-active");
    }
    navFileTitle.createDiv("nav-file-title-content").setText(file.basename);
    navFileTitle.addEventListener(
      "click",
      async (event) => {
        event.preventDefault();
        plugin.lastSelectedReviewDeck = deck.deckName;
        await this.app.workspace.getLeaf().openFile(file);
        return false;
      },
      false
    );
    navFileTitle.addEventListener(
      "contextmenu",
      (event) => {
        event.preventDefault();
        const fileMenu = new import_obsidian5.Menu();
        this.app.workspace.trigger("file-menu", fileMenu, file, "my-context-menu", null);
        fileMenu.showAtPosition({
          x: event.pageX,
          y: event.pageY
        });
        return false;
      },
      false
    );
  }
  changeFolderIconToExpanded(folderEl) {
    const collapseIconEl = folderEl.find("div.nav-folder-collapse-indicator");
    collapseIconEl.childNodes[0].style.transform = "";
  }
};

// src/review-deck.ts
var import_obsidian6 = require("obsidian");
var ReviewDeck = class {
  constructor(name2) {
    this.newNotes = [];
    this.scheduledNotes = [];
    this.dueNotesCount = 0;
    this.deckName = name2;
    this.activeFolders = /* @__PURE__ */ new Set([this.deckName, t("TODAY")]);
  }
  sortNotes(pageranks) {
    this.newNotes = this.newNotes.sort(
      (a, b) => (pageranks[b.path] || 0) - (pageranks[a.path] || 0)
    );
    this.scheduledNotes = this.scheduledNotes.sort((a, b) => {
      const result = a.dueUnix - b.dueUnix;
      if (result != 0) {
        return result;
      }
      return (pageranks[b.note.path] || 0) - (pageranks[a.note.path] || 0);
    });
  }
};
var ReviewDeckSelectionModal = class extends import_obsidian6.FuzzySuggestModal {
  constructor(app2, deckKeys) {
    super(app2);
    this.deckKeys = [];
    this.deckKeys = deckKeys;
  }
  getItems() {
    return this.deckKeys;
  }
  getItemText(item) {
    return item;
  }
  onChooseItem(deckKey, _) {
    this.close();
    this.submitCallback(deckKey);
  }
};

// src/parser.ts
function parse2(text, singlelineCardSeparator, singlelineReversedCardSeparator, multilineCardSeparator, multilineReversedCardSeparator, convertHighlightsToClozes, convertBoldTextToClozes, convertCurlyBracketsToClozes) {
  let cardText = "";
  const cards = [];
  let cardType = null;
  let lineNo = 0;
  const lines = text.replaceAll("\r\n", "\n").split("\n");
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].length === 0) {
      if (cardType) {
        cards.push([cardType, cardText, lineNo]);
        cardType = null;
      }
      cardText = "";
      continue;
    } else if (lines[i].startsWith("<!--") && !lines[i].startsWith("<!--SR:")) {
      while (i + 1 < lines.length && !lines[i].includes("-->"))
        i++;
      i++;
      continue;
    }
    if (cardText.length > 0) {
      cardText += "\n";
    }
    cardText += lines[i];
    if (lines[i].includes(singlelineReversedCardSeparator) || lines[i].includes(singlelineCardSeparator)) {
      cardType = lines[i].includes(singlelineReversedCardSeparator) ? 1 /* SingleLineReversed */ : 0 /* SingleLineBasic */;
      cardText = lines[i];
      lineNo = i;
      if (i + 1 < lines.length && lines[i + 1].startsWith("<!--SR:")) {
        cardText += "\n" + lines[i + 1];
        i++;
      }
      cards.push([cardType, cardText, lineNo]);
      cardType = null;
      cardText = "";
    } else if (cardType === null && (convertHighlightsToClozes && /==.*?==/gm.test(lines[i]) || convertBoldTextToClozes && /\*\*.*?\*\*/gm.test(lines[i]) || convertCurlyBracketsToClozes && /{{.*?}}/gm.test(lines[i]))) {
      cardType = 4 /* Cloze */;
      lineNo = i;
    } else if (lines[i] === multilineCardSeparator) {
      cardType = 2 /* MultiLineBasic */;
      lineNo = i;
    } else if (lines[i] === multilineReversedCardSeparator) {
      cardType = 3 /* MultiLineReversed */;
      lineNo = i;
    } else if (lines[i].startsWith("```") || lines[i].startsWith("~~~")) {
      const codeBlockClose = lines[i].match(/`+|~+/)[0];
      while (i + 1 < lines.length && !lines[i + 1].startsWith(codeBlockClose)) {
        i++;
        cardText += "\n" + lines[i];
      }
      cardText += "\n" + codeBlockClose;
      i++;
    }
  }
  if (cardType && cardText) {
    cards.push([cardType, cardText, lineNo]);
  }
  return cards;
}

// src/icons/appicon.ts
var import_obsidian7 = require("obsidian");
function appIcon() {
  (0, import_obsidian7.addIcon)(
    "SpacedRepIcon",
    `<path fill="currentColor" stroke="currentColor" d="M 88.960938 17.257812 L 47.457031 17.257812 C 45.679688 17.257812 44.230469 18.703125 44.230469 20.484375 L 44.230469 86.558594 C 44.230469 88.335938 45.679688 89.785156 47.457031 89.785156 L 88.960938 89.785156 C 90.738281 89.785156 92.1875 88.335938 92.1875 86.558594 L 92.1875 20.484375 C 92.1875 18.703125 90.738281 17.257812 88.960938 17.257812 Z M 88.28125 85.878906 L 48.136719 85.878906 L 48.136719 21.164062 L 88.28125 21.164062 Z M 88.28125 85.878906 "/>
        <path fill="currentColor" stroke="currentColor"  d="M 88.960938 9.445312 L 61.667969 9.445312 C 59.925781 3.816406 54.011719 0.515625 48.269531 2.054688 L 8.183594 12.796875 C 2.304688 14.371094 -1.199219 20.4375 0.378906 26.316406 L 17.476562 90.140625 C 18.796875 95.066406 23.269531 98.324219 28.144531 98.324219 C 29.085938 98.324219 30.046875 98.199219 31 97.945312 L 40.765625 95.328125 C 42.625 96.75 44.941406 97.597656 47.457031 97.597656 L 88.960938 97.597656 C 95.046875 97.597656 100 92.644531 100 86.558594 L 100 20.484375 C 100 14.398438 95.046875 9.445312 88.960938 9.445312 Z M 29.988281 94.171875 C 26.1875 95.191406 22.269531 92.925781 21.25 89.128906 L 4.152344 25.304688 C 3.132812 21.507812 5.394531 17.585938 9.195312 16.570312 L 49.28125 5.828125 C 52.578125 4.945312 55.960938 6.53125 57.464844 9.445312 L 47.457031 9.445312 C 41.371094 9.445312 36.417969 14.398438 36.417969 20.484375 L 36.417969 86.558594 C 36.417969 88.558594 36.957031 90.433594 37.890625 92.054688 Z M 96.09375 86.558594 C 96.09375 90.492188 92.894531 93.691406 88.960938 93.691406 L 47.457031 93.691406 C 43.523438 93.691406 40.324219 90.492188 40.324219 86.558594 L 40.324219 20.484375 C 40.324219 16.550781 43.523438 13.351562 47.457031 13.351562 L 88.960938 13.351562 C 92.894531 13.351562 96.09375 16.550781 96.09375 20.484375 Z M 96.09375 86.558594 "/>
        <path fill="currentColor" stroke="currentColor"  d="M 54.101562 53.09375 L 60.070312 57.410156 L 57.789062 64.378906 C 56.90625 67.074219 59.996094 69.320312 62.285156 67.648438 L 68.210938 63.324219 L 74.132812 67.648438 C 76.421875 69.320312 79.511719 67.074219 78.628906 64.378906 L 76.347656 57.410156 L 82.320312 53.09375 C 84.613281 51.433594 83.441406 47.804688 80.605469 47.804688 L 73.242188 47.804688 L 70.988281 40.839844 C 70.117188 38.144531 66.300781 38.144531 65.429688 40.839844 L 63.179688 47.804688 L 55.8125 47.804688 C 52.980469 47.804688 51.804688 51.433594 54.101562 53.09375 Z M 54.101562 53.09375 "/>
        `
  );
}

// src/main.ts
var DEFAULT_DATA = {
  settings: DEFAULT_SETTINGS,
  buryDate: "",
  buryList: [],
  historyDeck: null
};
var SRPlugin = class extends import_obsidian8.Plugin {
  constructor() {
    super(...arguments);
    this.syncLock = false;
    this.reviewDecks = {};
    this.newNotes = [];
    this.scheduledNotes = [];
    this.easeByPath = {};
    this.incomingLinks = {};
    this.pageranks = {};
    this.dueNotesCount = 0;
    this.dueDatesNotes = {};
    // Record<# of days in future, due count>
    this.deckTree = new Deck("root", null);
    this.dueDatesFlashcards = {};
  }
  async onload() {
    await this.loadPluginData();
    appIcon();
    this.statusBar = this.addStatusBarItem();
    this.statusBar.classList.add("mod-clickable");
    this.statusBar.setAttribute("aria-label", t("OPEN_NOTE_FOR_REVIEW"));
    this.statusBar.setAttribute("aria-label-position", "top");
    this.statusBar.addEventListener("click", async () => {
      if (!this.syncLock) {
        await this.sync();
        this.reviewNextNoteModal();
      }
    });
    this.addRibbonIcon("SpacedRepIcon", t("REVIEW_CARDS"), async () => {
      if (!this.syncLock) {
        await this.sync();
        new FlashcardModal(this.app, this).open();
      }
    });
    if (!this.data.settings.disableFileMenuReviewOptions) {
      this.registerEvent(
        this.app.workspace.on("file-menu", (menu, fileish) => {
          if (fileish instanceof import_obsidian8.TFile && fileish.extension === "md") {
            menu.addItem((item) => {
              item.setTitle(t("REVIEW_EASY_FILE_MENU")).setIcon("SpacedRepIcon").onClick(() => {
                this.saveReviewResponse(fileish, 0 /* Easy */);
              });
            });
            menu.addItem((item) => {
              item.setTitle(t("REVIEW_GOOD_FILE_MENU")).setIcon("SpacedRepIcon").onClick(() => {
                this.saveReviewResponse(fileish, 1 /* Good */);
              });
            });
            menu.addItem((item) => {
              item.setTitle(t("REVIEW_HARD_FILE_MENU")).setIcon("SpacedRepIcon").onClick(() => {
                this.saveReviewResponse(fileish, 2 /* Hard */);
              });
            });
          }
        })
      );
    }
    this.addCommand({
      id: "srs-note-review-open-note",
      name: t("OPEN_NOTE_FOR_REVIEW"),
      callback: async () => {
        if (!this.syncLock) {
          await this.sync();
          this.reviewNextNoteModal();
        }
      }
    });
    this.addCommand({
      id: "srs-note-review-easy",
      name: t("REVIEW_NOTE_EASY_CMD"),
      callback: () => {
        const openFile = this.app.workspace.getActiveFile();
        if (openFile && openFile.extension === "md") {
          this.saveReviewResponse(openFile, 0 /* Easy */);
        }
      }
    });
    this.addCommand({
      id: "srs-note-review-good",
      name: t("REVIEW_NOTE_GOOD_CMD"),
      callback: () => {
        const openFile = this.app.workspace.getActiveFile();
        if (openFile && openFile.extension === "md") {
          this.saveReviewResponse(openFile, 1 /* Good */);
        }
      }
    });
    this.addCommand({
      id: "srs-note-review-hard",
      name: t("REVIEW_NOTE_HARD_CMD"),
      callback: () => {
        const openFile = this.app.workspace.getActiveFile();
        if (openFile && openFile.extension === "md") {
          this.saveReviewResponse(openFile, 2 /* Hard */);
        }
      }
    });
    this.addCommand({
      id: "srs-review-flashcards",
      name: t("REVIEW_ALL_CARDS"),
      callback: async () => {
        if (!this.syncLock) {
          await this.sync();
          new FlashcardModal(this.app, this).open();
        }
      }
    });
    this.addCommand({
      id: "srs-cram-flashcards",
      name: t("CRAM_ALL_CARDS"),
      callback: async () => {
        await this.sync(true);
        new FlashcardModal(this.app, this, true).open();
      }
    });
    this.addCommand({
      id: "srs-review-flashcards-in-note",
      name: t("REVIEW_CARDS_IN_NOTE"),
      callback: async () => {
        const openFile = this.app.workspace.getActiveFile();
        if (openFile && openFile.extension === "md") {
          this.deckTree = new Deck("root", null);
          const deckPath = this.findDeckPath(openFile);
          await this.findFlashcardsInNote(openFile, deckPath);
          new FlashcardModal(this.app, this).open();
        }
      }
    });
    this.addCommand({
      id: "srs-cram-flashcards-in-note",
      name: t("CRAM_CARDS_IN_NOTE"),
      callback: async () => {
        const openFile = this.app.workspace.getActiveFile();
        if (openFile && openFile.extension === "md") {
          this.deckTree = new Deck("root", null);
          const deckPath = this.findDeckPath(openFile);
          await this.findFlashcardsInNote(openFile, deckPath, false, true);
          new FlashcardModal(this.app, this, true).open();
        }
      }
    });
    this.addCommand({
      id: "srs-view-stats",
      name: t("VIEW_STATS"),
      callback: async () => {
        if (!this.syncLock) {
          await this.sync();
          new StatsModal(this.app, this).open();
        }
      }
    });
    this.addSettingTab(new SRSettingTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.initView();
      setTimeout(async () => {
        if (!this.syncLock) {
          await this.sync();
        }
      }, 2e3);
    });
  }
  onunload() {
    this.app.workspace.getLeavesOfType(REVIEW_QUEUE_VIEW_TYPE).forEach((leaf) => leaf.detach());
  }
  async sync(ignoreStats = false) {
    if (this.syncLock) {
      return;
    }
    this.syncLock = true;
    graph.reset();
    this.easeByPath = {};
    this.incomingLinks = {};
    this.pageranks = {};
    this.dueNotesCount = 0;
    this.dueDatesNotes = {};
    this.reviewDecks = {};
    this.deckTree = new Deck("root", null);
    this.dueDatesFlashcards = {};
    this.cardStats = {
      eases: {},
      intervals: {},
      newCount: 0,
      youngCount: 0,
      matureCount: 0
    };
    const now = window.moment(Date.now());
    const todayDate = now.format("YYYY-MM-DD");
    if (todayDate !== this.data.buryDate) {
      this.data.buryDate = todayDate;
      this.data.buryList = [];
    }
    const notes = this.app.vault.getMarkdownFiles();
    for (const note of notes) {
      if (this.data.settings.noteFoldersToIgnore.some(
        (folder) => note.path.startsWith(folder)
      )) {
        continue;
      }
      if (this.incomingLinks[note.path] === void 0) {
        this.incomingLinks[note.path] = [];
      }
      const links = this.app.metadataCache.resolvedLinks[note.path] || {};
      for (const targetPath in links) {
        if (this.incomingLinks[targetPath] === void 0)
          this.incomingLinks[targetPath] = [];
        if (targetPath.split(".").pop().toLowerCase() === "md") {
          this.incomingLinks[targetPath].push({
            sourcePath: note.path,
            linkCount: links[targetPath]
          });
          graph.link(note.path, targetPath, links[targetPath]);
        }
      }
      const deckPath = this.findDeckPath(note);
      if (deckPath.length !== 0) {
        const flashcardsInNoteAvgEase = await this.findFlashcardsInNote(
          note,
          deckPath,
          false,
          ignoreStats
        );
        if (flashcardsInNoteAvgEase > 0) {
          this.easeByPath[note.path] = flashcardsInNoteAvgEase;
        }
      }
      const fileCachedData = this.app.metadataCache.getFileCache(note) || {};
      const frontmatter = fileCachedData.frontmatter || {};
      const tags = (0, import_obsidian8.getAllTags)(fileCachedData) || [];
      let shouldIgnore = true;
      const matchedNoteTags = [];
      for (const tagToReview of this.data.settings.tagsToReview) {
        if (tags.some((tag) => tag === tagToReview || tag.startsWith(tagToReview + "/"))) {
          if (!Object.prototype.hasOwnProperty.call(this.reviewDecks, tagToReview)) {
            this.reviewDecks[tagToReview] = new ReviewDeck(tagToReview);
          }
          matchedNoteTags.push(tagToReview);
          shouldIgnore = false;
          break;
        }
      }
      if (shouldIgnore) {
        continue;
      }
      if (!(Object.prototype.hasOwnProperty.call(frontmatter, "sr-due") && Object.prototype.hasOwnProperty.call(frontmatter, "sr-interval") && Object.prototype.hasOwnProperty.call(frontmatter, "sr-ease"))) {
        for (const matchedNoteTag of matchedNoteTags) {
          this.reviewDecks[matchedNoteTag].newNotes.push(note);
        }
        continue;
      }
      const dueUnix = window.moment(frontmatter["sr-due"], ["YYYY-MM-DD", "DD-MM-YYYY", "ddd MMM DD YYYY"]).valueOf();
      for (const matchedNoteTag of matchedNoteTags) {
        this.reviewDecks[matchedNoteTag].scheduledNotes.push({ note, dueUnix });
        if (dueUnix <= now.valueOf()) {
          this.reviewDecks[matchedNoteTag].dueNotesCount++;
        }
      }
      if (Object.prototype.hasOwnProperty.call(this.easeByPath, note.path)) {
        this.easeByPath[note.path] = (this.easeByPath[note.path] + frontmatter["sr-ease"]) / 2;
      } else {
        this.easeByPath[note.path] = frontmatter["sr-ease"];
      }
      if (dueUnix <= now.valueOf()) {
        this.dueNotesCount++;
      }
      const nDays = Math.ceil((dueUnix - now.valueOf()) / (24 * 3600 * 1e3));
      if (!Object.prototype.hasOwnProperty.call(this.dueDatesNotes, nDays)) {
        this.dueDatesNotes[nDays] = 0;
      }
      this.dueDatesNotes[nDays]++;
    }
    graph.rank(0.85, 1e-6, (node, rank2) => {
      this.pageranks[node] = rank2 * 1e4;
    });
    this.deckTree.sortSubdecksList();
    if (this.data.settings.showDebugMessages) {
      console.log(`SR: ${t("EASES")}`, this.easeByPath);
      console.log(`SR: ${t("DECKS")}`, this.deckTree);
    }
    for (const deckKey in this.reviewDecks) {
      this.reviewDecks[deckKey].sortNotes(this.pageranks);
    }
    if (this.data.settings.showDebugMessages) {
      console.log(
        "SR: " + t("SYNC_TIME_TAKEN", {
          t: Date.now() - now.valueOf()
        })
      );
    }
    this.statusBar.setText(
      t("STATUS_BAR", {
        dueNotesCount: this.dueNotesCount,
        dueFlashcardsCount: this.deckTree.dueFlashcardsCount
      })
    );
    if (this.data.settings.enableNoteReviewPaneOnStartup)
      this.reviewQueueView.redraw();
    this.syncLock = false;
  }
  async saveReviewResponse(note, response) {
    const fileCachedData = this.app.metadataCache.getFileCache(note) || {};
    const frontmatter = fileCachedData.frontmatter || {};
    const tags = (0, import_obsidian8.getAllTags)(fileCachedData) || [];
    if (this.data.settings.noteFoldersToIgnore.some((folder) => note.path.startsWith(folder))) {
      new import_obsidian8.Notice(t("NOTE_IN_IGNORED_FOLDER"));
      return;
    }
    let shouldIgnore = true;
    for (const tag of tags) {
      if (this.data.settings.tagsToReview.some(
        (tagToReview) => tag === tagToReview || tag.startsWith(tagToReview + "/")
      )) {
        shouldIgnore = false;
        break;
      }
    }
    if (shouldIgnore) {
      new import_obsidian8.Notice(t("PLEASE_TAG_NOTE"));
      return;
    }
    let fileText = await this.app.vault.read(note);
    let ease, interval, delayBeforeReview;
    const now = Date.now();
    if (!(Object.prototype.hasOwnProperty.call(frontmatter, "sr-due") && Object.prototype.hasOwnProperty.call(frontmatter, "sr-interval") && Object.prototype.hasOwnProperty.call(frontmatter, "sr-ease"))) {
      let linkTotal = 0, linkPGTotal = 0, totalLinkCount = 0;
      for (const statObj of this.incomingLinks[note.path] || []) {
        const ease2 = this.easeByPath[statObj.sourcePath];
        if (ease2) {
          linkTotal += statObj.linkCount * this.pageranks[statObj.sourcePath] * ease2;
          linkPGTotal += this.pageranks[statObj.sourcePath] * statObj.linkCount;
          totalLinkCount += statObj.linkCount;
        }
      }
      const outgoingLinks = this.app.metadataCache.resolvedLinks[note.path] || {};
      for (const linkedFilePath in outgoingLinks) {
        const ease2 = this.easeByPath[linkedFilePath];
        if (ease2) {
          linkTotal += outgoingLinks[linkedFilePath] * this.pageranks[linkedFilePath] * ease2;
          linkPGTotal += this.pageranks[linkedFilePath] * outgoingLinks[linkedFilePath];
          totalLinkCount += outgoingLinks[linkedFilePath];
        }
      }
      const linkContribution = this.data.settings.maxLinkFactor * Math.min(1, Math.log(totalLinkCount + 0.5) / Math.log(64));
      ease = (1 - linkContribution) * this.data.settings.baseEase + (totalLinkCount > 0 ? linkContribution * linkTotal / linkPGTotal : linkContribution * this.data.settings.baseEase);
      if (Object.prototype.hasOwnProperty.call(this.easeByPath, note.path)) {
        ease = (ease + this.easeByPath[note.path]) / 2;
      }
      ease = Math.round(ease);
      interval = 1;
      delayBeforeReview = 0;
    } else {
      interval = frontmatter["sr-interval"];
      ease = frontmatter["sr-ease"];
      delayBeforeReview = now - window.moment(frontmatter["sr-due"], ["YYYY-MM-DD", "DD-MM-YYYY", "ddd MMM DD YYYY"]).valueOf();
    }
    const schedObj = schedule(
      response,
      interval,
      ease,
      delayBeforeReview,
      this.data.settings,
      this.dueDatesNotes
    );
    interval = schedObj.interval;
    ease = schedObj.ease;
    const due = window.moment(now + interval * 24 * 3600 * 1e3);
    const dueString = due.format("YYYY-MM-DD");
    if (SCHEDULING_INFO_REGEX.test(fileText)) {
      const schedulingInfo = SCHEDULING_INFO_REGEX.exec(fileText);
      fileText = fileText.replace(
        SCHEDULING_INFO_REGEX,
        `---
${schedulingInfo[1]}sr-due: ${dueString}
sr-interval: ${interval}
sr-ease: ${ease}
${schedulingInfo[5]}---`
      );
    } else if (YAML_FRONT_MATTER_REGEX.test(fileText)) {
      const existingYaml = YAML_FRONT_MATTER_REGEX.exec(fileText);
      fileText = fileText.replace(
        YAML_FRONT_MATTER_REGEX,
        `---
${existingYaml[1]}sr-due: ${dueString}
sr-interval: ${interval}
sr-ease: ${ease}
---`
      );
    } else {
      fileText = `---
sr-due: ${dueString}
sr-interval: ${interval}
sr-ease: ${ease}
---

${fileText}`;
    }
    if (this.data.settings.burySiblingCards) {
      await this.findFlashcardsInNote(note, [], true);
      await this.savePluginData();
    }
    await this.app.vault.modify(note, fileText);
    new import_obsidian8.Notice(t("RESPONSE_RECEIVED"));
    await this.sync();
    if (this.data.settings.autoNextNote) {
      this.reviewNextNote(this.lastSelectedReviewDeck);
    }
  }
  async reviewNextNoteModal() {
    const reviewDeckNames = Object.keys(this.reviewDecks);
    if (reviewDeckNames.length === 1) {
      this.reviewNextNote(reviewDeckNames[0]);
    } else {
      const deckSelectionModal = new ReviewDeckSelectionModal(this.app, reviewDeckNames);
      deckSelectionModal.submitCallback = (deckKey) => this.reviewNextNote(deckKey);
      deckSelectionModal.open();
    }
  }
  async reviewNextNote(deckKey) {
    if (!Object.prototype.hasOwnProperty.call(this.reviewDecks, deckKey)) {
      new import_obsidian8.Notice(t("NO_DECK_EXISTS", { deckName: deckKey }));
      return;
    }
    this.lastSelectedReviewDeck = deckKey;
    const deck = this.reviewDecks[deckKey];
    if (deck.dueNotesCount > 0) {
      const index = this.data.settings.openRandomNote ? Math.floor(Math.random() * deck.dueNotesCount) : 0;
      await this.app.workspace.getLeaf().openFile(deck.scheduledNotes[index].note);
      return;
    }
    if (deck.newNotes.length > 0) {
      const index = this.data.settings.openRandomNote ? Math.floor(Math.random() * deck.newNotes.length) : 0;
      this.app.workspace.getLeaf().openFile(deck.newNotes[index]);
      return;
    }
    new import_obsidian8.Notice(t("ALL_CAUGHT_UP"));
  }
  findDeckPath(note) {
    let deckPath = [];
    if (this.data.settings.convertFoldersToDecks) {
      deckPath = note.path.split("/");
      deckPath.pop();
      if (deckPath.length === 0) {
        deckPath = ["/"];
      }
    } else {
      const fileCachedData = this.app.metadataCache.getFileCache(note) || {};
      const tags = (0, import_obsidian8.getAllTags)(fileCachedData) || [];
      outer:
        for (const tagToReview of this.data.settings.flashcardTags) {
          for (const tag of tags) {
            if (tag === tagToReview || tag.startsWith(tagToReview + "/")) {
              deckPath = tag.substring(1).split("/");
              break outer;
            }
          }
        }
    }
    return deckPath;
  }
  async findFlashcardsInNote(note, deckPath, buryOnly = false, ignoreStats = false) {
    var _a;
    let fileText = await this.app.vault.read(note);
    const fileCachedData = this.app.metadataCache.getFileCache(note) || {};
    const headings = fileCachedData.headings || [];
    let fileChanged = false, totalNoteEase = 0, scheduledCount = 0;
    const settings = this.data.settings;
    const noteDeckPath = deckPath;
    const now = Date.now();
    const parsedCards = parse2(
      fileText,
      settings.singleLineCardSeparator,
      settings.singleLineReversedCardSeparator,
      settings.multilineCardSeparator,
      settings.multilineReversedCardSeparator,
      settings.convertHighlightsToClozes,
      settings.convertBoldTextToClozes,
      settings.convertCurlyBracketsToClozes
    );
    for (const parsedCard of parsedCards) {
      deckPath = noteDeckPath;
      const cardType = parsedCard[0], lineNo = parsedCard[2];
      let cardText = parsedCard[1];
      if (cardText.includes(settings.editLaterTag)) {
        continue;
      }
      if (!settings.convertFoldersToDecks) {
        const tagInCardRegEx = /^#[^\s#]+/gi;
        const cardDeckPath = (_a = cardText.match(tagInCardRegEx)) == null ? void 0 : _a.slice(-1)[0].replace("#", "").split("/");
        if (cardDeckPath) {
          deckPath = cardDeckPath;
          cardText = cardText.replaceAll(tagInCardRegEx, "");
        }
      }
      this.deckTree.createDeck([...deckPath]);
      const cardTextHash = cyrb53(cardText);
      if (buryOnly) {
        this.data.buryList.push(cardTextHash);
        continue;
      }
      const siblingMatches = [];
      if (cardType === 4 /* Cloze */) {
        const siblings2 = [];
        if (settings.convertHighlightsToClozes) {
          siblings2.push(...cardText.matchAll(/==(.*?)==/gm));
        }
        if (settings.convertBoldTextToClozes) {
          siblings2.push(...cardText.matchAll(/\*\*(.*?)\*\*/gm));
        }
        if (settings.convertCurlyBracketsToClozes) {
          siblings2.push(...cardText.matchAll(/{{(.*?)}}/gm));
        }
        siblings2.sort((a, b) => {
          if (a.index < b.index) {
            return -1;
          }
          if (a.index > b.index) {
            return 1;
          }
          return 0;
        });
        let front, back;
        for (const m of siblings2) {
          const deletionStart = m.index, deletionEnd = deletionStart + m[0].length;
          front = cardText.substring(0, deletionStart) + "<span style='color:#2196f3'>[...]</span>" + cardText.substring(deletionEnd);
          front = front.replace(/==/gm, "").replace(/\*\*/gm, "").replace(/{{/gm, "").replace(/}}/gm, "");
          back = cardText.substring(0, deletionStart) + "<span style='color:#2196f3'>" + cardText.substring(deletionStart, deletionEnd) + "</span>" + cardText.substring(deletionEnd);
          back = back.replace(/==/gm, "").replace(/\*\*/gm, "").replace(/{{/gm, "").replace(/}}/gm, "");
          siblingMatches.push([front, back]);
        }
      } else {
        let idx;
        if (cardType === 0 /* SingleLineBasic */) {
          idx = cardText.indexOf(settings.singleLineCardSeparator);
          siblingMatches.push([
            cardText.substring(0, idx),
            cardText.substring(idx + settings.singleLineCardSeparator.length)
          ]);
        } else if (cardType === 1 /* SingleLineReversed */) {
          idx = cardText.indexOf(settings.singleLineReversedCardSeparator);
          const side1 = cardText.substring(0, idx), side2 = cardText.substring(
            idx + settings.singleLineReversedCardSeparator.length
          );
          siblingMatches.push([side1, side2]);
          siblingMatches.push([side2, side1]);
        } else if (cardType === 2 /* MultiLineBasic */) {
          idx = cardText.indexOf("\n" + settings.multilineCardSeparator + "\n");
          siblingMatches.push([
            cardText.substring(0, idx),
            cardText.substring(idx + 2 + settings.multilineCardSeparator.length)
          ]);
        } else if (cardType === 3 /* MultiLineReversed */) {
          idx = cardText.indexOf("\n" + settings.multilineReversedCardSeparator + "\n");
          const side1 = cardText.substring(0, idx), side2 = cardText.substring(
            idx + 2 + settings.multilineReversedCardSeparator.length
          );
          siblingMatches.push([side1, side2]);
          siblingMatches.push([side2, side1]);
        }
      }
      let scheduling = [...cardText.matchAll(MULTI_SCHEDULING_EXTRACTOR)];
      if (scheduling.length === 0)
        scheduling = [...cardText.matchAll(LEGACY_SCHEDULING_EXTRACTOR)];
      if (scheduling.length > siblingMatches.length) {
        const idxSched = cardText.lastIndexOf("<!--SR:") + 7;
        let newCardText = cardText.substring(0, idxSched);
        for (let i = 0; i < siblingMatches.length; i++)
          newCardText += `!${scheduling[i][1]},${scheduling[i][2]},${scheduling[i][3]}`;
        newCardText += "-->";
        const replacementRegex = new RegExp(escapeRegexString(cardText), "gm");
        fileText = fileText.replace(replacementRegex, () => newCardText);
        fileChanged = true;
      }
      const context = settings.showContextInCards ? getCardContext(lineNo, headings, note.basename) : "";
      const siblings = [];
      for (let i = 0; i < siblingMatches.length; i++) {
        const front = siblingMatches[i][0].trim(), back = siblingMatches[i][1].trim();
        const cardObj = {
          isDue: i < scheduling.length,
          note,
          lineNo,
          front,
          back,
          cardText,
          context,
          cardType,
          siblingIdx: i,
          siblings,
          editLater: false
        };
        if (ignoreStats) {
          this.cardStats.newCount++;
          cardObj.isDue = true;
          this.deckTree.insertFlashcard([...deckPath], cardObj);
        } else if (i < scheduling.length) {
          const dueUnix = window.moment(scheduling[i][1], ["YYYY-MM-DD", "DD-MM-YYYY"]).valueOf();
          const nDays = Math.ceil((dueUnix - now) / (24 * 3600 * 1e3));
          if (!Object.prototype.hasOwnProperty.call(this.dueDatesFlashcards, nDays)) {
            this.dueDatesFlashcards[nDays] = 0;
          }
          this.dueDatesFlashcards[nDays]++;
          const interval = parseInt(scheduling[i][2]), ease = parseInt(scheduling[i][3]);
          if (!Object.prototype.hasOwnProperty.call(this.cardStats.intervals, interval)) {
            this.cardStats.intervals[interval] = 0;
          }
          this.cardStats.intervals[interval]++;
          if (!Object.prototype.hasOwnProperty.call(this.cardStats.eases, ease)) {
            this.cardStats.eases[ease] = 0;
          }
          this.cardStats.eases[ease]++;
          totalNoteEase += ease;
          scheduledCount++;
          if (interval >= 32) {
            this.cardStats.matureCount++;
          } else {
            this.cardStats.youngCount++;
          }
          if (this.data.buryList.includes(cardTextHash)) {
            this.deckTree.countFlashcard([...deckPath]);
            continue;
          }
          if (dueUnix <= now) {
            cardObj.interval = interval;
            cardObj.ease = ease;
            cardObj.delayBeforeReview = now - dueUnix;
            this.deckTree.insertFlashcard([...deckPath], cardObj);
          } else {
            this.deckTree.countFlashcard([...deckPath]);
            continue;
          }
        } else {
          this.cardStats.newCount++;
          if (this.data.buryList.includes(cyrb53(cardText))) {
            this.deckTree.countFlashcard([...deckPath]);
            continue;
          }
          this.deckTree.insertFlashcard([...deckPath], cardObj);
        }
        siblings.push(cardObj);
      }
    }
    if (fileChanged) {
      await this.app.vault.modify(note, fileText);
    }
    if (scheduledCount > 0) {
      const flashcardsInNoteAvgEase = totalNoteEase / scheduledCount;
      const flashcardContribution = Math.min(
        1,
        Math.log(scheduledCount + 0.5) / Math.log(64)
      );
      return flashcardsInNoteAvgEase * flashcardContribution + settings.baseEase * (1 - flashcardContribution);
    }
    return 0;
  }
  async loadPluginData() {
    this.data = Object.assign({}, DEFAULT_DATA, await this.loadData());
    this.data.settings = Object.assign({}, DEFAULT_SETTINGS, this.data.settings);
  }
  async savePluginData() {
    await this.saveData(this.data);
  }
  initView() {
    this.registerView(
      REVIEW_QUEUE_VIEW_TYPE,
      (leaf) => this.reviewQueueView = new ReviewQueueListView(leaf, this)
    );
    if (this.data.settings.enableNoteReviewPaneOnStartup && app.workspace.getLeavesOfType(REVIEW_QUEUE_VIEW_TYPE).length == 0) {
      this.app.workspace.getRightLeaf(false).setViewState({
        type: REVIEW_QUEUE_VIEW_TYPE,
        active: true
      });
    }
  }
};
function getCardContext(cardLine, headings, note_title) {
  const stack = [];
  for (const heading of headings) {
    if (heading.position.start.line > cardLine) {
      break;
    }
    while (stack.length > 0 && stack[stack.length - 1].level >= heading.level) {
      stack.pop();
    }
    stack.push(heading);
  }
  let context = `${note_title} > `;
  for (const headingObj of stack) {
    headingObj.heading = headingObj.heading.replace(/\[\^\d+\]/gm, "").trim();
    context += `${headingObj.heading} > `;
  }
  return context.slice(0, -3);
}
/*! Bundled license information:

@kurkle/color/dist/color.esm.js:
  (*!
   * @kurkle/color v0.3.2
   * https://github.com/kurkle/color#readme
   * (c) 2023 Jukka Kurkela
   * Released under the MIT License
   *)

chart.js/dist/chunks/helpers.segment.js:
  (*!
   * Chart.js v4.2.0
   * https://www.chartjs.org
   * (c) 2023 Chart.js Contributors
   * Released under the MIT License
   *)

chart.js/dist/chart.js:
  (*!
   * Chart.js v4.2.0
   * https://www.chartjs.org
   * (c) 2023 Chart.js Contributors
   * Released under the MIT License
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL3BhZ2VyYW5rLmpzL2xpYi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdmh0bWwvc3JjL2VtcHR5LXRhZ3MuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3ZodG1sL3NyYy92aHRtbC5qcyIsICIuLi9zcmMvbWFpbi50cyIsICIuLi9zcmMvc2V0dGluZ3MudHMiLCAiLi4vc3JjL2xhbmcvaGVscGVycy50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvYWYudHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL2FyLnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS9jei50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvYm4udHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL2RhLnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS9kZS50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvZW4udHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL2VuLWdiLnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS9lcy50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvZnIudHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL2hpLnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS9pZC50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvaXQudHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL2phLnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS9rby50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvbXIudHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL25sLnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS9uby50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvcGwudHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL3B0LnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS9wdC1ici50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvcm8udHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL3J1LnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS90YS50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvdGUudHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL3RoLnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS90ci50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvdWsudHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL3VyLnRzIiwgIi4uL3NyYy9sYW5nL2xvY2FsZS92aS50cyIsICIuLi9zcmMvbGFuZy9sb2NhbGUvemgtY24udHMiLCAiLi4vc3JjL2xhbmcvbG9jYWxlL3poLXR3LnRzIiwgIi4uL3NyYy9mbGFzaGNhcmQtbW9kYWwudHN4IiwgIi4uL3NyYy9zY2hlZHVsaW5nLnRzIiwgIi4uL3NyYy9jb25zdGFudHMudHMiLCAiLi4vc3JjL3V0aWxzLnRzIiwgIi4uL3NyYy9zdGF0cy1tb2RhbC50c3giLCAiLi4vbm9kZV9tb2R1bGVzL0BrdXJrbGUvY29sb3IvZGlzdC9jb2xvci5lc20uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMuY29yZS50cyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2hlbHBlcnMvaGVscGVycy5tYXRoLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvaGVscGVycy9oZWxwZXJzLmNvbGxlY3Rpb24udHMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMuZXh0cmFzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvaGVscGVycy9oZWxwZXJzLmVhc2luZy50cyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2hlbHBlcnMvaGVscGVycy5jb2xvci50cyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5hbmltYXRpb25zLmRlZmF1bHRzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLmxheW91dHMuZGVmYXVsdHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMuaW50bC50cyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS50aWNrcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5zY2FsZS5kZWZhdWx0cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5kZWZhdWx0cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2hlbHBlcnMvaGVscGVycy5jYW52YXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMub3B0aW9ucy50cyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2hlbHBlcnMvaGVscGVycy5jb25maWcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMuY3VydmUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMuZG9tLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvaGVscGVycy9oZWxwZXJzLmludGVycG9sYXRpb24udHMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMucnRsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvaGVscGVycy9oZWxwZXJzLnNlZ21lbnQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUuYW5pbWF0b3IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUuYW5pbWF0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLmFuaW1hdGlvbnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUuZGF0YXNldENvbnRyb2xsZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb250cm9sbGVycy9jb250cm9sbGVyLmJhci5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIuYnViYmxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29udHJvbGxlcnMvY29udHJvbGxlci5kb3VnaG51dC5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIubGluZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIucG9sYXJBcmVhLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29udHJvbGxlcnMvY29udHJvbGxlci5waWUuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb250cm9sbGVycy9jb250cm9sbGVyLnJhZGFyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29udHJvbGxlcnMvY29udHJvbGxlci5zY2F0dGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLmFkYXB0ZXJzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLmludGVyYWN0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLmxheW91dHMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbGF0Zm9ybS9wbGF0Zm9ybS5iYXNlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGxhdGZvcm0vcGxhdGZvcm0uYmFzaWMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbGF0Zm9ybS9wbGF0Zm9ybS5kb20uanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbGF0Zm9ybS9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5lbGVtZW50LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLnNjYWxlLmF1dG9za2lwLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLnNjYWxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLnR5cGVkUmVnaXN0cnkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUucmVnaXN0cnkuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUucGx1Z2lucy5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5jb25maWcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUuY29udHJvbGxlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2VsZW1lbnRzL2VsZW1lbnQuYXJjLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvZWxlbWVudHMvZWxlbWVudC5saW5lLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvZWxlbWVudHMvZWxlbWVudC5wb2ludC50cyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2VsZW1lbnRzL2VsZW1lbnQuYmFyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGx1Z2lucy9wbHVnaW4uY29sb3JzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGx1Z2lucy9wbHVnaW4uZGVjaW1hdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3BsdWdpbnMvcGx1Z2luLmZpbGxlci9maWxsZXIuc2VnbWVudC5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3BsdWdpbnMvcGx1Z2luLmZpbGxlci9maWxsZXIuaGVscGVyLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGx1Z2lucy9wbHVnaW4uZmlsbGVyL2ZpbGxlci5vcHRpb25zLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGx1Z2lucy9wbHVnaW4uZmlsbGVyL2ZpbGxlci50YXJnZXQuc3RhY2suanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbHVnaW5zL3BsdWdpbi5maWxsZXIvc2ltcGxlQXJjLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGx1Z2lucy9wbHVnaW4uZmlsbGVyL2ZpbGxlci50YXJnZXQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbHVnaW5zL3BsdWdpbi5maWxsZXIvZmlsbGVyLmRyYXdpbmcuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbHVnaW5zL3BsdWdpbi5maWxsZXIvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbHVnaW5zL3BsdWdpbi5sZWdlbmQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbHVnaW5zL3BsdWdpbi50aXRsZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3BsdWdpbnMvcGx1Z2luLnN1YnRpdGxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGx1Z2lucy9wbHVnaW4udG9vbHRpcC5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3NjYWxlcy9zY2FsZS5jYXRlZ29yeS5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3NjYWxlcy9zY2FsZS5saW5lYXJiYXNlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvc2NhbGVzL3NjYWxlLmxpbmVhci5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3NjYWxlcy9zY2FsZS5sb2dhcml0aG1pYy5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3NjYWxlcy9zY2FsZS5yYWRpYWxMaW5lYXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9zY2FsZXMvc2NhbGUudGltZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3NjYWxlcy9zY2FsZS50aW1lc2VyaWVzLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvaW5kZXgudHMiLCAiLi4vc3JjL3NpZGViYXIudHMiLCAiLi4vc3JjL3Jldmlldy1kZWNrLnRzIiwgIi4uL3NyYy9wYXJzZXIudHMiLCAiLi4vc3JjL2ljb25zL2FwcGljb24udHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBLG1EQUFBQSxTQUFBO0FBQUE7QUFFQSxhQUFTLE9BQU8sUUFBUUMsV0FBVTtBQUM5QixVQUFLLE9BQU8sV0FBVyxZQUFjLE9BQU9BLGNBQWEsWUFBYTtBQUNsRSxpQkFBUyxPQUFPLFFBQVE7QUFDcEIsY0FBSSxPQUFPLGVBQWUsR0FBRyxNQUFNLE1BQU07QUFDckMsZ0JBQUlBLFVBQVMsS0FBSyxPQUFPLEdBQUcsQ0FBQyxNQUFNLE9BQU87QUFDdEM7QUFBQSxZQUNKO0FBQUEsVUFDSjtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUVBLElBQUFELFFBQU8sVUFBVyxXQUFZO0FBQzFCLFVBQUksT0FBTztBQUFBLFFBQ1AsT0FBTztBQUFBLFFBQ1AsT0FBTyxDQUFDO0FBQUEsUUFDUixPQUFPLENBQUM7QUFBQSxNQUNaO0FBRUEsV0FBSyxPQUFPLFNBQVUsUUFBUSxRQUFRLFFBQVE7QUFDMUMsWUFBSyxTQUFTLE1BQU0sTUFBTSxRQUFVLFdBQVcsTUFBTztBQUNsRCxtQkFBUztBQUFBLFFBQ2I7QUFFQSxpQkFBUyxXQUFXLE1BQU07QUFFMUIsWUFBSSxLQUFLLE1BQU0sZUFBZSxNQUFNLE1BQU0sTUFBTTtBQUM1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SCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQUEsRUFDSCxHQUFHO0FBQ0w7QUFDQSxJQUFNLFVBQVU7QUFBQSxFQUNkLFFBQVE7QUFBQSxFQUNSLGFBQWE7QUFBQSxFQUNiLE1BQU07QUFBQSxFQUNOLFdBQVc7QUFBQSxFQUNYLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLFFBQVE7QUFBQSxFQUNSLE9BQU87QUFBQSxFQUNQLGNBQWM7QUFBQSxFQUNkLElBQUk7QUFBQSxFQUNKLFNBQVM7QUFBQSxFQUNULE1BQU07QUFBQSxFQUNOLFdBQVc7QUFBQSxFQUNYLFFBQVE7QUFBQSxFQUNSLFVBQVU7QUFBQSxFQUNWLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLGFBQWE7QUFBQSxFQUNiLFNBQVM7QUFBQSxFQUNULFNBQVM7QUFBQSxFQUNULE1BQU07QUFBQSxFQUNOLEtBQUs7QUFBQSxFQUNMLE9BQU87QUFBQSxFQUNQLFNBQVM7QUFBQSxFQUNULE1BQU07QUFBQSxFQUNOLE1BQU07QUFBQSxFQUNOLE1BQU07QUFBQSxFQUNOLFFBQVE7QUFBQSxFQUNSLFNBQVM7QUFBQSxFQUNULFVBQVU7QUFBQSxFQUNWLFFBQVE7QUFBQSxFQUNSLE9BQU87QUFBQSxFQUNQLEtBQUs7QUFBQSxFQUNMLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLE9BQU87QUFBQSxFQUNQLEtBQUs7QUFBQSxFQUNMLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLFVBQVU7QUFBQSxFQUNWLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLFVBQVU7QUFBQSxFQUNWLFVBQVU7QUFBQSxFQUNWLFVBQVU7QUFBQSxFQUNWLFVBQVU7QUFBQSxFQUNWLFFBQVE7QUFBQSxFQUNSLFNBQVM7QUFBQSxFQUNULFdBQVc7QUFBQSxFQUNYLEtBQUs7QUFBQSxFQUNMLFFBQVE7QUFBQSxFQUNSLEtBQUs7QUFBQSxFQUNMLEtBQUs7QUFBQSxFQUNMLE9BQU87QUFBQSxFQUNQLEtBQUs7QUFBQSxFQUNMLFNBQVM7QUFBQSxFQUNULFFBQVE7QUFBQSxFQUNSLFNBQVM7QUFBQSxFQUNULE9BQU87QUFBQSxFQUNQLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLFFBQVE7QUFBQSxFQUNSLFdBQVc7QUFBQSxFQUNYLFNBQVM7QUFBQSxFQUNULFlBQVk7QUFBQSxFQUNaLEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLFdBQVc7QUFBQSxFQUNYLE1BQU07QUFBQSxFQUNOLE1BQU07QUFBQSxFQUNOLE1BQU07QUFBQSxFQUNOLE1BQU07QUFBQSxFQUNOLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLE9BQU87QUFBQSxFQUNQLE9BQU87QUFBQSxFQUNQLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLE1BQU07QUFBQSxFQUNOLFNBQVM7QUFBQSxFQUNULEtBQUs7QUFBQSxFQUNMLFFBQVE7QUFBQSxFQUNSLE9BQU87QUFBQSxFQUNQLFlBQVk7QUFBQSxFQUNaLEtBQUs7QUFBQSxFQUNMLE9BQU87QUFBQSxFQUNQLFFBQVE7QUFBQSxFQUNSLFFBQVE7QUFBQSxFQUNSLE1BQU07QUFBQSxFQUNOLFdBQVc7QUFBQSxFQUNYLEtBQUs7QUFBQSxFQUNMLFVBQVU7QUFBQSxFQUNWLFlBQVk7QUFBQSxFQUNaLFNBQVM7QUFBQSxFQUNULFVBQVU7QUFB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QVE7QUFBQSxNQUNaLENBQUM7QUFBQSxJQUNMO0FBQUEsRUFDSjtBQUNKO0FBRUEsU0FBUyxlQUFlLFVBQWtCLFVBQTBCLFlBQTRCO0FBQzVGLFFBQU0sUUFBd0IsQ0FBQztBQUMvQixhQUFXLFdBQVcsVUFBVTtBQUM1QixRQUFJLFFBQVEsU0FBUyxNQUFNLE9BQU8sVUFBVTtBQUN4QztBQUFBLElBQ0o7QUFFQSxXQUFPLE1BQU0sU0FBUyxLQUFLLE1BQU0sTUFBTSxTQUFTLENBQUMsRUFBRSxTQUFTLFFBQVEsT0FBTztBQUN2RSxZQUFNLElBQUk7QUFBQSxJQUNkO0FBRUEsVUFBTSxLQUFLLE9BQU87QUFBQSxFQUN0QjtBQUVBLE1BQUksVUFBVSxHQUFHO0FBQ2pCLGFBQVcsY0FBYyxPQUFPO0FBQzVCLGVBQVcsVUFBVSxXQUFXLFFBQVEsUUFBUSxlQUFlLEVBQUUsRUFBRSxLQUFLO0FBQ3hFLGVBQVcsR0FBRyxXQUFXO0FBQUEsRUFDN0I7QUFDQSxTQUFPLFFBQVEsTUFBTSxHQUFHLEVBQUU7QUFDOUI7IiwKICAibmFtZXMiOiBbIm1vZHVsZSIsICJjYWxsYmFjayIsICJhbHBoYSIsICJlc2MiLCAiU3RyaW5nIiwgInN0ciIsICJyZXBsYWNlIiwgIm1hcCIsICJzIiwgInNldElubmVySFRNTEF0dHIiLCAiRE9NQXR0cmlidXRlTmFtZXMiLCAic2FuaXRpemVkIiwgImgiLCAibmFtZSIsICJhdHRycyIsICJzdGFjayIsICJpIiwgImFyZ3VtZW50cyIsICJsZW5ndGgiLCAicHVzaCIsICJjaGlsZHJlbiIsICJyZXZlcnNlIiwgImVtcHR5VGFncyIsICJpbmRleE9mIiwgIl9faHRtbCIsICJjaGlsZCIsICJwb3AiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJuYW1lcyIsICJjYWxsYmFjayIsICJhcHAiLCAiaW1wb3J0X29ic2lkaWFuIiwgImgxIiwgImgyIiwgImFwcCIsICJyZXNvbHZlIiwgImNhbGxiYWNrIiwgInZhbHVlIiwgImgiLCAibGluayIsICJkZWNrIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfdmh0bWwiLCAiaCIsICJoIiwgImludGVycG9sYXRlIiwgInQiLCAiY29sb3IiLCAibm9vcCIsICJ1aWQiLCAiaWQiLCAiaXNOdWxsT3JVbmRlZiIsICJ2YWx1ZSIsICJpc0FycmF5IiwgIkFycmF5IiwgInR5cGUiLCAiT2JqZWN0IiwgInByb3RvdHlwZSIsICJ0b1N0cmluZyIsICJjYWxsIiwgInNsaWNlIiwgImlzT2JqZWN0IiwgImlzTnVtYmVyRmluaXRlIiwgIk51bWJlciIsICJpc0Zpbml0ZSIsICJmaW5pdGVPckRlZmF1bHQiLCAiZGVmYXVsdFZhbHVlIiwgInZhbHVlT3JEZWZhdWx0IiwgInRvUGVyY2VudGFnZSIsICJkaW1lbnNpb24iLCAiZW5kc1dpdGgiLCAicGFyc2VGbG9hdCIsICJ0b0RpbWVuc2lvbiIsICJjYWxsYmFjayIsICJmbiIsICJhcmdzIiwgInRoaXNBcmciLCAiYXBwbHkiLCAiZWFjaCIsICJsb29wYWJsZSIsICJyZXZlcnNlIiwgImkiLCAibGVuIiwgImtleXMiLCAibGVuZ3RoIiwgIl9lbGVtZW50c0VxdWFsIiwgImEwIiwgImExIiwgImlsZW4iLCAidjAiLCAidjEiLCAiZGF0YXNldEluZGV4IiwgImluZGV4IiwgImNsb25lIiwgInNvdXJjZSIsICJtYXAiLCAidGFyZ2V0IiwgImNyZWF0ZSIsICJrbGVuIiwgImsiLCAiaXNWYWxpZEtleSIsICJrZXkiLCAiaW5kZXhPZiIsICJfbWVyZ2VyIiwgIm9wdGlvbnMiLCAidHZhbCIsICJzdmFsIiwgIm1lcmdlIiwgInNvdXJjZXMiLCAibWVyZ2VyIiwgImN1cnJlbnQiLCAibWVyZ2VJZiIsICJfbWVyZ2VySWYiLCAiaGFzT3duUHJvcGVydHkiLCAia2V5UmVzb2x2ZXJzIiwgInYiLCAieCIsICJvIiwgInkiLCAiX3NwbGl0S2V5IiwgImtleSIsICJwYXJ0cyIsICJzcGxpdCIsICJrZXlzIiwgInRtcCIsICJwYXJ0IiwgImVuZHNXaXRoIiwgInNsaWNlIiwgInB1c2giLCAiX2dldEtleVJlc29sdmVyIiwgIm9iaiIsICJrIiwgInJlc29sdmVPYmplY3RLZXkiLCAicmVzb2x2ZXIiLCAiX2NhcGl0YWxpemUiLCAic3RyIiwgImNoYXJBdCIsICJ0b1VwcGVyQ2FzZSIsICJkZWZpbmVkIiwgInZhbHVlIiwgImlzRnVuY3Rpb24iLCAic2V0c0VxdWFsIiwgImEiLCAiYiIsICJzaXplIiwgIml0ZW0iLCAiaGFzIiwgIl9pc0NsaWNrRXZlbnQiLCAiZSIsICJ0eXBlIiwgIlBJIiwgIk1hdGgiLCAiVEFVIiwgIlBJVEFVIiwgIklORklOSVRZIiwgIk51bWJlciIsICJQT1NJVElWRV9JTkZJTklUWSIsICJSQURfUEVSX0RFRyIsICJIQUxGX1BJIiwgIlFVQVJURVJfUEkiLCAiVFdPX1RISVJEU19QSSIsICJsb2cxMCIsICJzaWduIiwgImFsbW9zdEVxdWFscyIsICJlcHNpbG9uIiwgImFicyIsICJuaWNlTnVtIiwgInJhbmdlIiwgInJvdW5kZWRSYW5nZSIsICJyb3VuZCIsICJuaWNlUmFuZ2UiLCAicG93IiwgImZsb29yIiwgImZyYWN0aW9uIiwgIm5pY2VGcmFjdGlvbiIsICJfZmFjdG9yaXplIiwgInJlc3VsdCIsICJzcXJ0IiwgImkiLCAic29ydCIsICJwb3AiLCAiaXNOdW1iZXIiLCAibiIsICJpc05hTiIsICJwYXJzZUZsb2F0IiwgImlzRmluaXRlIiwgImFsbW9zdFdob2xlIiwgInJvdW5kZWQiLCAiX3NldE1pbkFuZE1heEJ5S2V5IiwgImFycmF5IiwgInRhcmdldCIsICJwcm9wZXJ0eSIsICJpbGVuIiwgImxlbmd0aCIsICJtaW4iLCAibWF4IiwgInRvUmFkaWFucyIsICJkZWdyZWVzIiwgInRvRGVncmVlcyIsICJyYWRpYW5zIiwgIl9kZWNpbWFsUGxhY2VzIiwgImlzRmluaXRlTnVtYmVyIiwgInAiLCAiZ2V0QW5nbGVGcm9tUG9pbnQiLCAiY2VudHJlUG9pbnQiLCAiYW5nbGVQb2ludCIsICJkaXN0YW5jZUZyb21YQ2VudGVyIiwgImRpc3RhbmNlRnJvbVlDZW50ZXIiLCAicmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyIiwgImFuZ2xlIiwgImF0YW4yIiwgImRpc3RhbmNlIiwgImRpc3RhbmNlQmV0d2VlblBvaW50cyIsICJwdDEiLCAicHQyIiwgIl9ub3JtYWxpemVBbmdsZSIsICJhIiwgIlRBVSIsICJfYW5nbGVCZXR3ZWVuIiwgImFuZ2xlIiwgInN0YXJ0IiwgImVuZCIsICJzYW1lQW5nbGVJc0Z1bGxDaXJjbGUiLCAicyIsICJlIiwgImFuZ2xlVG9TdGFydCIsICJhbmdsZVRvRW5kIiwgInN0YXJ0VG9BbmdsZSIsICJlbmRUb0FuZ2xlIiwgIl9saW1pdFZhbHVlIiwgInZhbHVlIiwgIm1pbiIsICJtYXgiLCAiTWF0aCIsICJfaW50MTZSYW5nZSIsICJfaXNCZXR3ZWVuIiwgImVwc2lsb24iLCAiX2xvb2t1cCIsICJ0YWJsZSIsICJjbXAiLCAiaW5kZXgiLCAiaGkiLCAibGVuZ3RoIiwgImxvIiwgIm1pZCIsICJfbG9va3VwQnlLZXkiLCAia2V5IiwgImxhc3QiLCAidGkiLCAiX3Jsb29rdXBCeUtleSIsICJfZmlsdGVyQmV0d2VlbiIsICJ2YWx1ZXMiLCAic2xpY2UiLCAiYXJyYXlFdmVudHMiLCAibGlzdGVuQXJyYXlFdmVudHMiLCAiYXJyYXkiLCAibGlzdGVuZXIiLCAiX2NoYXJ0anMiLCAibGlzdGVuZXJzIiwgInB1c2giLCAiT2JqZWN0IiwgImRlZmluZVByb3BlcnR5IiwgImNvbmZpZ3VyYWJsZSIsICJlbnVtZXJhYmxlIiwgImZvckVhY2giLCAibWV0aG9kIiwgIl9jYXBpdGFsaXplIiwgImJhc2UiLCAiYXJncyIsICJyZXMiLCAiYXBwbHkiLCAib2JqZWN0IiwgInVubGlzdGVuQXJyYXlFdmVudHMiLCAic3R1YiIsICJpbmRleE9mIiwgInNwbGljZSIsICJfYXJyYXlVbmlxdWUiLCAiaXRlbXMiLCAic2V0IiwgIlNldCIsICJpIiwgImlsZW4iLCAiYWRkIiwgInNpemUiLCAiQXJyYXkiLCAiZnJvbSIsICJyZXF1ZXN0QW5pbUZyYW1lIiwgIndpbmRvdyIsICJjYWxsYmFjayIsICJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCAidGhyb3R0bGVkIiwgImZuIiwgInRoaXNBcmciLCAiYXJnc1RvVXNlIiwgInRpY2tpbmciLCAiYXJncyIsICJjYWxsIiwgImFwcGx5IiwgImRlYm91bmNlIiwgImRlbGF5IiwgInRpbWVvdXQiLCAiY2xlYXJUaW1lb3V0IiwgInNldFRpbWVvdXQiLCAiX3RvTGVmdFJpZ2h0Q2VudGVyIiwgImFsaWduIiwgIl9hbGlnblN0YXJ0RW5kIiwgInN0YXJ0IiwgImVuZCIsICJfdGV4dFgiLCAibGVmdCIsICJyaWdodCIsICJydGwiLCAiY2hlY2siLCAiYXRFZGdlIiwgInQiLCAiZWxhc3RpY0luIiwgInMiLCAicCIsICJNYXRoIiwgInBvdyIsICJzaW4iLCAiVEFVIiwgImVsYXN0aWNPdXQiLCAiZWZmZWN0cyIsICJsaW5lYXIiLCAiZWFzZUluUXVhZCIsICJlYXNlT3V0UXVhZCIsICJlYXNlSW5PdXRRdWFkIiwgImVhc2VJbkN1YmljIiwgImVhc2VPdXRDdWJpYyIsICJlYXNlSW5PdXRDdWJpYyIsICJlYXNlSW5RdWFydCIsICJlYXNlT3V0UXVhcnQiLCAiZWFzZUluT3V0UXVhcnQiLCAiZWFzZUluUXVpbnQiLCAiZWFzZU91dFF1aW50IiwgImVhc2VJbk91dFF1aW50IiwgImVhc2VJblNpbmUiLCAiY29zIiwgIkhBTEZfUEkiLCAiZWFzZU91dFNpbmUiLCAiZWFzZUluT3V0U2luZSIsICJQSSIsICJlYXNlSW5FeHBvIiwgImVhc2VPdXRFeHBvIiwgImVhc2VJbk91dEV4cG8iLCAiZWFzZUluQ2lyYyIsICJzcXJ0IiwgImVhc2VPdXRDaXJjIiwgImVhc2VJbk91dENpcmMiLCAiZWFzZUluRWxhc3RpYyIsICJlYXNlT3V0RWxhc3RpYyIsICJlYXNlSW5PdXRFbGFzdGljIiwgImVhc2VJbkJhY2siLCAiZWFzZU91dEJhY2siLCAiZWFzZUluT3V0QmFjayIsICJlYXNlSW5Cb3VuY2UiLCAiZWFzZU91dEJvdW5jZSIsICJtIiwgImQiLCAiZWFzZUluT3V0Qm91bmNlIiwgImlzUGF0dGVybk9yR3JhZGllbnQiLCAidmFsdWUiLCAidHlwZSIsICJ0b1N0cmluZyIsICJjb2xvciIsICJDb2xvciIsICJnZXRIb3ZlckNvbG9yIiwgInNhdHVyYXRlIiwgImRhcmtlbiIsICJoZXhTdHJpbmciLCAibnVtYmVycyIsICJjb2xvcnMiLCAiYXBwbHlBbmltYXRpb25zRGVmYXVsdHMiLCAiZGVmYXVsdHMiLCAic2V0IiwgImRlbGF5IiwgInVuZGVmaW5lZCIsICJkdXJhdGlvbiIsICJlYXNpbmciLCAiZm4iLCAiZnJvbSIsICJsb29wIiwgInRvIiwgImRlc2NyaWJlIiwgIl9mYWxsYmFjayIsICJfaW5kZXhhYmxlIiwgIl9zY3JpcHRhYmxlIiwgIm5hbWUiLCAicHJvcGVydGllcyIsICJhY3RpdmUiLCAiYW5pbWF0aW9uIiwgInJlc2l6ZSIsICJzaG93IiwgImFuaW1hdGlvbnMiLCAidmlzaWJsZSIsICJoaWRlIiwgInYiLCAiYXBwbHlMYXlvdXRzRGVmYXVsdHMiLCAiYXV0b1BhZGRpbmciLCAicGFkZGluZyIsICJ0b3AiLCAicmlnaHQiLCAiYm90dG9tIiwgImxlZnQiLCAiaW50bENhY2hlIiwgIk1hcCIsICJnZXROdW1iZXJGb3JtYXQiLCAibG9jYWxlIiwgIm9wdGlvbnMiLCAiY2FjaGVLZXkiLCAiSlNPTiIsICJzdHJpbmdpZnkiLCAiZm9ybWF0dGVyIiwgImdldCIsICJJbnRsIiwgIk51bWJlckZvcm1hdCIsICJmb3JtYXROdW1iZXIiLCAibnVtIiwgImZvcm1hdCIsICJmb3JtYXR0ZXJzIiwgInZhbHVlcyIsICJpc0FycmF5IiwgIm51bWVyaWMiLCAidGlja1ZhbHVlIiwgImluZGV4IiwgInRpY2tzIiwgImNoYXJ0IiwgIm5vdGF0aW9uIiwgImRlbHRhIiwgImxlbmd0aCIsICJtYXhUaWNrIiwgIm1heCIsICJhYnMiLCAiY2FsY3VsYXRlRGVsdGEiLCAibG9nRGVsdGEiLCAibG9nMTAiLCAibnVtRGVjaW1hbCIsICJtaW4iLCAiZmxvb3IiLCAibWluaW11bUZyYWN0aW9uRGlnaXRzIiwgIm1heGltdW1GcmFjdGlvbkRpZ2l0cyIsICJPYmplY3QiLCAiYXNzaWduIiwgImxvZ2FyaXRobWljIiwgInJlbWFpbiIsICJzaWduaWZpY2FuZCIsICJpbmNsdWRlcyIsICJjYWxsIiwgImFwcGx5U2NhbGVEZWZhdWx0cyIsICJkaXNwbGF5IiwgIm9mZnNldCIsICJyZXZlcnNlIiwgImJlZ2luQXRaZXJvIiwgImJvdW5kcyIsICJncmFjZSIsICJncmlkIiwgImxpbmVXaWR0aCIsICJkcmF3T25DaGFydEFyZWEiLCAiZHJhd1RpY2tzIiwgInRpY2tMZW5ndGgiLCAidGlja1dpZHRoIiwgIl9jdHgiLCAidGlja0NvbG9yIiwgImJvcmRlciIsICJkYXNoIiwgImRhc2hPZmZzZXQiLCAid2lkdGgiLCAidGl0bGUiLCAidGV4dCIsICJtaW5Sb3RhdGlvbiIsICJtYXhSb3RhdGlvbiIsICJtaXJyb3IiLCAidGV4dFN0cm9rZVdpZHRoIiwgInRleHRTdHJva2VDb2xvciIsICJhdXRvU2tpcCIsICJhdXRvU2tpcFBhZGRpbmciLCAibGFiZWxPZmZzZXQiLCAiY2FsbGJhY2siLCAiVGlja3MiLCAibWlub3IiLCAibWFqb3IiLCAiYWxpZ24iLCAiY3Jvc3NBbGlnbiIsICJzaG93TGFiZWxCYWNrZHJvcCIsICJiYWNrZHJvcENvbG9yIiwgImJhY2tkcm9wUGFkZGluZyIsICJyb3V0ZSIsICJzdGFydHNXaXRoIiwgIm92ZXJyaWRlcyIsICJjcmVhdGUiLCAiZGVzY3JpcHRvcnMiLCAiZ2V0U2NvcGUiLCAibm9kZSIsICJrZXkiLCAia2V5cyIsICJzcGxpdCIsICJpIiwgIm4iLCAiayIsICJyb290IiwgInNjb3BlIiwgIm1lcmdlIiwgIkRlZmF1bHRzIiwgImNvbnN0cnVjdG9yIiwgIl9kZXNjcmlwdG9ycyIsICJfYXBwbGllcnMiLCAiYmFja2dyb3VuZENvbG9yIiwgImJvcmRlckNvbG9yIiwgImRhdGFzZXRzIiwgImRldmljZVBpeGVsUmF0aW8iLCAiY29udGV4dCIsICJwbGF0Zm9ybSIsICJnZXREZXZpY2VQaXhlbFJhdGlvIiwgImVsZW1lbnRzIiwgImV2ZW50cyIsICJmb250IiwgImZhbWlseSIsICJzaXplIiwgInN0eWxlIiwgImxpbmVIZWlnaHQiLCAid2VpZ2h0IiwgImhvdmVyIiwgImhvdmVyQmFja2dyb3VuZENvbG9yIiwgImN0eCIsICJob3ZlckJvcmRlckNvbG9yIiwgImhvdmVyQ29sb3IiLCAiaW5kZXhBeGlzIiwgImludGVyYWN0aW9uIiwgIm1vZGUiLCAiaW50ZXJzZWN0IiwgImluY2x1ZGVJbnZpc2libGUiLCAibWFpbnRhaW5Bc3BlY3RSYXRpbyIsICJvbkhvdmVyIiwgIm9uQ2xpY2siLCAicGFyc2luZyIsICJwbHVnaW5zIiwgInJlc3BvbnNpdmUiLCAic2NhbGUiLCAic2NhbGVzIiwgInNob3dMaW5lIiwgImRyYXdBY3RpdmVFbGVtZW50c09uVG9wIiwgImFwcGx5IiwgIm92ZXJyaWRlIiwgInRhcmdldFNjb3BlIiwgInRhcmdldE5hbWUiLCAic2NvcGVPYmplY3QiLCAidGFyZ2V0U2NvcGVPYmplY3QiLCAicHJpdmF0ZU5hbWUiLCAiZGVmaW5lUHJvcGVydGllcyIsICJ3cml0YWJsZSIsICJlbnVtZXJhYmxlIiwgImxvY2FsIiwgInRhcmdldCIsICJpc09iamVjdCIsICJ2YWx1ZU9yRGVmYXVsdCIsICJhcHBsaWVycyIsICJmb3JFYWNoIiwgInRvRm9udFN0cmluZyIsICJpc051bGxPclVuZGVmIiwgIl9tZWFzdXJlVGV4dCIsICJkYXRhIiwgImdjIiwgImxvbmdlc3QiLCAic3RyaW5nIiwgInRleHRXaWR0aCIsICJtZWFzdXJlVGV4dCIsICJwdXNoIiwgIl9sb25nZXN0VGV4dCIsICJhcnJheU9mVGhpbmdzIiwgImNhY2hlIiwgImdhcmJhZ2VDb2xsZWN0IiwgInNhdmUiLCAiaWxlbiIsICJqIiwgImpsZW4iLCAidGhpbmciLCAibmVzdGVkVGhpbmciLCAicmVzdG9yZSIsICJnY0xlbiIsICJzcGxpY2UiLCAiX2FsaWduUGl4ZWwiLCAicGl4ZWwiLCAiY3VycmVudERldmljZVBpeGVsUmF0aW8iLCAiaGFsZldpZHRoIiwgInJvdW5kIiwgImNsZWFyQ2FudmFzIiwgImNhbnZhcyIsICJnZXRDb250ZXh0IiwgInJlc2V0VHJhbnNmb3JtIiwgImNsZWFyUmVjdCIsICJoZWlnaHQiLCAiZHJhd1BvaW50IiwgIngiLCAieSIsICJkcmF3UG9pbnRMZWdlbmQiLCAidyIsICJ4T2Zmc2V0IiwgInlPZmZzZXQiLCAiY29ybmVyUmFkaXVzIiwgInhPZmZzZXRXIiwgInlPZmZzZXRXIiwgInBvaW50U3R5bGUiLCAicm90YXRpb24iLCAicmFkaXVzIiwgInJhZCIsICJSQURfUEVSX0RFRyIsICJ0cmFuc2xhdGUiLCAicm90YXRlIiwgImRyYXdJbWFnZSIsICJpc05hTiIsICJiZWdpblBhdGgiLCAiZWxsaXBzZSIsICJhcmMiLCAiY2xvc2VQYXRoIiwgIm1vdmVUbyIsICJUV09fVEhJUkRTX1BJIiwgImxpbmVUbyIsICJRVUFSVEVSX1BJIiwgIlNRUlQxXzIiLCAicmVjdCIsICJmaWxsIiwgImJvcmRlcldpZHRoIiwgInN0cm9rZSIsICJfaXNQb2ludEluQXJlYSIsICJwb2ludCIsICJhcmVhIiwgIm1hcmdpbiIsICJjbGlwQXJlYSIsICJjbGlwIiwgInVuY2xpcEFyZWEiLCAicmVuZGVyVGV4dCIsICJjdHgiLCAidGV4dCIsICJ4IiwgInkiLCAiZm9udCIsICJvcHRzIiwgImxpbmVzIiwgImlzQXJyYXkiLCAic3Ryb2tlIiwgInN0cm9rZVdpZHRoIiwgInN0cm9rZUNvbG9yIiwgImkiLCAibGluZSIsICJzYXZlIiwgInN0cmluZyIsICJzZXRSZW5kZXJPcHRzIiwgImxlbmd0aCIsICJiYWNrZHJvcCIsICJkcmF3QmFja2Ryb3AiLCAic3Ryb2tlU3R5bGUiLCAiaXNOdWxsT3JVbmRlZiIsICJsaW5lV2lkdGgiLCAic3Ryb2tlVGV4dCIsICJtYXhXaWR0aCIsICJmaWxsVGV4dCIsICJkZWNvcmF0ZVRleHQiLCAibGluZUhlaWdodCIsICJyZXN0b3JlIiwgInRyYW5zbGF0aW9uIiwgInRyYW5zbGF0ZSIsICJyb3RhdGlvbiIsICJyb3RhdGUiLCAiY29sb3IiLCAiZmlsbFN0eWxlIiwgInRleHRBbGlnbiIsICJ0ZXh0QmFzZWxpbmUiLCAic3RyaWtldGhyb3VnaCIsICJ1bmRlcmxpbmUiLCAibWV0cmljcyIsICJtZWFzdXJlVGV4dCIsICJsZWZ0IiwgImFjdHVhbEJvdW5kaW5nQm94TGVmdCIsICJyaWdodCIsICJhY3R1YWxCb3VuZGluZ0JveFJpZ2h0IiwgInRvcCIsICJhY3R1YWxCb3VuZGluZ0JveEFzY2VudCIsICJib3R0b20iLCAiYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IiwgInlEZWNvcmF0aW9uIiwgImJlZ2luUGF0aCIsICJkZWNvcmF0aW9uV2lkdGgiLCAibW92ZVRvIiwgImxpbmVUbyIsICJvbGRDb2xvciIsICJmaWxsUmVjdCIsICJ3aWR0aCIsICJoZWlnaHQiLCAiYWRkUm91bmRlZFJlY3RQYXRoIiwgInJlY3QiLCAidyIsICJoIiwgInJhZGl1cyIsICJhcmMiLCAidG9wTGVmdCIsICJIQUxGX1BJIiwgIlBJIiwgImJvdHRvbUxlZnQiLCAiYm90dG9tUmlnaHQiLCAidG9wUmlnaHQiLCAiTElORV9IRUlHSFQiLCAiRk9OVF9TVFlMRSIsICJ0b0xpbmVIZWlnaHQiLCAidmFsdWUiLCAic2l6ZSIsICJtYXRjaGVzIiwgIm1hdGNoIiwgIm51bWJlck9yWmVybyIsICJ2IiwgIl9yZWFkVmFsdWVUb1Byb3BzIiwgInByb3BzIiwgInJldCIsICJvYmpQcm9wcyIsICJpc09iamVjdCIsICJrZXlzIiwgIk9iamVjdCIsICJyZWFkIiwgInByb3AiLCAidmFsdWVPckRlZmF1bHQiLCAidG9UUkJMIiwgInRvVFJCTENvcm5lcnMiLCAidG9QYWRkaW5nIiwgIm9iaiIsICJ0b0ZvbnQiLCAib3B0aW9ucyIsICJmYWxsYmFjayIsICJkZWZhdWx0cyIsICJwYXJzZUludCIsICJzdHlsZSIsICJjb25zb2xlIiwgIndhcm4iLCAidW5kZWZpbmVkIiwgImZhbWlseSIsICJ3ZWlnaHQiLCAidG9Gb250U3RyaW5nIiwgInJlc29sdmUiLCAiaW5wdXRzIiwgImNvbnRleHQiLCAiaW5kZXgiLCAiaW5mbyIsICJjYWNoZWFibGUiLCAiaWxlbiIsICJfYWRkR3JhY2UiLCAibWlubWF4IiwgImdyYWNlIiwgImJlZ2luQXRaZXJvIiwgIm1pbiIsICJtYXgiLCAiY2hhbmdlIiwgInRvRGltZW5zaW9uIiwgImtlZXBaZXJvIiwgImFkZCIsICJNYXRoIiwgImFicyIsICJjcmVhdGVDb250ZXh0IiwgInBhcmVudENvbnRleHQiLCAiYXNzaWduIiwgImNyZWF0ZSIsICJfY3JlYXRlUmVzb2x2ZXIiLCAic2NvcGVzIiwgInByZWZpeGVzIiwgInJvb3RTY29wZXMiLCAiZ2V0VGFyZ2V0IiwgImRlZmluZWQiLCAiX3Jlc29sdmUiLCAiY2FjaGUiLCAiU3ltYm9sIiwgInRvU3RyaW5nVGFnIiwgIl9jYWNoZWFibGUiLCAiX3Njb3BlcyIsICJfcm9vdFNjb3BlcyIsICJfZmFsbGJhY2siLCAiX2dldFRhcmdldCIsICJvdmVycmlkZSIsICJzY29wZSIsICJQcm94eSIsICJkZWxldGVQcm9wZXJ0eSIsICJ0YXJnZXQiLCAiX2tleXMiLCAiZ2V0IiwgIl9jYWNoZWQiLCAiX3Jlc29sdmVXaXRoUHJlZml4ZXMiLCAiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwgIlJlZmxlY3QiLCAiZ2V0UHJvdG90eXBlT2YiLCAiaGFzIiwgImdldEtleXNGcm9tQWxsU2NvcGVzIiwgImluY2x1ZGVzIiwgIm93bktleXMiLCAic2V0IiwgInN0b3JhZ2UiLCAiX3N0b3JhZ2UiLCAiX2F0dGFjaENvbnRleHQiLCAicHJveHkiLCAic3ViUHJveHkiLCAiZGVzY3JpcHRvckRlZmF1bHRzIiwgIl9wcm94eSIsICJfY29udGV4dCIsICJfc3ViUHJveHkiLCAiX3N0YWNrIiwgIlNldCIsICJfZGVzY3JpcHRvcnMiLCAic2V0Q29udGV4dCIsICJyZWNlaXZlciIsICJfcmVzb2x2ZVdpdGhDb250ZXh0IiwgImFsbEtleXMiLCAiZW51bWVyYWJsZSIsICJjb25maWd1cmFibGUiLCAic2NyaXB0YWJsZSIsICJpbmRleGFibGUiLCAiX3NjcmlwdGFibGUiLCAiX2luZGV4YWJsZSIsICJfYWxsS2V5cyIsICJpc1NjcmlwdGFibGUiLCAiaXNGdW5jdGlvbiIsICJpc0luZGV4YWJsZSIsICJyZWFkS2V5IiwgInByZWZpeCIsICJuYW1lIiwgIl9jYXBpdGFsaXplIiwgIm5lZWRzU3ViUmVzb2x2ZXIiLCAiY29uc3RydWN0b3IiLCAicHJvdG90eXBlIiwgImhhc093blByb3BlcnR5IiwgImNhbGwiLCAiZGVzY3JpcHRvcnMiLCAiX3Jlc29sdmVTY3JpcHRhYmxlIiwgIl9yZXNvbHZlQXJyYXkiLCAiRXJyb3IiLCAiQXJyYXkiLCAiZnJvbSIsICJqb2luIiwgImRlbGV0ZSIsICJjcmVhdGVTdWJSZXNvbHZlciIsICJhcnIiLCAiZmlsdGVyIiwgInMiLCAiaXRlbSIsICJyZXNvbHZlciIsICJwdXNoIiwgInJlc29sdmVGYWxsYmFjayIsICJnZXRTY29wZSIsICJrZXkiLCAicGFyZW50IiwgInJlc29sdmVPYmplY3RLZXkiLCAiYWRkU2NvcGVzIiwgInBhcmVudFNjb3BlcyIsICJwYXJlbnRGYWxsYmFjayIsICJhbGxTY29wZXMiLCAiYWRkU2NvcGVzRnJvbUtleSIsICJzdWJHZXRUYXJnZXQiLCAicmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzIiwgImsiLCAic3RhcnRzV2l0aCIsICJFUFNJTE9OIiwgIk51bWJlciIsICJfaXNEb21TdXBwb3J0ZWQiLCAid2luZG93IiwgImRvY3VtZW50IiwgIl9nZXRQYXJlbnROb2RlIiwgImRvbU5vZGUiLCAicGFyZW50IiwgInBhcmVudE5vZGUiLCAidG9TdHJpbmciLCAiaG9zdCIsICJwYXJzZU1heFN0eWxlIiwgInN0eWxlVmFsdWUiLCAibm9kZSIsICJwYXJlbnRQcm9wZXJ0eSIsICJ2YWx1ZUluUGl4ZWxzIiwgInBhcnNlSW50IiwgImluZGV4T2YiLCAiZ2V0Q29tcHV0ZWRTdHlsZSIsICJlbGVtZW50IiwgIm93bmVyRG9jdW1lbnQiLCAiZGVmYXVsdFZpZXciLCAiZ2V0U3R5bGUiLCAiZWwiLCAicHJvcGVydHkiLCAiZ2V0UHJvcGVydHlWYWx1ZSIsICJwb3NpdGlvbnMiLCAiZ2V0UG9zaXRpb25lZFN0eWxlIiwgInN0eWxlcyIsICJzdHlsZSIsICJzdWZmaXgiLCAicmVzdWx0IiwgImkiLCAicG9zIiwgInBhcnNlRmxvYXQiLCAid2lkdGgiLCAibGVmdCIsICJyaWdodCIsICJoZWlnaHQiLCAidG9wIiwgImJvdHRvbSIsICJ1c2VPZmZzZXRQb3MiLCAieCIsICJ5IiwgInRhcmdldCIsICJzaGFkb3dSb290IiwgImdldENhbnZhc1Bvc2l0aW9uIiwgImUiLCAiY2FudmFzIiwgInRvdWNoZXMiLCAic291cmNlIiwgImxlbmd0aCIsICJvZmZzZXRYIiwgIm9mZnNldFkiLCAiYm94IiwgInJlY3QiLCAiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwgImNsaWVudFgiLCAiY2xpZW50WSIsICJnZXRSZWxhdGl2ZVBvc2l0aW9uIiwgImV2ZW50IiwgImNoYXJ0IiwgImN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIiwgImJvcmRlckJveCIsICJib3hTaXppbmciLCAicGFkZGluZ3MiLCAiYm9yZGVycyIsICJ4T2Zmc2V0IiwgInlPZmZzZXQiLCAiTWF0aCIsICJyb3VuZCIsICJnZXRDb250YWluZXJTaXplIiwgIm1heFdpZHRoIiwgIm1heEhlaWdodCIsICJ1bmRlZmluZWQiLCAiY29udGFpbmVyIiwgImNsaWVudFdpZHRoIiwgImNsaWVudEhlaWdodCIsICJjb250YWluZXJTdHlsZSIsICJjb250YWluZXJCb3JkZXIiLCAiY29udGFpbmVyUGFkZGluZyIsICJJTkZJTklUWSIsICJyb3VuZDEiLCAidiIsICJnZXRNYXhpbXVtU2l6ZSIsICJiYldpZHRoIiwgImJiSGVpZ2h0IiwgImFzcGVjdFJhdGlvIiwgIm1hcmdpbnMiLCAiY29udGFpbmVyU2l6ZSIsICJtYXgiLCAibWluIiwgIm1haW50YWluSGVpZ2h0IiwgImZsb29yIiwgInJldGluYVNjYWxlIiwgImZvcmNlUmF0aW8iLCAiZm9yY2VTdHlsZSIsICJwaXhlbFJhdGlvIiwgImRldmljZUhlaWdodCIsICJkZXZpY2VXaWR0aCIsICJjdHgiLCAic2V0VHJhbnNmb3JtIiwgInN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMiLCAicGFzc2l2ZVN1cHBvcnRlZCIsICJvcHRpb25zIiwgInBhc3NpdmUiLCAiYWRkRXZlbnRMaXN0ZW5lciIsICJyZW1vdmVFdmVudExpc3RlbmVyIiwgInJlYWRVc2VkU2l6ZSIsICJ2YWx1ZSIsICJtYXRjaGVzIiwgIm1hdGNoIiwgImdldFJpZ2h0VG9MZWZ0QWRhcHRlciIsICJyZWN0WCIsICJ3aWR0aCIsICJ4IiwgInNldFdpZHRoIiwgInciLCAidGV4dEFsaWduIiwgImFsaWduIiwgInhQbHVzIiwgInZhbHVlIiwgImxlZnRGb3JMdHIiLCAiaXRlbVdpZHRoIiwgImdldExlZnRUb1JpZ2h0QWRhcHRlciIsICJfaXRlbVdpZHRoIiwgImdldFJ0bEFkYXB0ZXIiLCAicnRsIiwgIm92ZXJyaWRlVGV4dERpcmVjdGlvbiIsICJjdHgiLCAiZGlyZWN0aW9uIiwgInN0eWxlIiwgIm9yaWdpbmFsIiwgImNhbnZhcyIsICJnZXRQcm9wZXJ0eVZhbHVlIiwgImdldFByb3BlcnR5UHJpb3JpdHkiLCAic2V0UHJvcGVydHkiLCAicHJldlRleHREaXJlY3Rpb24iLCAicmVzdG9yZVRleHREaXJlY3Rpb24iLCAidW5kZWZpbmVkIiwgIkFuaW1hdG9yIiwgImNvbnN0cnVjdG9yIiwgIl9yZXF1ZXN0IiwgIl9jaGFydHMiLCAiTWFwIiwgIl9ydW5uaW5nIiwgIl9sYXN0RGF0ZSIsICJ1bmRlZmluZWQiLCAiX25vdGlmeSIsICJjaGFydCIsICJhbmltcyIsICJkYXRlIiwgInR5cGUiLCAiY2FsbGJhY2tzIiwgImxpc3RlbmVycyIsICJudW1TdGVwcyIsICJkdXJhdGlvbiIsICJmb3JFYWNoIiwgImZuIiwgImluaXRpYWwiLCAiY3VycmVudFN0ZXAiLCAiTWF0aCIsICJtaW4iLCAic3RhcnQiLCAiX3JlZnJlc2giLCAicmVxdWVzdEFuaW1GcmFtZSIsICJjYWxsIiwgIndpbmRvdyIsICJfdXBkYXRlIiwgIkRhdGUiLCAibm93IiwgInJlbWFpbmluZyIsICJydW5uaW5nIiwgIml0ZW1zIiwgImxlbmd0aCIsICJpIiwgImRyYXciLCAiaXRlbSIsICJfYWN0aXZlIiwgIl90b3RhbCIsICJ0aWNrIiwgInBvcCIsICJfZ2V0QW5pbXMiLCAiY2hhcnRzIiwgImdldCIsICJjb21wbGV0ZSIsICJwcm9ncmVzcyIsICJzZXQiLCAibGlzdGVuIiwgImV2ZW50IiwgImNiIiwgInB1c2giLCAiYWRkIiwgImhhcyIsICJyZWR1Y2UiLCAiYWNjIiwgImN1ciIsICJtYXgiLCAiX2R1cmF0aW9uIiwgInN0b3AiLCAiY2FuY2VsIiwgInJlbW92ZSIsICJkZWxldGUiLCAidHJhbnNwYXJlbnQiLCAiaW50ZXJwb2xhdG9ycyIsICJib29sZWFuIiwgImZyb20iLCAidG8iLCAiZmFjdG9yIiwgImNvbG9yIiwgImMwIiwgImhlbHBlcnNDb2xvciIsICJjMSIsICJ2YWxpZCIsICJtaXgiLCAiaGV4U3RyaW5nIiwgIm51bWJlciIsICJBbmltYXRpb24iLCAiY2ZnIiwgInRhcmdldCIsICJwcm9wIiwgImN1cnJlbnRWYWx1ZSIsICJyZXNvbHZlIiwgIl9mbiIsICJfZWFzaW5nIiwgImVmZmVjdHMiLCAiZWFzaW5nIiwgImxpbmVhciIsICJfc3RhcnQiLCAiZmxvb3IiLCAiZGVsYXkiLCAiX2xvb3AiLCAibG9vcCIsICJfdGFyZ2V0IiwgIl9wcm9wIiwgIl9mcm9tIiwgIl90byIsICJfcHJvbWlzZXMiLCAiYWN0aXZlIiwgInVwZGF0ZSIsICJlbGFwc2VkIiwgInJlbWFpbiIsICJ3YWl0IiwgInByb21pc2VzIiwgIlByb21pc2UiLCAicmVzIiwgInJlaiIsICJyZXNvbHZlZCIsICJtZXRob2QiLCAiQW5pbWF0aW9ucyIsICJjb25maWciLCAiX2NoYXJ0IiwgIl9wcm9wZXJ0aWVzIiwgImNvbmZpZ3VyZSIsICJpc09iamVjdCIsICJhbmltYXRpb25PcHRpb25zIiwgIk9iamVjdCIsICJrZXlzIiwgImRlZmF1bHRzIiwgImFuaW1hdGlvbiIsICJhbmltYXRlZFByb3BzIiwgImdldE93blByb3BlcnR5TmFtZXMiLCAia2V5IiwgIm9wdGlvbiIsICJpc0FycmF5IiwgInByb3BlcnRpZXMiLCAiX2FuaW1hdGVPcHRpb25zIiwgInZhbHVlcyIsICJuZXdPcHRpb25zIiwgIm9wdGlvbnMiLCAicmVzb2x2ZVRhcmdldE9wdGlvbnMiLCAiYW5pbWF0aW9ucyIsICJfY3JlYXRlQW5pbWF0aW9ucyIsICIkc2hhcmVkIiwgImF3YWl0QWxsIiwgIiRhbmltYXRpb25zIiwgInRoZW4iLCAicHJvcHMiLCAiY2hhckF0IiwgInZhbHVlIiwgInNpemUiLCAiYXNzaWduIiwgImFuaW1hdG9yIiwgImFuaW0iLCAiYWxsIiwgInNjYWxlQ2xpcCIsICJzY2FsZSIsICJhbGxvd2VkT3ZlcmZsb3ciLCAib3B0cyIsICJyZXZlcnNlIiwgImVuZCIsICJkZWZhdWx0Q2xpcCIsICJ4U2NhbGUiLCAieVNjYWxlIiwgIngiLCAieSIsICJ0b3AiLCAicmlnaHQiLCAiYm90dG9tIiwgImxlZnQiLCAidG9DbGlwIiwgInQiLCAiciIsICJiIiwgImwiLCAiZGlzYWJsZWQiLCAiZ2V0U29ydGVkRGF0YXNldEluZGljZXMiLCAiZmlsdGVyVmlzaWJsZSIsICJtZXRhc2V0cyIsICJfZ2V0U29ydGVkRGF0YXNldE1ldGFzIiwgImlsZW4iLCAiaW5kZXgiLCAiYXBwbHlTdGFjayIsICJzdGFjayIsICJkc0luZGV4IiwgInNpbmdsZU1vZGUiLCAibW9kZSIsICJkYXRhc2V0SW5kZXgiLCAib3RoZXJWYWx1ZSIsICJpc0Zpbml0ZSIsICJzaWduIiwgImNvbnZlcnRPYmplY3REYXRhVG9BcnJheSIsICJkYXRhIiwgImFkYXRhIiwgIkFycmF5IiwgImlzU3RhY2tlZCIsICJtZXRhIiwgInN0YWNrZWQiLCAiZ2V0U3RhY2tLZXkiLCAiaW5kZXhTY2FsZSIsICJ2YWx1ZVNjYWxlIiwgImlkIiwgImdldFVzZXJCb3VuZHMiLCAibWluRGVmaW5lZCIsICJtYXhEZWZpbmVkIiwgIk51bWJlciIsICJORUdBVElWRV9JTkZJTklUWSIsICJQT1NJVElWRV9JTkZJTklUWSIsICJnZXRPckNyZWF0ZVN0YWNrIiwgInN0YWNrcyIsICJzdGFja0tleSIsICJpbmRleFZhbHVlIiwgInN1YlN0YWNrIiwgImdldExhc3RJbmRleEluU3RhY2siLCAidlNjYWxlIiwgInBvc2l0aXZlIiwgImdldE1hdGNoaW5nVmlzaWJsZU1ldGFzIiwgInVwZGF0ZVN0YWNrcyIsICJjb250cm9sbGVyIiwgInBhcnNlZCIsICJfY2FjaGVkTWV0YSIsICJfc3RhY2tzIiwgImlTY2FsZSIsICJpQXhpcyIsICJheGlzIiwgInZBeGlzIiwgIml0ZW1TdGFja3MiLCAiX3RvcCIsICJfYm90dG9tIiwgInZpc3VhbFZhbHVlcyIsICJfdmlzdWFsVmFsdWVzIiwgImdldEZpcnN0U2NhbGVJZCIsICJzY2FsZXMiLCAiZmlsdGVyIiwgInNoaWZ0IiwgImNyZWF0ZURhdGFzZXRDb250ZXh0IiwgInBhcmVudCIsICJjcmVhdGVDb250ZXh0IiwgImRhdGFzZXQiLCAiY3JlYXRlRGF0YUNvbnRleHQiLCAiZWxlbWVudCIsICJkYXRhSW5kZXgiLCAicmF3IiwgImNsZWFyU3RhY2tzIiwgIl9wYXJzZWQiLCAiaXNEaXJlY3RVcGRhdGVNb2RlIiwgImNsb25lSWZOb3RTaGFyZWQiLCAiY2FjaGVkIiwgInNoYXJlZCIsICJjcmVhdGVTdGFjayIsICJjYW5TdGFjayIsICJoaWRkZW4iLCAiX3N0YWNrZWQiLCAiRGF0YXNldENvbnRyb2xsZXIiLCAiX2N0eCIsICJjdHgiLCAiX2NhY2hlZERhdGFPcHRzIiwgImdldE1ldGEiLCAiX3R5cGUiLCAiX3BhcnNpbmciLCAiX2RhdGEiLCAiX29iamVjdERhdGEiLCAiX3NoYXJlZE9wdGlvbnMiLCAiX2RyYXdTdGFydCIsICJfZHJhd0NvdW50IiwgImVuYWJsZU9wdGlvblNoYXJpbmciLCAic3VwcG9ydHNEZWNpbWF0aW9uIiwgIiRjb250ZXh0IiwgIl9zeW5jTGlzdCIsICJkYXRhc2V0RWxlbWVudFR5cGUiLCAiZGF0YUVsZW1lbnRUeXBlIiwgImluaXRpYWxpemUiLCAibGlua1NjYWxlcyIsICJhZGRFbGVtZW50cyIsICJmaWxsIiwgImlzUGx1Z2luRW5hYmxlZCIsICJjb25zb2xlIiwgIndhcm4iLCAidXBkYXRlSW5kZXgiLCAiZ2V0RGF0YXNldCIsICJjaG9vc2VJZCIsICJ4aWQiLCAieEF4aXNJRCIsICJ2YWx1ZU9yRGVmYXVsdCIsICJ5aWQiLCAieUF4aXNJRCIsICJyaWQiLCAickF4aXNJRCIsICJpbmRleEF4aXMiLCAiaWlkIiwgImlBeGlzSUQiLCAidmlkIiwgInZBeGlzSUQiLCAiZ2V0U2NhbGVGb3JJZCIsICJyU2NhbGUiLCAiZGF0YXNldHMiLCAiZ2V0RGF0YXNldE1ldGEiLCAic2NhbGVJRCIsICJfZ2V0T3RoZXJTY2FsZSIsICJyZXNldCIsICJfZGVzdHJveSIsICJ1bmxpc3RlbkFycmF5RXZlbnRzIiwgIl9kYXRhQ2hlY2siLCAiaXNFeHRlbnNpYmxlIiwgImxpc3RlbkFycmF5RXZlbnRzIiwgImJ1aWxkT3JVcGRhdGVFbGVtZW50cyIsICJyZXNldE5ld0VsZW1lbnRzIiwgInN0YWNrQ2hhbmdlZCIsICJvbGRTdGFja2VkIiwgIl9yZXN5bmNFbGVtZW50cyIsICJzY29wZUtleXMiLCAiZGF0YXNldFNjb3BlS2V5cyIsICJzY29wZXMiLCAiZ2V0T3B0aW9uU2NvcGVzIiwgImNyZWF0ZVJlc29sdmVyIiwgImdldENvbnRleHQiLCAicGFyc2luZyIsICJwYXJzZSIsICJjb3VudCIsICJzb3J0ZWQiLCAiX3NvcnRlZCIsICJwcmV2IiwgInBhcnNlQXJyYXlEYXRhIiwgInBhcnNlT2JqZWN0RGF0YSIsICJwYXJzZVByaW1pdGl2ZURhdGEiLCAiaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYiLCAibGFiZWxzIiwgImdldExhYmVscyIsICJzaW5nbGVTY2FsZSIsICJ4QXhpc0tleSIsICJ5QXhpc0tleSIsICJyZXNvbHZlT2JqZWN0S2V5IiwgImdldFBhcnNlZCIsICJnZXREYXRhRWxlbWVudCIsICJ1cGRhdGVSYW5nZUZyb21QYXJzZWQiLCAicmFuZ2UiLCAicGFyc2VkVmFsdWUiLCAiTmFOIiwgImdldE1pbk1heCIsICJvdGhlclNjYWxlIiwgIm90aGVyTWluIiwgIm90aGVyTWF4IiwgIl9za2lwIiwgImdldEFsbFBhcnNlZFZhbHVlcyIsICJnZXRNYXhPdmVyZmxvdyIsICJnZXRMYWJlbEFuZFZhbHVlIiwgImxhYmVsIiwgImdldExhYmVsRm9yVmFsdWUiLCAiX2NsaXAiLCAiY2xpcCIsICJlbGVtZW50cyIsICJhcmVhIiwgImNoYXJ0QXJlYSIsICJkcmF3QWN0aXZlRWxlbWVudHNPblRvcCIsICJnZXRTdHlsZSIsICJyZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zIiwgInJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMiLCAiY29udGV4dCIsICJfcmVzb2x2ZUVsZW1lbnRPcHRpb25zIiwgImVsZW1lbnRUeXBlIiwgImNhY2hlIiwgImNhY2hlS2V5IiwgInNoYXJpbmciLCAiZGVmaW5lZCIsICJkYXRhc2V0RWxlbWVudFNjb3BlS2V5cyIsICJwcmVmaXhlcyIsICJuYW1lcyIsICJyZXNvbHZlTmFtZWRPcHRpb25zIiwgImZyZWV6ZSIsICJfcmVzb2x2ZUFuaW1hdGlvbnMiLCAidHJhbnNpdGlvbiIsICJkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzIiwgIl9jYWNoZWFibGUiLCAiZ2V0U2hhcmVkT3B0aW9ucyIsICJpbmNsdWRlT3B0aW9ucyIsICJzaGFyZWRPcHRpb25zIiwgIl9hbmltYXRpb25zRGlzYWJsZWQiLCAiX2dldFNoYXJlZE9wdGlvbnMiLCAiZmlyc3RPcHRzIiwgInByZXZpb3VzbHlTaGFyZWRPcHRpb25zIiwgInVwZGF0ZVNoYXJlZE9wdGlvbnMiLCAidXBkYXRlRWxlbWVudCIsICJfc2V0U3R5bGUiLCAicmVtb3ZlSG92ZXJTdHlsZSIsICJzZXRIb3ZlclN0eWxlIiwgIl9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSIsICJfc2V0RGF0YXNldEhvdmVyU3R5bGUiLCAiYXJnMSIsICJhcmcyIiwgIm51bU1ldGEiLCAibnVtRGF0YSIsICJfaW5zZXJ0RWxlbWVudHMiLCAiX3JlbW92ZUVsZW1lbnRzIiwgIm1vdmUiLCAiYXJyIiwgInVwZGF0ZUVsZW1lbnRzIiwgInJlbW92ZWQiLCAic3BsaWNlIiwgIl9zeW5jIiwgImFyZ3MiLCAiX2RhdGFDaGFuZ2VzIiwgIl9vbkRhdGFQdXNoIiwgImFyZ3VtZW50cyIsICJfb25EYXRhUG9wIiwgIl9vbkRhdGFTaGlmdCIsICJfb25EYXRhU3BsaWNlIiwgIm5ld0NvdW50IiwgIl9vbkRhdGFVbnNoaWZ0IiwgImdldEFsbFNjYWxlVmFsdWVzIiwgIl9jYWNoZSIsICIkYmFyIiwgInZpc2libGVNZXRhcyIsICJjb25jYXQiLCAiX2FycmF5VW5pcXVlIiwgInNvcnQiLCAiYSIsICJjb21wdXRlTWluU2FtcGxlU2l6ZSIsICJfbGVuZ3RoIiwgImN1cnIiLCAidXBkYXRlTWluQW5kUHJldiIsICJhYnMiLCAiZ2V0UGl4ZWxGb3JWYWx1ZSIsICJ0aWNrcyIsICJnZXRQaXhlbEZvclRpY2siLCAiY29tcHV0ZUZpdENhdGVnb3J5VHJhaXRzIiwgInJ1bGVyIiwgInN0YWNrQ291bnQiLCAidGhpY2tuZXNzIiwgImJhclRoaWNrbmVzcyIsICJyYXRpbyIsICJpc051bGxPclVuZGVmIiwgImNhdGVnb3J5UGVyY2VudGFnZSIsICJiYXJQZXJjZW50YWdlIiwgImNodW5rIiwgInBpeGVscyIsICJjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzIiwgIm5leHQiLCAicGVyY2VudCIsICJwYXJzZUZsb2F0QmFyIiwgImVudHJ5IiwgInN0YXJ0VmFsdWUiLCAiZW5kVmFsdWUiLCAiYmFyU3RhcnQiLCAiYmFyRW5kIiwgIl9jdXN0b20iLCAicGFyc2VWYWx1ZSIsICJwYXJzZUFycmF5T3JQcmltaXRpdmUiLCAiaXNGbG9hdEJhciIsICJjdXN0b20iLCAiYmFyU2lnbiIsICJhY3R1YWxCYXNlIiwgImlzSG9yaXpvbnRhbCIsICJib3JkZXJQcm9wcyIsICJob3Jpem9udGFsIiwgImJhc2UiLCAic2V0Qm9yZGVyU2tpcHBlZCIsICJlZGdlIiwgImJvcmRlclNraXBwZWQiLCAiZW5hYmxlQm9yZGVyUmFkaXVzIiwgInBhcnNlRWRnZSIsICJzd2FwIiwgInN0YXJ0RW5kIiwgIm9yaWciLCAidjEiLCAidjIiLCAidiIsICJzZXRJbmZsYXRlQW1vdW50IiwgImluZmxhdGVBbW91bnQiLCAiQmFyQ29udHJvbGxlciIsICJpQXhpc0tleSIsICJ2QXhpc0tleSIsICJvYmoiLCAiYmFycyIsICJnZXRCYXNlUGl4ZWwiLCAiX2dldFJ1bGVyIiwgInZwaXhlbHMiLCAiaGVhZCIsICJfY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMiLCAiaXBpeGVscyIsICJfY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMiLCAiY2VudGVyIiwgImhlaWdodCIsICJ3aWR0aCIsICJfZ2V0U3RhY2tzIiwgImxhc3QiLCAiZ3JvdXBlZCIsICJza2lwTnVsbCIsICJ2YWwiLCAiaXNOYU4iLCAiaW5kZXhPZiIsICJfZ2V0U3RhY2tDb3VudCIsICJfZ2V0U3RhY2tJbmRleCIsICJuYW1lIiwgIl9zdGFydFBpeGVsIiwgIl9lbmRQaXhlbCIsICJiYXNlVmFsdWUiLCAibWluQmFyTGVuZ3RoIiwgImZsb2F0aW5nIiwgImdldERhdGFWaXNpYmlsaXR5IiwgInN0YXJ0UGl4ZWwiLCAiZ2V0UGl4ZWxGb3JEZWNpbWFsIiwgImVuZFBpeGVsIiwgImdldFZhbHVlRm9yUGl4ZWwiLCAiaGFsZkdyaWQiLCAiZ2V0TGluZVdpZHRoRm9yVmFsdWUiLCAibWF4QmFyVGhpY2tuZXNzIiwgIkluZmluaXR5IiwgInN0YWNrSW5kZXgiLCAicmVjdHMiLCAibnVtYmVycyIsICJvdmVycmlkZXMiLCAiX2luZGV4XyIsICJvZmZzZXQiLCAiZ3JpZCIsICJfdmFsdWVfIiwgImJlZ2luQXRaZXJvIiwgImdldFJhdGlvQW5kT2Zmc2V0IiwgInJvdGF0aW9uIiwgImNpcmN1bWZlcmVuY2UiLCAiY3V0b3V0IiwgInJhdGlvWCIsICJyYXRpb1kiLCAib2Zmc2V0WCIsICJvZmZzZXRZIiwgIlRBVSIsICJzdGFydEFuZ2xlIiwgImVuZEFuZ2xlIiwgInN0YXJ0WCIsICJNYXRoIiwgImNvcyIsICJzdGFydFkiLCAic2luIiwgImVuZFgiLCAiZW5kWSIsICJjYWxjTWF4IiwgImFuZ2xlIiwgImEiLCAiYiIsICJfYW5nbGVCZXR3ZWVuIiwgIm1heCIsICJjYWxjTWluIiwgIm1pbiIsICJtYXhYIiwgIm1heFkiLCAiSEFMRl9QSSIsICJtaW5YIiwgIlBJIiwgIm1pblkiLCAiRG91Z2hudXRDb250cm9sbGVyIiwgIkRhdGFzZXRDb250cm9sbGVyIiwgImNvbnN0cnVjdG9yIiwgImNoYXJ0IiwgImRhdGFzZXRJbmRleCIsICJlbmFibGVPcHRpb25TaGFyaW5nIiwgImlubmVyUmFkaXVzIiwgInVuZGVmaW5lZCIsICJvdXRlclJhZGl1cyIsICJsaW5rU2NhbGVzIiwgInBhcnNlIiwgInN0YXJ0IiwgImNvdW50IiwgImRhdGEiLCAiZ2V0RGF0YXNldCIsICJtZXRhIiwgIl9jYWNoZWRNZXRhIiwgIl9wYXJzaW5nIiwgIl9wYXJzZWQiLCAiZ2V0dGVyIiwgImkiLCAiaXNPYmplY3QiLCAia2V5IiwgInJlc29sdmVPYmplY3RLZXkiLCAiaWxlbiIsICJfZ2V0Um90YXRpb24iLCAidG9SYWRpYW5zIiwgIm9wdGlvbnMiLCAiX2dldENpcmN1bWZlcmVuY2UiLCAiX2dldFJvdGF0aW9uRXh0ZW50cyIsICJkYXRhc2V0cyIsICJsZW5ndGgiLCAiaXNEYXRhc2V0VmlzaWJsZSIsICJnZXREYXRhc2V0TWV0YSIsICJ0eXBlIiwgIl90eXBlIiwgImNvbnRyb2xsZXIiLCAidXBkYXRlIiwgIm1vZGUiLCAiY2hhcnRBcmVhIiwgImFyY3MiLCAic3BhY2luZyIsICJnZXRNYXhCb3JkZXJXaWR0aCIsICJnZXRNYXhPZmZzZXQiLCAibWF4U2l6ZSIsICJ3aWR0aCIsICJoZWlnaHQiLCAidG9QZXJjZW50YWdlIiwgImNoYXJ0V2VpZ2h0IiwgIl9nZXRSaW5nV2VpZ2h0IiwgImluZGV4IiwgIm1heFdpZHRoIiwgIm1heEhlaWdodCIsICJtYXhSYWRpdXMiLCAidG9EaW1lbnNpb24iLCAicmFkaXVzIiwgInJhZGl1c0xlbmd0aCIsICJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsICJ0b3RhbCIsICJjYWxjdWxhdGVUb3RhbCIsICJfZ2V0UmluZ1dlaWdodE9mZnNldCIsICJ1cGRhdGVFbGVtZW50cyIsICJfY2lyY3VtZmVyZW5jZSIsICJyZXNldCIsICJvcHRzIiwgImFuaW1hdGlvbiIsICJhbmltYXRlUm90YXRlIiwgImdldERhdGFWaXNpYmlsaXR5IiwgImhpZGRlbiIsICJjYWxjdWxhdGVDaXJjdW1mZXJlbmNlIiwgImFuaW1hdGlvbk9wdHMiLCAiY2VudGVyWCIsICJsZWZ0IiwgInJpZ2h0IiwgImNlbnRlclkiLCAidG9wIiwgImJvdHRvbSIsICJhbmltYXRlU2NhbGUiLCAic2hhcmVkT3B0aW9ucyIsICJpbmNsdWRlT3B0aW9ucyIsICJfZ2V0U2hhcmVkT3B0aW9ucyIsICJhcmMiLCAicHJvcGVydGllcyIsICJ4IiwgInkiLCAicmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyIsICJhY3RpdmUiLCAidXBkYXRlRWxlbWVudCIsICJtZXRhRGF0YSIsICJ2YWx1ZSIsICJpc05hTiIsICJhYnMiLCAiZ2V0TGFiZWxBbmRWYWx1ZSIsICJsYWJlbHMiLCAiZm9ybWF0TnVtYmVyIiwgImxvY2FsZSIsICJsYWJlbCIsICJib3JkZXJBbGlnbiIsICJib3JkZXJXaWR0aCIsICJob3ZlckJvcmRlcldpZHRoIiwgIm9mZnNldCIsICJob3Zlck9mZnNldCIsICJyaW5nV2VpZ2h0T2Zmc2V0IiwgInZhbHVlT3JEZWZhdWx0IiwgIndlaWdodCIsICJpZCIsICJkZWZhdWx0cyIsICJkYXRhc2V0RWxlbWVudFR5cGUiLCAiZGF0YUVsZW1lbnRUeXBlIiwgImFuaW1hdGlvbnMiLCAibnVtYmVycyIsICJpbmRleEF4aXMiLCAiZGVzY3JpcHRvcnMiLCAiX3NjcmlwdGFibGUiLCAibmFtZSIsICJfaW5kZXhhYmxlIiwgIm92ZXJyaWRlcyIsICJhc3BlY3RSYXRpbyIsICJwbHVnaW5zIiwgImxlZ2VuZCIsICJnZW5lcmF0ZUxhYmVscyIsICJwb2ludFN0eWxlIiwgImNvbG9yIiwgIm1hcCIsICJzdHlsZSIsICJnZXRTdHlsZSIsICJ0ZXh0IiwgImZpbGxTdHlsZSIsICJiYWNrZ3JvdW5kQ29sb3IiLCAic3Ryb2tlU3R5bGUiLCAiYm9yZGVyQ29sb3IiLCAiZm9udENvbG9yIiwgImxpbmVXaWR0aCIsICJvbkNsaWNrIiwgImUiLCAibGVnZW5kSXRlbSIsICJ0b2dnbGVEYXRhVmlzaWJpbGl0eSIsICJQaWVDb250cm9sbGVyIiwgIkRvdWdobnV0Q29udHJvbGxlciIsICJpZCIsICJkZWZhdWx0cyIsICJjdXRvdXQiLCAicm90YXRpb24iLCAiY2lyY3VtZmVyZW5jZSIsICJyYWRpdXMiLCAiYWJzdHJhY3QiLCAiRXJyb3IiLCAiRGF0ZUFkYXB0ZXJCYXNlIiwgIm92ZXJyaWRlIiwgIm1lbWJlcnMiLCAiT2JqZWN0IiwgImFzc2lnbiIsICJwcm90b3R5cGUiLCAiY29uc3RydWN0b3IiLCAib3B0aW9ucyIsICJpbml0IiwgImZvcm1hdHMiLCAicGFyc2UiLCAiZm9ybWF0IiwgImFkZCIsICJkaWZmIiwgInN0YXJ0T2YiLCAiZW5kT2YiLCAiX2RhdGUiLCAiYmluYXJ5U2VhcmNoIiwgIm1ldGFzZXQiLCAiYXhpcyIsICJ2YWx1ZSIsICJpbnRlcnNlY3QiLCAiY29udHJvbGxlciIsICJkYXRhIiwgIl9zb3J0ZWQiLCAiaVNjYWxlIiwgIl9jYWNoZWRNZXRhIiwgImxlbmd0aCIsICJsb29rdXBNZXRob2QiLCAiX3JldmVyc2VQaXhlbHMiLCAiX3Jsb29rdXBCeUtleSIsICJfbG9va3VwQnlLZXkiLCAiX3NoYXJlZE9wdGlvbnMiLCAiZWwiLCAicmFuZ2UiLCAiZ2V0UmFuZ2UiLCAic3RhcnQiLCAiZW5kIiwgImxvIiwgImhpIiwgImV2YWx1YXRlSW50ZXJhY3Rpb25JdGVtcyIsICJjaGFydCIsICJwb3NpdGlvbiIsICJoYW5kbGVyIiwgIm1ldGFzZXRzIiwgImdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMiLCAiaSIsICJpbGVuIiwgImluZGV4IiwgImoiLCAiZWxlbWVudCIsICJza2lwIiwgImdldERpc3RhbmNlTWV0cmljRm9yQXhpcyIsICJ1c2VYIiwgImluZGV4T2YiLCAidXNlWSIsICJwdDEiLCAicHQyIiwgImRlbHRhWCIsICJNYXRoIiwgImFicyIsICJ4IiwgImRlbHRhWSIsICJ5IiwgInNxcnQiLCAicG93IiwgImdldEludGVyc2VjdEl0ZW1zIiwgInVzZUZpbmFsUG9zaXRpb24iLCAiaW5jbHVkZUludmlzaWJsZSIsICJpdGVtcyIsICJpc1BvaW50SW5BcmVhIiwgImV2YWx1YXRpb25GdW5jIiwgImRhdGFzZXRJbmRleCIsICJfaXNQb2ludEluQXJlYSIsICJjaGFydEFyZWEiLCAiaW5SYW5nZSIsICJwdXNoIiwgImdldE5lYXJlc3RSYWRpYWxJdGVtcyIsICJzdGFydEFuZ2xlIiwgImVuZEFuZ2xlIiwgImdldFByb3BzIiwgImFuZ2xlIiwgImdldEFuZ2xlRnJvbVBvaW50IiwgIl9hbmdsZUJldHdlZW4iLCAiZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zIiwgImRpc3RhbmNlTWV0cmljIiwgIm1pbkRpc3RhbmNlIiwgIk51bWJlciIsICJQT1NJVElWRV9JTkZJTklUWSIsICJjZW50ZXIiLCAiZ2V0Q2VudGVyUG9pbnQiLCAicG9pbnRJbkFyZWEiLCAiZGlzdGFuY2UiLCAiZ2V0TmVhcmVzdEl0ZW1zIiwgImdldEF4aXNJdGVtcyIsICJyYW5nZU1ldGhvZCIsICJpbnRlcnNlY3RzSXRlbSIsICJtb2RlcyIsICJlIiwgImdldFJlbGF0aXZlUG9zaXRpb24iLCAiZWxlbWVudHMiLCAiZm9yRWFjaCIsICJtZXRhIiwgImRhdGFzZXQiLCAiZ2V0RGF0YXNldE1ldGEiLCAicG9pbnQiLCAibmVhcmVzdCIsICJTVEFUSUNfUE9TSVRJT05TIiwgImZpbHRlckJ5UG9zaXRpb24iLCAiYXJyYXkiLCAiZmlsdGVyIiwgInYiLCAicG9zIiwgImZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyIsICJib3giLCAic29ydEJ5V2VpZ2h0IiwgInJldmVyc2UiLCAic29ydCIsICJhIiwgImIiLCAidjAiLCAidjEiLCAid2VpZ2h0IiwgIndyYXBCb3hlcyIsICJib3hlcyIsICJsYXlvdXRCb3hlcyIsICJzdGFjayIsICJzdGFja1dlaWdodCIsICJob3Jpem9udGFsIiwgImlzSG9yaXpvbnRhbCIsICJidWlsZFN0YWNrcyIsICJsYXlvdXRzIiwgInN0YWNrcyIsICJ3cmFwIiwgImluY2x1ZGVzIiwgIl9zdGFjayIsICJjb3VudCIsICJwbGFjZWQiLCAic2l6ZSIsICJzZXRMYXlvdXREaW1zIiwgInBhcmFtcyIsICJ2Qm94TWF4V2lkdGgiLCAiaEJveE1heEhlaWdodCIsICJsYXlvdXQiLCAiZnVsbFNpemUiLCAiZmFjdG9yIiwgIndpZHRoIiwgImF2YWlsYWJsZVdpZHRoIiwgImhlaWdodCIsICJhdmFpbGFibGVIZWlnaHQiLCAiYnVpbGRMYXlvdXRCb3hlcyIsICJsZWZ0IiwgInJpZ2h0IiwgInRvcCIsICJib3R0b20iLCAiY2VudGVySG9yaXpvbnRhbCIsICJjZW50ZXJWZXJ0aWNhbCIsICJsZWZ0QW5kVG9wIiwgImNvbmNhdCIsICJyaWdodEFuZEJvdHRvbSIsICJ2ZXJ0aWNhbCIsICJnZXRDb21iaW5lZE1heCIsICJtYXhQYWRkaW5nIiwgIm1heCIsICJ1cGRhdGVNYXhQYWRkaW5nIiwgImJveFBhZGRpbmciLCAidXBkYXRlRGltcyIsICJpc09iamVjdCIsICJnZXRQYWRkaW5nIiwgIm5ld1dpZHRoIiwgIm91dGVyV2lkdGgiLCAibmV3SGVpZ2h0IiwgIm91dGVySGVpZ2h0IiwgIndpZHRoQ2hhbmdlZCIsICJ3IiwgImhlaWdodENoYW5nZWQiLCAiaCIsICJzYW1lIiwgIm90aGVyIiwgImhhbmRsZU1heFBhZGRpbmciLCAidXBkYXRlUG9zIiwgImNoYW5nZSIsICJnZXRNYXJnaW5zIiwgIm1hcmdpbkZvclBvc2l0aW9ucyIsICJwb3NpdGlvbnMiLCAibWFyZ2luIiwgImZpdEJveGVzIiwgInJlZml0Qm94ZXMiLCAicmVmaXQiLCAiY2hhbmdlZCIsICJ1cGRhdGUiLCAic2V0Qm94RGltcyIsICJwbGFjZUJveGVzIiwgInVzZXJQYWRkaW5nIiwgInBhZGRpbmciLCAiZGVmaW5lZCIsICJhZGRCb3giLCAiaXRlbSIsICJfbGF5ZXJzIiwgInoiLCAiZHJhdyIsICJyZW1vdmVCb3giLCAibGF5b3V0SXRlbSIsICJzcGxpY2UiLCAiY29uZmlndXJlIiwgIm1pblBhZGRpbmciLCAidG9QYWRkaW5nIiwgInZlcnRpY2FsQm94ZXMiLCAiaG9yaXpvbnRhbEJveGVzIiwgImVhY2giLCAiYmVmb3JlTGF5b3V0IiwgInZpc2libGVWZXJ0aWNhbEJveENvdW50IiwgInJlZHVjZSIsICJ0b3RhbCIsICJkaXNwbGF5IiwgImZyZWV6ZSIsICJCYXNlUGxhdGZvcm0iLCAiYWNxdWlyZUNvbnRleHQiLCAiY2FudmFzIiwgImFzcGVjdFJhdGlvIiwgInJlbGVhc2VDb250ZXh0IiwgImNvbnRleHQiLCAiYWRkRXZlbnRMaXN0ZW5lciIsICJ0eXBlIiwgImxpc3RlbmVyIiwgInJlbW92ZUV2ZW50TGlzdGVuZXIiLCAiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsICJnZXRNYXhpbXVtU2l6ZSIsICJmbG9vciIsICJpc0F0dGFjaGVkIiwgInVwZGF0ZUNvbmZpZyIsICJjb25maWciLCAiQmFzaWNQbGF0Zm9ybSIsICJnZXRDb250ZXh0IiwgImFuaW1hdGlvbiIsICJFWFBBTkRPX0tFWSIsICJFVkVOVF9UWVBFUyIsICJ0b3VjaHN0YXJ0IiwgInRvdWNobW92ZSIsICJ0b3VjaGVuZCIsICJwb2ludGVyZW50ZXIiLCAicG9pbnRlcmRvd24iLCAicG9pbnRlcm1vdmUiLCAicG9pbnRlcnVwIiwgInBvaW50ZXJsZWF2ZSIsICJwb2ludGVyb3V0IiwgImlzTnVsbE9yRW1wdHkiLCAiaW5pdENhbnZhcyIsICJzdHlsZSIsICJyZW5kZXJIZWlnaHQiLCAiZ2V0QXR0cmlidXRlIiwgInJlbmRlcldpZHRoIiwgImluaXRpYWwiLCAiYm94U2l6aW5nIiwgImRpc3BsYXlXaWR0aCIsICJyZWFkVXNlZFNpemUiLCAidW5kZWZpbmVkIiwgImRpc3BsYXlIZWlnaHQiLCAiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCAic3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyIsICJwYXNzaXZlIiwgImFkZExpc3RlbmVyIiwgIm5vZGUiLCAicmVtb3ZlTGlzdGVuZXIiLCAiZnJvbU5hdGl2ZUV2ZW50IiwgImV2ZW50IiwgIm5hdGl2ZSIsICJub2RlTGlzdENvbnRhaW5zIiwgIm5vZGVMaXN0IiwgImNvbnRhaW5zIiwgImNyZWF0ZUF0dGFjaE9ic2VydmVyIiwgIm9ic2VydmVyIiwgIk11dGF0aW9uT2JzZXJ2ZXIiLCAiZW50cmllcyIsICJ0cmlnZ2VyIiwgImVudHJ5IiwgImFkZGVkTm9kZXMiLCAicmVtb3ZlZE5vZGVzIiwgIm9ic2VydmUiLCAiZG9jdW1lbnQiLCAiY2hpbGRMaXN0IiwgInN1YnRyZWUiLCAiY3JlYXRlRGV0YWNoT2JzZXJ2ZXIiLCAiZHJwTGlzdGVuaW5nQ2hhcnRzIiwgIk1hcCIsICJvbGREZXZpY2VQaXhlbFJhdGlvIiwgIm9uV2luZG93UmVzaXplIiwgImRwciIsICJ3aW5kb3ciLCAiZGV2aWNlUGl4ZWxSYXRpbyIsICJyZXNpemUiLCAiY3VycmVudERldmljZVBpeGVsUmF0aW8iLCAibGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCAic2V0IiwgInVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCAiZGVsZXRlIiwgImNyZWF0ZVJlc2l6ZU9ic2VydmVyIiwgImNvbnRhaW5lciIsICJfZ2V0UGFyZW50Tm9kZSIsICJ0aHJvdHRsZWQiLCAiY2xpZW50V2lkdGgiLCAiUmVzaXplT2JzZXJ2ZXIiLCAiY29udGVudFJlY3QiLCAicmVsZWFzZU9ic2VydmVyIiwgImRpc2Nvbm5lY3QiLCAiY3JlYXRlUHJveHlBbmRMaXN0ZW4iLCAicHJveHkiLCAiY3R4IiwgIkRvbVBsYXRmb3JtIiwgInByb3AiLCAiaXNOdWxsT3JVbmRlZiIsICJyZW1vdmVBdHRyaWJ1dGUiLCAic2V0QXR0cmlidXRlIiwgImtleXMiLCAia2V5IiwgInByb3hpZXMiLCAiJHByb3hpZXMiLCAiaGFuZGxlcnMiLCAiYXR0YWNoIiwgImRldGFjaCIsICJpc0Nvbm5lY3RlZCIsICJfZGV0ZWN0UGxhdGZvcm0iLCAiX2lzRG9tU3VwcG9ydGVkIiwgIk9mZnNjcmVlbkNhbnZhcyIsICJFbGVtZW50IiwgImFjdGl2ZSIsICJ0b29sdGlwUG9zaXRpb24iLCAiaGFzVmFsdWUiLCAiaXNOdW1iZXIiLCAicHJvcHMiLCAiZmluYWwiLCAiYW5pbXMiLCAiJGFuaW1hdGlvbnMiLCAicmV0IiwgIl90byIsICJkZWZhdWx0cyIsICJkZWZhdWx0Um91dGVzIiwgImF1dG9Ta2lwIiwgInNjYWxlIiwgInRpY2tzIiwgInRpY2tPcHRzIiwgImRldGVybWluZWRNYXhUaWNrcyIsICJkZXRlcm1pbmVNYXhUaWNrcyIsICJ0aWNrc0xpbWl0IiwgIm1pbiIsICJtYXhUaWNrc0xpbWl0IiwgIm1ham9ySW5kaWNlcyIsICJtYWpvciIsICJlbmFibGVkIiwgImdldE1ham9ySW5kaWNlcyIsICJudW1NYWpvckluZGljZXMiLCAiZmlyc3QiLCAibGFzdCIsICJuZXdUaWNrcyIsICJza2lwTWFqb3JzIiwgInNwYWNpbmciLCAiY2FsY3VsYXRlU3BhY2luZyIsICJhdmdNYWpvclNwYWNpbmciLCAicm91bmQiLCAib2Zmc2V0IiwgInRpY2tMZW5ndGgiLCAiX3RpY2tTaXplIiwgIm1heFNjYWxlIiwgIl9sZW5ndGgiLCAibWF4Q2hhcnQiLCAiX21heExlbmd0aCIsICJldmVuTWFqb3JTcGFjaW5nIiwgImdldEV2ZW5TcGFjaW5nIiwgImZhY3RvcnMiLCAiX2ZhY3Rvcml6ZSIsICJyZXN1bHQiLCAibmV4dCIsICJjZWlsIiwgIm1ham9yU3RhcnQiLCAibWFqb3JFbmQiLCAidmFsdWVPckRlZmF1bHQiLCAiYXJyIiwgImxlbiIsICJyZXZlcnNlQWxpZ24iLCAiYWxpZ24iLCAib2Zmc2V0RnJvbUVkZ2UiLCAiZWRnZSIsICJzYW1wbGUiLCAibnVtSXRlbXMiLCAiaW5jcmVtZW50IiwgImdldFBpeGVsRm9yR3JpZExpbmUiLCAib2Zmc2V0R3JpZExpbmVzIiwgInZhbGlkSW5kZXgiLCAiX3N0YXJ0UGl4ZWwiLCAiX2VuZFBpeGVsIiwgImVwc2lsb24iLCAibGluZVZhbHVlIiwgImdldFBpeGVsRm9yVGljayIsICJnYXJiYWdlQ29sbGVjdCIsICJjYWNoZXMiLCAiY2FjaGUiLCAiZ2MiLCAiZ2NMZW4iLCAiZ2V0VGlja01hcmtMZW5ndGgiLCAiZHJhd1RpY2tzIiwgImdldFRpdGxlSGVpZ2h0IiwgImZhbGxiYWNrIiwgImZvbnQiLCAidG9Gb250IiwgImxpbmVzIiwgImlzQXJyYXkiLCAidGV4dCIsICJsaW5lSGVpZ2h0IiwgImNyZWF0ZVNjYWxlQ29udGV4dCIsICJwYXJlbnQiLCAiY3JlYXRlQ29udGV4dCIsICJjcmVhdGVUaWNrQ29udGV4dCIsICJ0aWNrIiwgInRpdGxlQWxpZ24iLCAiX3RvTGVmdFJpZ2h0Q2VudGVyIiwgInRpdGxlQXJncyIsICJzY2FsZXMiLCAicm90YXRpb24iLCAibWF4V2lkdGgiLCAidGl0bGVYIiwgInRpdGxlWSIsICJfYWxpZ25TdGFydEVuZCIsICJwb3NpdGlvbkF4aXNJRCIsICJnZXRQaXhlbEZvclZhbHVlIiwgIkhBTEZfUEkiLCAiU2NhbGUiLCAiY2ZnIiwgImlkIiwgIl9tYXJnaW5zIiwgIm1heEhlaWdodCIsICJwYWRkaW5nVG9wIiwgInBhZGRpbmdCb3R0b20iLCAicGFkZGluZ0xlZnQiLCAicGFkZGluZ1JpZ2h0IiwgImxhYmVsUm90YXRpb24iLCAiX3JhbmdlIiwgIl9ncmlkTGluZUl0ZW1zIiwgIl9sYWJlbEl0ZW1zIiwgIl9sYWJlbFNpemVzIiwgIl9sb25nZXN0VGV4dENhY2hlIiwgIl91c2VyTWF4IiwgIl91c2VyTWluIiwgIl9zdWdnZXN0ZWRNYXgiLCAiX3N1Z2dlc3RlZE1pbiIsICJfdGlja3NMZW5ndGgiLCAiX2JvcmRlclZhbHVlIiwgIl9jYWNoZSIsICJfZGF0YUxpbWl0c0NhY2hlZCIsICIkY29udGV4dCIsICJzZXRDb250ZXh0IiwgInN1Z2dlc3RlZE1pbiIsICJzdWdnZXN0ZWRNYXgiLCAicmF3IiwgImdldFVzZXJCb3VuZHMiLCAiZmluaXRlT3JEZWZhdWx0IiwgIk5FR0FUSVZFX0lORklOSVRZIiwgIm1pbkRlZmluZWQiLCAiaXNGaW5pdGUiLCAibWF4RGVmaW5lZCIsICJnZXRNaW5NYXgiLCAiY2FuU3RhY2siLCAibWV0YXMiLCAiZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMiLCAiZ2V0VGlja3MiLCAiZ2V0TGFiZWxzIiwgImxhYmVscyIsICJ4TGFiZWxzIiwgInlMYWJlbHMiLCAiZ2V0TGFiZWxJdGVtcyIsICJfY29tcHV0ZUxhYmVsSXRlbXMiLCAiYmVmb3JlVXBkYXRlIiwgImNhbGwiLCAibWFyZ2lucyIsICJiZWdpbkF0WmVybyIsICJncmFjZSIsICJzYW1wbGVTaXplIiwgImJlZm9yZVNldERpbWVuc2lvbnMiLCAic2V0RGltZW5zaW9ucyIsICJhZnRlclNldERpbWVuc2lvbnMiLCAiYmVmb3JlRGF0YUxpbWl0cyIsICJkZXRlcm1pbmVEYXRhTGltaXRzIiwgImFmdGVyRGF0YUxpbWl0cyIsICJfYWRkR3JhY2UiLCAiYmVmb3JlQnVpbGRUaWNrcyIsICJidWlsZFRpY2tzIiwgImFmdGVyQnVpbGRUaWNrcyIsICJzYW1wbGluZ0VuYWJsZWQiLCAiX2NvbnZlcnRUaWNrc1RvTGFiZWxzIiwgImJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24iLCAiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsICJhZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24iLCAic291cmNlIiwgImFmdGVyQXV0b1NraXAiLCAiYmVmb3JlRml0IiwgImZpdCIsICJhZnRlckZpdCIsICJhZnRlclVwZGF0ZSIsICJyZXZlcnNlUGl4ZWxzIiwgInN0YXJ0UGl4ZWwiLCAiZW5kUGl4ZWwiLCAiX2FsaWduVG9QaXhlbHMiLCAiYWxpZ25Ub1BpeGVscyIsICJfY2FsbEhvb2tzIiwgIm5hbWUiLCAibm90aWZ5UGx1Z2lucyIsICJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCAiZ2VuZXJhdGVUaWNrTGFiZWxzIiwgImxhYmVsIiwgImNhbGxiYWNrIiwgImFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uIiwgIm51bVRpY2tzIiwgIm1pblJvdGF0aW9uIiwgIm1heFJvdGF0aW9uIiwgInRpY2tXaWR0aCIsICJtYXhMYWJlbERpYWdvbmFsIiwgIl9pc1Zpc2libGUiLCAibGFiZWxTaXplcyIsICJfZ2V0TGFiZWxTaXplcyIsICJtYXhMYWJlbFdpZHRoIiwgIndpZGVzdCIsICJtYXhMYWJlbEhlaWdodCIsICJoaWdoZXN0IiwgIl9saW1pdFZhbHVlIiwgImdyaWQiLCAidGl0bGUiLCAidG9EZWdyZWVzIiwgImFzaW4iLCAibWluU2l6ZSIsICJ0aXRsZU9wdHMiLCAiZ3JpZE9wdHMiLCAidGl0bGVIZWlnaHQiLCAidGlja1BhZGRpbmciLCAiYW5nbGVSYWRpYW5zIiwgInRvUmFkaWFucyIsICJjb3MiLCAic2luIiwgImxhYmVsSGVpZ2h0IiwgIm1pcnJvciIsICJsYWJlbFdpZHRoIiwgIl9jYWxjdWxhdGVQYWRkaW5nIiwgIl9oYW5kbGVNYXJnaW5zIiwgImlzUm90YXRlZCIsICJsYWJlbHNCZWxvd1RpY2tzIiwgIm9mZnNldExlZnQiLCAib2Zmc2V0UmlnaHQiLCAiaXNGdWxsU2l6ZSIsICJfY29tcHV0ZUxhYmVsU2l6ZXMiLCAid2lkdGhzIiwgImhlaWdodHMiLCAid2lkZXN0TGFiZWxTaXplIiwgImhpZ2hlc3RMYWJlbFNpemUiLCAiamxlbiIsICJ0aWNrRm9udCIsICJmb250U3RyaW5nIiwgIm5lc3RlZExhYmVsIiwgIl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zIiwgInN0cmluZyIsICJfbWVhc3VyZVRleHQiLCAidmFsdWVBdCIsICJpZHgiLCAiZ2V0TGFiZWxGb3JWYWx1ZSIsICJOYU4iLCAiZ2V0VmFsdWVGb3JQaXhlbCIsICJwaXhlbCIsICJnZXRQaXhlbEZvckRlY2ltYWwiLCAiZGVjaW1hbCIsICJfaW50MTZSYW5nZSIsICJfYWxpZ25QaXhlbCIsICJnZXREZWNpbWFsRm9yUGl4ZWwiLCAiZ2V0QmFzZVBpeGVsIiwgImdldEJhc2VWYWx1ZSIsICJvcHRpb25UaWNrcyIsICJyb3QiLCAiYXV0b1NraXBQYWRkaW5nIiwgIl9jb21wdXRlR3JpZExpbmVJdGVtcyIsICJib3JkZXIiLCAidGlja3NMZW5ndGgiLCAidGwiLCAiYm9yZGVyT3B0cyIsICJheGlzV2lkdGgiLCAiYXhpc0hhbGZXaWR0aCIsICJhbGlnbkJvcmRlclZhbHVlIiwgImJvcmRlclZhbHVlIiwgImFsaWduZWRMaW5lVmFsdWUiLCAidHgxIiwgInR5MSIsICJ0eDIiLCAidHkyIiwgIngxIiwgInkxIiwgIngyIiwgInkyIiwgImxpbWl0IiwgInN0ZXAiLCAib3B0c0F0SW5kZXgiLCAib3B0c0F0SW5kZXhCb3JkZXIiLCAibGluZVdpZHRoIiwgImxpbmVDb2xvciIsICJjb2xvciIsICJib3JkZXJEYXNoIiwgImRhc2giLCAiYm9yZGVyRGFzaE9mZnNldCIsICJkYXNoT2Zmc2V0IiwgInRpY2tDb2xvciIsICJ0aWNrQm9yZGVyRGFzaCIsICJ0aWNrQm9yZGVyRGFzaE9mZnNldCIsICJjcm9zc0FsaWduIiwgInRpY2tBbmRQYWRkaW5nIiwgImhUaWNrQW5kUGFkZGluZyIsICJ0ZXh0QWxpZ24iLCAibGluZUNvdW50IiwgInRleHRPZmZzZXQiLCAidGV4dEJhc2VsaW5lIiwgIl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50IiwgIl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50IiwgImxhYmVsT2Zmc2V0IiwgImhhbGZDb3VudCIsICJzdHJva2VDb2xvciIsICJ0ZXh0U3Ryb2tlQ29sb3IiLCAic3Ryb2tlV2lkdGgiLCAidGV4dFN0cm9rZVdpZHRoIiwgInRpY2tUZXh0QWxpZ24iLCAic2hvd0xhYmVsQmFja2Ryb3AiLCAiYmFja2Ryb3AiLCAibGFiZWxQYWRkaW5nIiwgImJhY2tkcm9wUGFkZGluZyIsICJiYWNrZHJvcENvbG9yIiwgInRyYW5zbGF0aW9uIiwgIl9jb21wdXRlTGFiZWxBcmVhIiwgImRyYXdCYWNrZ3JvdW5kIiwgImJhY2tncm91bmRDb2xvciIsICJzYXZlIiwgImZpbGxTdHlsZSIsICJmaWxsUmVjdCIsICJyZXN0b3JlIiwgImdldExpbmVXaWR0aEZvclZhbHVlIiwgImZpbmRJbmRleCIsICJ0IiwgIm9wdHMiLCAiZHJhd0dyaWQiLCAiZHJhd0xpbmUiLCAicDEiLCAicDIiLCAic3Ryb2tlU3R5bGUiLCAic2V0TGluZURhc2giLCAibGluZURhc2hPZmZzZXQiLCAiYmVnaW5QYXRoIiwgIm1vdmVUbyIsICJsaW5lVG8iLCAic3Ryb2tlIiwgImRyYXdPbkNoYXJ0QXJlYSIsICJkcmF3Qm9yZGVyIiwgImxhc3RMaW5lV2lkdGgiLCAiZHJhd0xhYmVscyIsICJhcmVhIiwgImNsaXBBcmVhIiwgInJlbmRlclRleHRPcHRpb25zIiwgInJlbmRlclRleHQiLCAidW5jbGlwQXJlYSIsICJkcmF3VGl0bGUiLCAidHoiLCAiZ3oiLCAiYnoiLCAiYXhpc0lEIiwgIl9tYXhEaWdpdHMiLCAiZm9udFNpemUiLCAiVHlwZWRSZWdpc3RyeSIsICJzY29wZSIsICJjcmVhdGUiLCAiaXNGb3JUeXBlIiwgImlzUHJvdG90eXBlT2YiLCAicmVnaXN0ZXIiLCAicHJvdG8iLCAiZ2V0UHJvdG90eXBlT2YiLCAicGFyZW50U2NvcGUiLCAiaXNJQ2hhcnRDb21wb25lbnQiLCAicmVnaXN0ZXJEZWZhdWx0cyIsICJvdmVycmlkZXMiLCAiZ2V0IiwgInVucmVnaXN0ZXIiLCAiaXRlbURlZmF1bHRzIiwgIm1lcmdlIiwgInJvdXRlRGVmYXVsdHMiLCAiZGVzY3JpcHRvcnMiLCAiZGVzY3JpYmUiLCAicm91dGVzIiwgInByb3BlcnR5IiwgInByb3BlcnR5UGFydHMiLCAic3BsaXQiLCAic291cmNlTmFtZSIsICJwb3AiLCAic291cmNlU2NvcGUiLCAiam9pbiIsICJwYXJ0cyIsICJ0YXJnZXROYW1lIiwgInRhcmdldFNjb3BlIiwgInJvdXRlIiwgIlJlZ2lzdHJ5IiwgImNvbnRyb2xsZXJzIiwgIkRhdGFzZXRDb250cm9sbGVyIiwgInBsdWdpbnMiLCAiX3R5cGVkUmVnaXN0cmllcyIsICJhcmdzIiwgIl9lYWNoIiwgInJlbW92ZSIsICJhZGRDb250cm9sbGVycyIsICJhZGRFbGVtZW50cyIsICJhZGRQbHVnaW5zIiwgImFkZFNjYWxlcyIsICJnZXRDb250cm9sbGVyIiwgIl9nZXQiLCAiZ2V0RWxlbWVudCIsICJnZXRQbHVnaW4iLCAiZ2V0U2NhbGUiLCAicmVtb3ZlQ29udHJvbGxlcnMiLCAicmVtb3ZlRWxlbWVudHMiLCAicmVtb3ZlUGx1Z2lucyIsICJyZW1vdmVTY2FsZXMiLCAibWV0aG9kIiwgInR5cGVkUmVnaXN0cnkiLCAiYXJnIiwgInJlZyIsICJfZ2V0UmVnaXN0cnlGb3JUeXBlIiwgIl9leGVjIiwgIml0ZW1SZWciLCAicmVnaXN0cnkiLCAiY29tcG9uZW50IiwgImNhbWVsTWV0aG9kIiwgIl9jYXBpdGFsaXplIiwgIlBsdWdpblNlcnZpY2UiLCAiX2luaXQiLCAibm90aWZ5IiwgImhvb2siLCAiX2NyZWF0ZURlc2NyaXB0b3JzIiwgIl9ub3RpZnkiLCAiX2Rlc2NyaXB0b3JzIiwgImRlc2NyaXB0b3IiLCAicGx1Z2luIiwgImNhbGxDYWxsYmFjayIsICJjYW5jZWxhYmxlIiwgImludmFsaWRhdGUiLCAiX29sZENhY2hlIiwgIl9ub3RpZnlTdGF0ZUNoYW5nZXMiLCAiYWxsIiwgImFsbFBsdWdpbnMiLCAiY3JlYXRlRGVzY3JpcHRvcnMiLCAicHJldmlvdXNEZXNjcmlwdG9ycyIsICJzb21lIiwgImxvY2FsSWRzIiwgImxvY2FsIiwgImdldE9wdHMiLCAicGx1Z2luT3B0cyIsICJwbHVnaW5TY29wZUtleXMiLCAic2NvcGVzIiwgImdldE9wdGlvblNjb3BlcyIsICJjcmVhdGVSZXNvbHZlciIsICJzY3JpcHRhYmxlIiwgImluZGV4YWJsZSIsICJhbGxLZXlzIiwgImdldEluZGV4QXhpcyIsICJkYXRhc2V0RGVmYXVsdHMiLCAiZGF0YXNldHMiLCAiZGF0YXNldE9wdGlvbnMiLCAiaW5kZXhBeGlzIiwgImdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQiLCAiZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyIsICJheGlzRnJvbVBvc2l0aW9uIiwgImRldGVybWluZUF4aXMiLCAic2NhbGVPcHRpb25zIiwgInRvTG93ZXJDYXNlIiwgIm1lcmdlU2NhbGVDb25maWciLCAiY2hhcnREZWZhdWx0cyIsICJjb25maWdTY2FsZXMiLCAiY2hhcnRJbmRleEF4aXMiLCAic2NhbGVDb25mIiwgImNvbnNvbGUiLCAiZXJyb3IiLCAiX3Byb3h5IiwgIndhcm4iLCAiZGVmYXVsdElkIiwgImRlZmF1bHRTY2FsZU9wdGlvbnMiLCAibWVyZ2VJZiIsICJkZWZhdWx0SUQiLCAiaW5pdE9wdGlvbnMiLCAiaW5pdERhdGEiLCAiaW5pdENvbmZpZyIsICJrZXlDYWNoZSIsICJrZXlzQ2FjaGVkIiwgIlNldCIsICJjYWNoZWRLZXlzIiwgImNhY2hlS2V5IiwgImdlbmVyYXRlIiwgImFkZElmRm91bmQiLCAib2JqIiwgInJlc29sdmVPYmplY3RLZXkiLCAiQ29uZmlnIiwgIl9jb25maWciLCAiX3Njb3BlQ2FjaGUiLCAiX3Jlc29sdmVyQ2FjaGUiLCAicGxhdGZvcm0iLCAiY2xlYXJDYWNoZSIsICJjbGVhciIsICJkYXRhc2V0U2NvcGVLZXlzIiwgImRhdGFzZXRUeXBlIiwgImRhdGFzZXRBbmltYXRpb25TY29wZUtleXMiLCAidHJhbnNpdGlvbiIsICJkYXRhc2V0RWxlbWVudFNjb3BlS2V5cyIsICJlbGVtZW50VHlwZSIsICJhZGRpdGlvbmFsT3B0aW9uU2NvcGVzIiwgIl9jYWNoZWRTY29wZXMiLCAibWFpblNjb3BlIiwgInJlc2V0Q2FjaGUiLCAia2V5TGlzdHMiLCAiY2FjaGVkIiwgIkFycmF5IiwgImZyb20iLCAiaGFzIiwgImNoYXJ0T3B0aW9uU2NvcGVzIiwgInJlc29sdmVOYW1lZE9wdGlvbnMiLCAibmFtZXMiLCAicHJlZml4ZXMiLCAiJHNoYXJlZCIsICJyZXNvbHZlciIsICJzdWJQcmVmaXhlcyIsICJnZXRSZXNvbHZlciIsICJuZWVkQ29udGV4dCIsICJpc0Z1bmN0aW9uIiwgInN1YlJlc29sdmVyIiwgIl9hdHRhY2hDb250ZXh0IiwgImRlc2NyaXB0b3JEZWZhdWx0cyIsICJyZXNvbHZlckNhY2hlIiwgIl9jcmVhdGVSZXNvbHZlciIsICJwIiwgImhhc0Z1bmN0aW9uIiwgImdldE93blByb3BlcnR5TmFtZXMiLCAiYWNjIiwgImlzU2NyaXB0YWJsZSIsICJpc0luZGV4YWJsZSIsICJLTk9XTl9QT1NJVElPTlMiLCAicG9zaXRpb25Jc0hvcml6b250YWwiLCAiY29tcGFyZTJMZXZlbCIsICJsMSIsICJsMiIsICJvbkFuaW1hdGlvbnNDb21wbGV0ZSIsICJhbmltYXRpb25PcHRpb25zIiwgIm9uQ29tcGxldGUiLCAib25BbmltYXRpb25Qcm9ncmVzcyIsICJvblByb2dyZXNzIiwgImdldENhbnZhcyIsICJnZXRFbGVtZW50QnlJZCIsICJpbnN0YW5jZXMiLCAiZ2V0Q2hhcnQiLCAidmFsdWVzIiwgImMiLCAibW92ZU51bWVyaWNLZXlzIiwgIm1vdmUiLCAiaW50S2V5IiwgImRldGVybWluZUxhc3RFdmVudCIsICJsYXN0RXZlbnQiLCAiaW5DaGFydEFyZWEiLCAiaXNDbGljayIsICJnZXREYXRhc2V0QXJlYSIsICJ4U2NhbGUiLCAieVNjYWxlIiwgIkNoYXJ0IiwgImludmFsaWRhdGVQbHVnaW5zIiwgInVzZXJDb25maWciLCAiaW5pdGlhbENhbnZhcyIsICJleGlzdGluZ0NoYXJ0IiwgInVpZCIsICJfb3B0aW9ucyIsICJfYXNwZWN0UmF0aW8iLCAiX21ldGFzZXRzIiwgIl9zdGFja3MiLCAiX2FjdGl2ZSIsICJfbGFzdEV2ZW50IiwgIl9saXN0ZW5lcnMiLCAiX3Jlc3BvbnNpdmVMaXN0ZW5lcnMiLCAiX3NvcnRlZE1ldGFzZXRzIiwgIl9wbHVnaW5zIiwgIl9oaWRkZW5JbmRpY2VzIiwgImF0dGFjaGVkIiwgIl9hbmltYXRpb25zRGlzYWJsZWQiLCAiX2RvUmVzaXplIiwgImRlYm91bmNlIiwgIm1vZGUiLCAicmVzaXplRGVsYXkiLCAiX2RhdGFDaGFuZ2VzIiwgImFuaW1hdG9yIiwgImxpc3RlbiIsICJfaW5pdGlhbGl6ZSIsICJtYWludGFpbkFzcGVjdFJhdGlvIiwgInJlc3BvbnNpdmUiLCAicmV0aW5hU2NhbGUiLCAiYmluZEV2ZW50cyIsICJjbGVhckNhbnZhcyIsICJzdG9wIiwgInJ1bm5pbmciLCAiX3Jlc2l6ZSIsICJfcmVzaXplQmVmb3JlRHJhdyIsICJuZXdTaXplIiwgIm5ld1JhdGlvIiwgIm9uUmVzaXplIiwgInJlbmRlciIsICJlbnN1cmVTY2FsZXNIYXZlSURzIiwgInNjYWxlc09wdGlvbnMiLCAiYXhpc09wdGlvbnMiLCAiYnVpbGRPclVwZGF0ZVNjYWxlcyIsICJzY2FsZU9wdHMiLCAidXBkYXRlZCIsICJtYXAiLCAiaXNSYWRpYWwiLCAiZHBvc2l0aW9uIiwgImR0eXBlIiwgInNjYWxlVHlwZSIsICJzY2FsZUNsYXNzIiwgImhhc1VwZGF0ZWQiLCAiX3VwZGF0ZU1ldGFzZXRzIiwgIm51bURhdGEiLCAibnVtTWV0YSIsICJfZGVzdHJveURhdGFzZXRNZXRhIiwgInNsaWNlIiwgIl9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cyIsICJfZGF0YXNldCIsICJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCAibmV3Q29udHJvbGxlcnMiLCAib3JkZXIiLCAidmlzaWJsZSIsICJpc0RhdGFzZXRWaXNpYmxlIiwgInVwZGF0ZUluZGV4IiwgImxpbmtTY2FsZXMiLCAiQ29udHJvbGxlckNsYXNzIiwgImRhdGFzZXRFbGVtZW50VHlwZSIsICJkYXRhRWxlbWVudFR5cGUiLCAiX3Jlc2V0RWxlbWVudHMiLCAicmVzZXQiLCAiYW5pbXNEaXNhYmxlZCIsICJfdXBkYXRlU2NhbGVzIiwgIl9jaGVja0V2ZW50QmluZGluZ3MiLCAiX3VwZGF0ZUhpZGRlbkluZGljZXMiLCAiYnVpbGRPclVwZGF0ZUVsZW1lbnRzIiwgImdldE1heE92ZXJmbG93IiwgIl9taW5QYWRkaW5nIiwgImF1dG9QYWRkaW5nIiwgIl91cGRhdGVMYXlvdXQiLCAiX3VwZGF0ZURhdGFzZXRzIiwgIl9ldmVudEhhbmRsZXIiLCAiX3VwZGF0ZUhvdmVyU3R5bGVzIiwgImV4aXN0aW5nRXZlbnRzIiwgIm5ld0V2ZW50cyIsICJldmVudHMiLCAic2V0c0VxdWFsIiwgInVuYmluZEV2ZW50cyIsICJjaGFuZ2VzIiwgIl9nZXRVbmlmb3JtRGF0YUNoYW5nZXMiLCAiZGF0YXNldENvdW50IiwgIm1ha2VTZXQiLCAiY2hhbmdlU2V0IiwgIm5vQXJlYSIsICJfaWR4IiwgIl91cGRhdGVEYXRhc2V0IiwgIl91cGRhdGUiLCAibGF5ZXJzIiwgIl9kcmF3RGF0YXNldHMiLCAiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsICJmaWx0ZXJWaXNpYmxlIiwgIl9kcmF3RGF0YXNldCIsICJjbGlwIiwgIl9jbGlwIiwgInVzZUNsaXAiLCAiZGlzYWJsZWQiLCAiZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZSIsICJJbnRlcmFjdGlvbiIsICJoaWRkZW4iLCAieEF4aXNJRCIsICJ5QXhpc0lEIiwgIl9wYXJzZWQiLCAiZ2V0VmlzaWJsZURhdGFzZXRDb3VudCIsICJzZXREYXRhc2V0VmlzaWJpbGl0eSIsICJ0b2dnbGVEYXRhVmlzaWJpbGl0eSIsICJnZXREYXRhVmlzaWJpbGl0eSIsICJfdXBkYXRlVmlzaWJpbGl0eSIsICJkYXRhSW5kZXgiLCAiX3Jlc29sdmVBbmltYXRpb25zIiwgImhpZGUiLCAic2hvdyIsICJfZGVzdHJveSIsICJfc3RvcCIsICJkZXN0cm95IiwgInRvQmFzZTY0SW1hZ2UiLCAidG9EYXRhVVJMIiwgImJpbmRVc2VyRXZlbnRzIiwgImJpbmRSZXNwb25zaXZlRXZlbnRzIiwgImxpc3RlbmVycyIsICJfYWRkIiwgIm9mZnNldFgiLCAib2Zmc2V0WSIsICJfcmVtb3ZlIiwgImRldGFjaGVkIiwgInVwZGF0ZUhvdmVyU3R5bGUiLCAicHJlZml4IiwgImdldEFjdGl2ZUVsZW1lbnRzIiwgInNldEFjdGl2ZUVsZW1lbnRzIiwgImFjdGl2ZUVsZW1lbnRzIiwgImxhc3RBY3RpdmUiLCAiX2VsZW1lbnRzRXF1YWwiLCAiaXNQbHVnaW5FbmFibGVkIiwgInBsdWdpbklkIiwgInJlcGxheSIsICJob3Zlck9wdGlvbnMiLCAiaG92ZXIiLCAiZGVhY3RpdmF0ZWQiLCAiYWN0aXZhdGVkIiwgImV2ZW50RmlsdGVyIiwgIl9oYW5kbGVFdmVudCIsICJfZ2V0QWN0aXZlRWxlbWVudHMiLCAiX2lzQ2xpY2tFdmVudCIsICJvbkhvdmVyIiwgIm9uQ2xpY2siLCAidmVyc2lvbiIsICJjbGlwQXJjIiwgInBpeGVsTWFyZ2luIiwgIm91dGVyUmFkaXVzIiwgImlubmVyUmFkaXVzIiwgImFuZ2xlTWFyZ2luIiwgImFyYyIsICJjbG9zZVBhdGgiLCAidG9SYWRpdXNDb3JuZXJzIiwgIl9yZWFkVmFsdWVUb1Byb3BzIiwgInBhcnNlQm9yZGVyUmFkaXVzIiwgImFuZ2xlRGVsdGEiLCAibyIsICJib3JkZXJSYWRpdXMiLCAiaGFsZlRoaWNrbmVzcyIsICJpbm5lckxpbWl0IiwgImNvbXB1dGVPdXRlckxpbWl0IiwgInZhbCIsICJvdXRlckFyY0xpbWl0IiwgIm91dGVyU3RhcnQiLCAib3V0ZXJFbmQiLCAiaW5uZXJTdGFydCIsICJpbm5lckVuZCIsICJyVGhldGFUb1hZIiwgInIiLCAidGhldGEiLCAicGF0aEFyYyIsICJjaXJjdWxhciIsICJpbm5lclIiLCAic3BhY2luZ09mZnNldCIsICJhbHBoYSIsICJub1NwYWNpbmdJbm5lclJhZGl1cyIsICJub1NwYWNpbmdPdXRlclJhZGl1cyIsICJhdk5vZ1NwYWNpbmdSYWRpdXMiLCAiYWRqdXN0ZWRBbmdsZSIsICJiZXRhIiwgIlBJIiwgImFuZ2xlT2Zmc2V0IiwgIm91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cyIsICJvdXRlckVuZEFkanVzdGVkUmFkaXVzIiwgIm91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlIiwgIm91dGVyRW5kQWRqdXN0ZWRBbmdsZSIsICJpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCAiaW5uZXJFbmRBZGp1c3RlZFJhZGl1cyIsICJpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSIsICJpbm5lckVuZEFkanVzdGVkQW5nbGUiLCAib3V0ZXJNaWRBZGp1c3RlZEFuZ2xlIiwgInBDZW50ZXIiLCAicDQiLCAiaW5uZXJNaWRBZGp1c3RlZEFuZ2xlIiwgInA4IiwgIm91dGVyU3RhcnRYIiwgIm91dGVyU3RhcnRZIiwgIm91dGVyRW5kWCIsICJvdXRlckVuZFkiLCAiZHJhd0FyYyIsICJmdWxsQ2lyY2xlcyIsICJjaXJjdW1mZXJlbmNlIiwgImZpbGwiLCAiaXNOYU4iLCAiVEFVIiwgImJvcmRlcldpZHRoIiwgImJvcmRlckpvaW5TdHlsZSIsICJpbm5lciIsICJib3JkZXJBbGlnbiIsICJsaW5lSm9pbiIsICJBcmNFbGVtZW50IiwgImNoYXJ0WCIsICJjaGFydFkiLCAickFkanVzdCIsICJfY2lyY3VtZmVyZW5jZSIsICJiZXR3ZWVuQW5nbGVzIiwgIndpdGhpblJhZGl1cyIsICJfaXNCZXR3ZWVuIiwgImhhbGZBbmdsZSIsICJoYWxmUmFkaXVzIiwgInRyYW5zbGF0ZSIsICJmaXgiLCAicmFkaXVzT2Zmc2V0IiwgImJvcmRlckNvbG9yIiwgImdldEJhckJvdW5kcyIsICJiYXIiLCAidXNlRmluYWxQb3NpdGlvbiIsICJ4IiwgInkiLCAiYmFzZSIsICJ3aWR0aCIsICJoZWlnaHQiLCAiZ2V0UHJvcHMiLCAibGVmdCIsICJyaWdodCIsICJ0b3AiLCAiYm90dG9tIiwgImhhbGYiLCAiaG9yaXpvbnRhbCIsICJNYXRoIiwgIm1pbiIsICJtYXgiLCAic2tpcE9yTGltaXQiLCAic2tpcCIsICJ2YWx1ZSIsICJfbGltaXRWYWx1ZSIsICJwYXJzZUJvcmRlcldpZHRoIiwgIm1heFciLCAibWF4SCIsICJvcHRpb25zIiwgImJvcmRlcldpZHRoIiwgImJvcmRlclNraXBwZWQiLCAibyIsICJ0b1RSQkwiLCAidCIsICJyIiwgImIiLCAibCIsICJwYXJzZUJvcmRlclJhZGl1cyIsICJlbmFibGVCb3JkZXJSYWRpdXMiLCAiYm9yZGVyUmFkaXVzIiwgInRvVFJCTENvcm5lcnMiLCAibWF4UiIsICJlbmFibGVCb3JkZXIiLCAiaXNPYmplY3QiLCAidG9wTGVmdCIsICJ0b3BSaWdodCIsICJib3R0b21MZWZ0IiwgImJvdHRvbVJpZ2h0IiwgImJvdW5kaW5nUmVjdHMiLCAiYm91bmRzIiwgImJvcmRlciIsICJyYWRpdXMiLCAib3V0ZXIiLCAidyIsICJoIiwgImlubmVyIiwgImluUmFuZ2UiLCAic2tpcFgiLCAic2tpcFkiLCAic2tpcEJvdGgiLCAiX2lzQmV0d2VlbiIsICJoYXNSYWRpdXMiLCAiYWRkTm9ybWFsUmVjdFBhdGgiLCAiY3R4IiwgInJlY3QiLCAiaW5mbGF0ZVJlY3QiLCAiYW1vdW50IiwgInJlZlJlY3QiLCAiQmFyRWxlbWVudCIsICJFbGVtZW50IiwgImNvbnN0cnVjdG9yIiwgImNmZyIsICJ1bmRlZmluZWQiLCAiaW5mbGF0ZUFtb3VudCIsICJPYmplY3QiLCAiYXNzaWduIiwgImRyYXciLCAiYm9yZGVyQ29sb3IiLCAiYmFja2dyb3VuZENvbG9yIiwgImFkZFJlY3RQYXRoIiwgImFkZFJvdW5kZWRSZWN0UGF0aCIsICJzYXZlIiwgImJlZ2luUGF0aCIsICJjbGlwIiwgImZpbGxTdHlsZSIsICJmaWxsIiwgInJlc3RvcmUiLCAibW91c2VYIiwgIm1vdXNlWSIsICJpblhSYW5nZSIsICJpbllSYW5nZSIsICJnZXRDZW50ZXJQb2ludCIsICJnZXRSYW5nZSIsICJheGlzIiwgImlkIiwgImRlZmF1bHRzIiwgInBvaW50U3R5bGUiLCAiZGVmYXVsdFJvdXRlcyIsICJnZXRCb3hTaXplIiwgImxhYmVsT3B0cyIsICJmb250U2l6ZSIsICJib3hIZWlnaHQiLCAiYm94V2lkdGgiLCAidXNlUG9pbnRTdHlsZSIsICJNYXRoIiwgIm1pbiIsICJwb2ludFN0eWxlV2lkdGgiLCAiaXRlbUhlaWdodCIsICJtYXgiLCAiaXRlbXNFcXVhbCIsICJhIiwgImIiLCAiZGF0YXNldEluZGV4IiwgImluZGV4IiwgIkxlZ2VuZCIsICJFbGVtZW50IiwgImNvbnN0cnVjdG9yIiwgImNvbmZpZyIsICJfYWRkZWQiLCAibGVnZW5kSGl0Qm94ZXMiLCAiX2hvdmVyZWRJdGVtIiwgImRvdWdobnV0TW9kZSIsICJjaGFydCIsICJvcHRpb25zIiwgImN0eCIsICJsZWdlbmRJdGVtcyIsICJ1bmRlZmluZWQiLCAiY29sdW1uU2l6ZXMiLCAibGluZVdpZHRocyIsICJtYXhIZWlnaHQiLCAibWF4V2lkdGgiLCAidG9wIiwgImJvdHRvbSIsICJsZWZ0IiwgInJpZ2h0IiwgImhlaWdodCIsICJ3aWR0aCIsICJfbWFyZ2lucyIsICJwb3NpdGlvbiIsICJ3ZWlnaHQiLCAiZnVsbFNpemUiLCAidXBkYXRlIiwgIm1hcmdpbnMiLCAic2V0RGltZW5zaW9ucyIsICJidWlsZExhYmVscyIsICJmaXQiLCAiaXNIb3Jpem9udGFsIiwgImxhYmVscyIsICJjYWxsIiwgImdlbmVyYXRlTGFiZWxzIiwgImZpbHRlciIsICJpdGVtIiwgImRhdGEiLCAic29ydCIsICJyZXZlcnNlIiwgImRpc3BsYXkiLCAibGFiZWxGb250IiwgInRvRm9udCIsICJmb250IiwgInNpemUiLCAidGl0bGVIZWlnaHQiLCAiX2NvbXB1dGVUaXRsZUhlaWdodCIsICJzdHJpbmciLCAiX2ZpdFJvd3MiLCAiX2ZpdENvbHMiLCAicGFkZGluZyIsICJoaXRib3hlcyIsICJsaW5lSGVpZ2h0IiwgInRvdGFsSGVpZ2h0IiwgInRleHRBbGlnbiIsICJ0ZXh0QmFzZWxpbmUiLCAicm93IiwgImZvckVhY2giLCAibGVnZW5kSXRlbSIsICJpIiwgIml0ZW1XaWR0aCIsICJtZWFzdXJlVGV4dCIsICJ0ZXh0IiwgImxlbmd0aCIsICJfaXRlbUhlaWdodCIsICJoZWlnaHRMaW1pdCIsICJ0b3RhbFdpZHRoIiwgImN1cnJlbnRDb2xXaWR0aCIsICJjdXJyZW50Q29sSGVpZ2h0IiwgImNvbCIsICJjYWxjdWxhdGVJdGVtU2l6ZSIsICJwdXNoIiwgImFkanVzdEhpdEJveGVzIiwgImFsaWduIiwgInJ0bCIsICJydGxIZWxwZXIiLCAiZ2V0UnRsQWRhcHRlciIsICJfYWxpZ25TdGFydEVuZCIsICJoaXRib3giLCAibGVmdEZvckx0ciIsICJ4IiwgImRyYXciLCAiY2xpcEFyZWEiLCAiX2RyYXciLCAidW5jbGlwQXJlYSIsICJvcHRzIiwgImRlZmF1bHRDb2xvciIsICJkZWZhdWx0cyIsICJjb2xvciIsICJoYWxmRm9udFNpemUiLCAiY3Vyc29yIiwgImRyYXdUaXRsZSIsICJsaW5lV2lkdGgiLCAiZHJhd0xlZ2VuZEJveCIsICJ5IiwgImlzTmFOIiwgInNhdmUiLCAidmFsdWVPckRlZmF1bHQiLCAiZmlsbFN0eWxlIiwgImxpbmVDYXAiLCAibGluZURhc2hPZmZzZXQiLCAibGluZUpvaW4iLCAic3Ryb2tlU3R5bGUiLCAic2V0TGluZURhc2giLCAibGluZURhc2giLCAiZHJhd09wdGlvbnMiLCAicmFkaXVzIiwgIlNRUlQyIiwgInBvaW50U3R5bGUiLCAicm90YXRpb24iLCAiYm9yZGVyV2lkdGgiLCAiY2VudGVyWCIsICJ4UGx1cyIsICJjZW50ZXJZIiwgImRyYXdQb2ludExlZ2VuZCIsICJ5Qm94VG9wIiwgInhCb3hMZWZ0IiwgImJvcmRlclJhZGl1cyIsICJ0b1RSQkxDb3JuZXJzIiwgImJlZ2luUGF0aCIsICJPYmplY3QiLCAidmFsdWVzIiwgInNvbWUiLCAidiIsICJhZGRSb3VuZGVkUmVjdFBhdGgiLCAidyIsICJoIiwgInJlY3QiLCAiZmlsbCIsICJzdHJva2UiLCAicmVzdG9yZSIsICJmaWxsVGV4dCIsICJyZW5kZXJUZXh0IiwgInN0cmlrZXRocm91Z2giLCAiaGlkZGVuIiwgImxpbmUiLCAib3ZlcnJpZGVUZXh0RGlyZWN0aW9uIiwgInRleHREaXJlY3Rpb24iLCAiZm9udENvbG9yIiwgInRleHRXaWR0aCIsICJzZXRXaWR0aCIsICJyZWFsWCIsICJfdGV4dFgiLCAiZm9udExpbmVIZWlnaHQiLCAiY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodCIsICJyZXN0b3JlVGV4dERpcmVjdGlvbiIsICJ0aXRsZU9wdHMiLCAidGl0bGUiLCAidGl0bGVGb250IiwgInRpdGxlUGFkZGluZyIsICJ0b1BhZGRpbmciLCAidG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUiLCAicmVkdWNlIiwgImFjYyIsICJfdG9MZWZ0UmlnaHRDZW50ZXIiLCAiX2dldExlZ2VuZEl0ZW1BdCIsICJoaXRCb3giLCAibGgiLCAiX2lzQmV0d2VlbiIsICJoYW5kbGVFdmVudCIsICJlIiwgImlzTGlzdGVuZWQiLCAidHlwZSIsICJob3ZlcmVkSXRlbSIsICJwcmV2aW91cyIsICJzYW1lSXRlbSIsICJvbkxlYXZlIiwgIm9uSG92ZXIiLCAib25DbGljayIsICJjYWxjdWxhdGVJdGVtV2lkdGgiLCAiY2FsY3VsYXRlSXRlbUhlaWdodCIsICJsZWdlbmRJdGVtVGV4dCIsICJsYWJlbEhlaWdodCIsICJpZCIsICJfZWxlbWVudCIsICJzdGFydCIsICJfYXJncyIsICJsZWdlbmQiLCAibGF5b3V0cyIsICJjb25maWd1cmUiLCAiYWRkQm94IiwgInN0b3AiLCAicmVtb3ZlQm94IiwgImJlZm9yZVVwZGF0ZSIsICJhZnRlclVwZGF0ZSIsICJhZnRlckV2ZW50IiwgImFyZ3MiLCAicmVwbGF5IiwgImV2ZW50IiwgImNpIiwgImlzRGF0YXNldFZpc2libGUiLCAiaGlkZSIsICJzaG93IiwgImRhdGFzZXRzIiwgInVzZUJvcmRlclJhZGl1cyIsICJfZ2V0U29ydGVkRGF0YXNldE1ldGFzIiwgIm1hcCIsICJtZXRhIiwgInN0eWxlIiwgImNvbnRyb2xsZXIiLCAiZ2V0U3R5bGUiLCAibGFiZWwiLCAiYmFja2dyb3VuZENvbG9yIiwgInZpc2libGUiLCAiYm9yZGVyQ2FwU3R5bGUiLCAiYm9yZGVyRGFzaCIsICJib3JkZXJEYXNoT2Zmc2V0IiwgImJvcmRlckpvaW5TdHlsZSIsICJib3JkZXJDb2xvciIsICJkZXNjcmlwdG9ycyIsICJfc2NyaXB0YWJsZSIsICJuYW1lIiwgInN0YXJ0c1dpdGgiLCAiaW5jbHVkZXMiLCAiVGl0bGUiLCAiX3BhZGRpbmciLCAibGluZUNvdW50IiwgImlzQXJyYXkiLCAidGV4dFNpemUiLCAicG9zIiwgIl9kcmF3QXJncyIsICJvZmZzZXQiLCAidGl0bGVYIiwgInRpdGxlWSIsICJQSSIsICJmb250T3B0cyIsICJ0cmFuc2xhdGlvbiIsICJjcmVhdGVUaXRsZSIsICJ0aXRsZUJsb2NrIiwgImRlZmF1bHRSb3V0ZXMiLCAiX2luZGV4YWJsZSIsICJXZWFrTWFwIiwgInNldCIsICJnZXQiLCAiZGVsZXRlIiwgInBvc2l0aW9uZXJzIiwgImF2ZXJhZ2UiLCAiaXRlbXMiLCAibGVuIiwgImNvdW50IiwgImVsIiwgImVsZW1lbnQiLCAiaGFzVmFsdWUiLCAidG9vbHRpcFBvc2l0aW9uIiwgIm5lYXJlc3QiLCAiZXZlbnRQb3NpdGlvbiIsICJtaW5EaXN0YW5jZSIsICJOdW1iZXIiLCAiUE9TSVRJVkVfSU5GSU5JVFkiLCAibmVhcmVzdEVsZW1lbnQiLCAiY2VudGVyIiwgImdldENlbnRlclBvaW50IiwgImQiLCAiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwgInRwIiwgInB1c2hPckNvbmNhdCIsICJiYXNlIiwgInRvUHVzaCIsICJBcnJheSIsICJwcm90b3R5cGUiLCAiYXBwbHkiLCAic3BsaXROZXdsaW5lcyIsICJzdHIiLCAiU3RyaW5nIiwgImluZGV4T2YiLCAic3BsaXQiLCAiY3JlYXRlVG9vbHRpcEl0ZW0iLCAiZ2V0RGF0YXNldE1ldGEiLCAidmFsdWUiLCAiZ2V0TGFiZWxBbmRWYWx1ZSIsICJwYXJzZWQiLCAiZ2V0UGFyc2VkIiwgInJhdyIsICJmb3JtYXR0ZWRWYWx1ZSIsICJkYXRhc2V0IiwgImdldERhdGFzZXQiLCAiZGF0YUluZGV4IiwgImdldFRvb2x0aXBTaXplIiwgInRvb2x0aXAiLCAiYm9keSIsICJmb290ZXIiLCAiYm9keUZvbnQiLCAiZm9vdGVyRm9udCIsICJ0aXRsZUxpbmVDb3VudCIsICJmb290ZXJMaW5lQ291bnQiLCAiYm9keUxpbmVJdGVtQ291bnQiLCAiY29tYmluZWRCb2R5TGVuZ3RoIiwgImJvZHlJdGVtIiwgImJlZm9yZSIsICJsaW5lcyIsICJhZnRlciIsICJiZWZvcmVCb2R5IiwgImFmdGVyQm9keSIsICJ0aXRsZVNwYWNpbmciLCAidGl0bGVNYXJnaW5Cb3R0b20iLCAiYm9keUxpbmVIZWlnaHQiLCAiZGlzcGxheUNvbG9ycyIsICJib2R5U3BhY2luZyIsICJmb290ZXJNYXJnaW5Ub3AiLCAiZm9vdGVyU3BhY2luZyIsICJ3aWR0aFBhZGRpbmciLCAibWF4TGluZVdpZHRoIiwgImVhY2giLCAiY29uY2F0IiwgImJveFBhZGRpbmciLCAiZGV0ZXJtaW5lWUFsaWduIiwgImRvZXNOb3RGaXRXaXRoQWxpZ24iLCAieEFsaWduIiwgImNhcmV0IiwgImNhcmV0U2l6ZSIsICJjYXJldFBhZGRpbmciLCAiZGV0ZXJtaW5lWEFsaWduIiwgInlBbGlnbiIsICJjaGFydFdpZHRoIiwgImNoYXJ0QXJlYSIsICJkZXRlcm1pbmVBbGlnbm1lbnQiLCAiYWxpZ25YIiwgImFsaWduWSIsICJwYWRkaW5nQW5kU2l6ZSIsICJnZXRCYWNrZ3JvdW5kUG9pbnQiLCAiYWxpZ25tZW50IiwgImNvcm5lclJhZGl1cyIsICJ0b3BMZWZ0IiwgInRvcFJpZ2h0IiwgImJvdHRvbUxlZnQiLCAiYm90dG9tUmlnaHQiLCAiX2xpbWl0VmFsdWUiLCAiZ2V0QWxpZ25lZFgiLCAiZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMiLCAiY2FsbGJhY2siLCAiY3JlYXRlVG9vbHRpcENvbnRleHQiLCAicGFyZW50IiwgInRvb2x0aXBJdGVtcyIsICJjcmVhdGVDb250ZXh0IiwgIm92ZXJyaWRlQ2FsbGJhY2tzIiwgImNhbGxiYWNrcyIsICJjb250ZXh0IiwgIm92ZXJyaWRlIiwgImRlZmF1bHRDYWxsYmFja3MiLCAiYmVmb3JlVGl0bGUiLCAibm9vcCIsICJsYWJlbENvdW50IiwgIm1vZGUiLCAiYWZ0ZXJUaXRsZSIsICJiZWZvcmVMYWJlbCIsICJ0b29sdGlwSXRlbSIsICJpc051bGxPclVuZGVmIiwgImxhYmVsQ29sb3IiLCAibGFiZWxUZXh0Q29sb3IiLCAiYm9keUNvbG9yIiwgImxhYmVsUG9pbnRTdHlsZSIsICJhZnRlckxhYmVsIiwgImJlZm9yZUZvb3RlciIsICJhZnRlckZvb3RlciIsICJpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayIsICJhcmciLCAicmVzdWx0IiwgIlRvb2x0aXAiLCAib3BhY2l0eSIsICJfYWN0aXZlIiwgIl9ldmVudFBvc2l0aW9uIiwgIl9zaXplIiwgIl9jYWNoZWRBbmltYXRpb25zIiwgIl90b29sdGlwSXRlbXMiLCAiJGFuaW1hdGlvbnMiLCAiJGNvbnRleHQiLCAiZGF0YVBvaW50cyIsICJjYXJldFgiLCAiY2FyZXRZIiwgImxhYmVsQ29sb3JzIiwgImxhYmVsUG9pbnRTdHlsZXMiLCAibGFiZWxUZXh0Q29sb3JzIiwgImluaXRpYWxpemUiLCAiX3Jlc29sdmVBbmltYXRpb25zIiwgImNhY2hlZCIsICJzZXRDb250ZXh0IiwgImdldENvbnRleHQiLCAiZW5hYmxlZCIsICJhbmltYXRpb24iLCAiYW5pbWF0aW9ucyIsICJBbmltYXRpb25zIiwgIl9jYWNoZWFibGUiLCAiZnJlZXplIiwgImdldFRpdGxlIiwgImdldEJlZm9yZUJvZHkiLCAiZ2V0Qm9keSIsICJib2R5SXRlbXMiLCAic2NvcGVkIiwgImdldEFmdGVyQm9keSIsICJnZXRGb290ZXIiLCAiX2NyZWF0ZUl0ZW1zIiwgImFjdGl2ZSIsICJhcnJheSIsICJpdGVtU29ydCIsICJjaGFuZ2VkIiwgInByb3BlcnRpZXMiLCAicG9zaXRpb25BbmRTaXplIiwgImFzc2lnbiIsICJiYWNrZ3JvdW5kUG9pbnQiLCAiZXh0ZXJuYWwiLCAiZHJhd0NhcmV0IiwgInRvb2x0aXBQb2ludCIsICJjYXJldFBvc2l0aW9uIiwgImdldENhcmV0UG9zaXRpb24iLCAibGluZVRvIiwgIngxIiwgInkxIiwgIngyIiwgInkyIiwgIngzIiwgInkzIiwgInB0WCIsICJwdFkiLCAicHQiLCAidGl0bGVBbGlnbiIsICJ0aXRsZUNvbG9yIiwgIl9kcmF3Q29sb3JCb3giLCAiY29sb3JYIiwgInJ0bENvbG9yWCIsICJ5T2ZmU2V0IiwgImNvbG9yWSIsICJtdWx0aUtleUJhY2tncm91bmQiLCAiZHJhd1BvaW50IiwgImlzT2JqZWN0IiwgIm91dGVyWCIsICJpbm5lclgiLCAiZmlsbFJlY3QiLCAic3Ryb2tlUmVjdCIsICJkcmF3Qm9keSIsICJib2R5QWxpZ24iLCAieExpbmVQYWRkaW5nIiwgImZpbGxMaW5lT2ZUZXh0IiwgImJvZHlBbGlnbkZvckNhbGN1bGF0aW9uIiwgInRleHRDb2xvciIsICJqIiwgImlsZW4iLCAiamxlbiIsICJkcmF3Rm9vdGVyIiwgImZvb3RlckFsaWduIiwgImZvb3RlckNvbG9yIiwgImRyYXdCYWNrZ3JvdW5kIiwgInRvb2x0aXBTaXplIiwgIm1vdmVUbyIsICJxdWFkcmF0aWNDdXJ2ZVRvIiwgImNsb3NlUGF0aCIsICJfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0IiwgImFuaW1zIiwgImFuaW1YIiwgImFuaW1ZIiwgInBvaW50IiwgIl90byIsICJfd2lsbFJlbmRlciIsICJhYnMiLCAiaGFzVG9vbHRpcENvbnRlbnQiLCAiZ2xvYmFsQWxwaGEiLCAiZ2V0QWN0aXZlRWxlbWVudHMiLCAic2V0QWN0aXZlRWxlbWVudHMiLCAiYWN0aXZlRWxlbWVudHMiLCAibGFzdEFjdGl2ZSIsICJFcnJvciIsICJfZWxlbWVudHNFcXVhbCIsICJwb3NpdGlvbkNoYW5nZWQiLCAiX3Bvc2l0aW9uQ2hhbmdlZCIsICJfaWdub3JlUmVwbGF5RXZlbnRzIiwgImluQ2hhcnRBcmVhIiwgIl9nZXRBY3RpdmVFbGVtZW50cyIsICJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwgImFmdGVySW5pdCIsICJyZXNldCIsICJhZnRlckRyYXciLCAibm90aWZ5UGx1Z2lucyIsICJjYW5jZWxhYmxlIiwgInVzZUZpbmFsUG9zaXRpb24iLCAiZHVyYXRpb24iLCAiZWFzaW5nIiwgIm51bWJlcnMiLCAiX2ZhbGxiYWNrIiwgImFkZGl0aW9uYWxPcHRpb25TY29wZXMiLCAiYWRkSWZTdHJpbmciLCAibGFiZWxzIiwgInJhdyIsICJpbmRleCIsICJhZGRlZExhYmVscyIsICJwdXNoIiwgInVuc2hpZnQiLCAibGFiZWwiLCAiaXNOYU4iLCAiZmluZE9yQWRkTGFiZWwiLCAiZmlyc3QiLCAiaW5kZXhPZiIsICJsYXN0IiwgImxhc3RJbmRleE9mIiwgInZhbGlkSW5kZXgiLCAibWF4IiwgIl9saW1pdFZhbHVlIiwgIk1hdGgiLCAicm91bmQiLCAiX2dldExhYmVsRm9yVmFsdWUiLCAidmFsdWUiLCAiZ2V0TGFiZWxzIiwgImxlbmd0aCIsICJDYXRlZ29yeVNjYWxlIiwgIlNjYWxlIiwgImNvbnN0cnVjdG9yIiwgImNmZyIsICJfc3RhcnRWYWx1ZSIsICJ1bmRlZmluZWQiLCAiX3ZhbHVlUmFuZ2UiLCAiX2FkZGVkTGFiZWxzIiwgImluaXQiLCAic2NhbGVPcHRpb25zIiwgImFkZGVkIiwgInNwbGljZSIsICJwYXJzZSIsICJpc051bGxPclVuZGVmIiwgImlzRmluaXRlIiwgInZhbHVlT3JEZWZhdWx0IiwgImRldGVybWluZURhdGFMaW1pdHMiLCAibWluRGVmaW5lZCIsICJtYXhEZWZpbmVkIiwgImdldFVzZXJCb3VuZHMiLCAibWluIiwgImdldE1pbk1heCIsICJvcHRpb25zIiwgImJvdW5kcyIsICJidWlsZFRpY2tzIiwgIm9mZnNldCIsICJ0aWNrcyIsICJzbGljZSIsICJnZXRMYWJlbEZvclZhbHVlIiwgImNhbGwiLCAiY29uZmlndXJlIiwgImlzSG9yaXpvbnRhbCIsICJfcmV2ZXJzZVBpeGVscyIsICJnZXRQaXhlbEZvclZhbHVlIiwgIk5hTiIsICJnZXRQaXhlbEZvckRlY2ltYWwiLCAiZ2V0UGl4ZWxGb3JUaWNrIiwgImdldFZhbHVlRm9yUGl4ZWwiLCAicGl4ZWwiLCAiZ2V0RGVjaW1hbEZvclBpeGVsIiwgImdldEJhc2VQaXhlbCIsICJib3R0b20iLCAiaWQiLCAiZGVmYXVsdHMiLCAiY2FsbGJhY2siLCAiZ2VuZXJhdGVUaWNrcyIsICJnZW5lcmF0aW9uT3B0aW9ucyIsICJkYXRhUmFuZ2UiLCAiTUlOX1NQQUNJTkciLCAic3RlcCIsICJwcmVjaXNpb24iLCAiY291bnQiLCAibWF4VGlja3MiLCAibWF4RGlnaXRzIiwgImluY2x1ZGVCb3VuZHMiLCAidW5pdCIsICJtYXhTcGFjZXMiLCAicm1pbiIsICJybWF4IiwgImNvdW50RGVmaW5lZCIsICJtaW5TcGFjaW5nIiwgInNwYWNpbmciLCAibmljZU51bSIsICJmYWN0b3IiLCAibmljZU1pbiIsICJuaWNlTWF4IiwgIm51bVNwYWNlcyIsICJjZWlsIiwgImZsb29yIiwgInBvdyIsICJhbG1vc3RXaG9sZSIsICJhbG1vc3RFcXVhbHMiLCAiZGVjaW1hbFBsYWNlcyIsICJfZGVjaW1hbFBsYWNlcyIsICJqIiwgInJlbGF0aXZlTGFiZWxTaXplIiwgImhvcml6b250YWwiLCAibWluUm90YXRpb24iLCAicmFkIiwgInRvUmFkaWFucyIsICJyYXRpbyIsICJzaW4iLCAiY29zIiwgIkxpbmVhclNjYWxlQmFzZSIsICJzdGFydCIsICJlbmQiLCAiX2VuZFZhbHVlIiwgIk51bWJlciIsICJoYW5kbGVUaWNrUmFuZ2VPcHRpb25zIiwgImJlZ2luQXRaZXJvIiwgInNldE1pbiIsICJ2IiwgInNldE1heCIsICJtaW5TaWduIiwgInNpZ24iLCAibWF4U2lnbiIsICJhYnMiLCAiZ2V0VGlja0xpbWl0IiwgInRpY2tPcHRzIiwgIm1heFRpY2tzTGltaXQiLCAic3RlcFNpemUiLCAiY29uc29sZSIsICJ3YXJuIiwgImNvbXB1dGVUaWNrTGltaXQiLCAiUE9TSVRJVkVfSU5GSU5JVFkiLCAib3B0cyIsICJudW1lcmljR2VuZXJhdG9yT3B0aW9ucyIsICJfbWF4RGlnaXRzIiwgIl9yYW5nZSIsICJfc2V0TWluQW5kTWF4QnlLZXkiLCAicmV2ZXJzZSIsICJmb3JtYXROdW1iZXIiLCAiY2hhcnQiLCAibG9jYWxlIiwgImZvcm1hdCIsICJMaW5lYXJTY2FsZSIsICJ3aWR0aCIsICJoZWlnaHQiLCAidGlja0ZvbnQiLCAiX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMiLCAibGluZUhlaWdodCIsICJUaWNrcyIsICJmb3JtYXR0ZXJzIiwgIm51bWVyaWMiLCAibG9nMTBGbG9vciIsICJsb2cxMCIsICJjaGFuZ2VFeHBvbmVudCIsICJtIiwgImlzTWFqb3IiLCAidGlja1ZhbCIsICJyZW1haW4iLCAic3RlcHMiLCAicmFuZ2VFeHAiLCAicmFuZ2VTdGVwIiwgInN0YXJ0RXhwIiwgInJhbmdlIiwgImZpbml0ZU9yRGVmYXVsdCIsICJtaW5FeHAiLCAiZXhwIiwgImJhc2UiLCAic2lnbmlmaWNhbmQiLCAibWFqb3IiLCAibGFzdFRpY2siLCAiTG9nYXJpdGhtaWNTY2FsZSIsICJwcm90b3R5cGUiLCAiYXBwbHkiLCAiX3plcm8iLCAiX3N1Z2dlc3RlZE1pbiIsICJfdXNlck1pbiIsICJfdXNlck1heCIsICJkZWNpbWFsIiwgImxvZ2FyaXRobWljIiwgImVuYWJsZWQiLCAiZ2V0VGlja0JhY2tkcm9wSGVpZ2h0IiwgImRpc3BsYXkiLCAicGFkZGluZyIsICJ0b1BhZGRpbmciLCAiYmFja2Ryb3BQYWRkaW5nIiwgImZvbnQiLCAic2l6ZSIsICJtZWFzdXJlTGFiZWxTaXplIiwgImN0eCIsICJpc0FycmF5IiwgInciLCAiX2xvbmdlc3RUZXh0IiwgInN0cmluZyIsICJoIiwgImRldGVybWluZUxpbWl0cyIsICJhbmdsZSIsICJwb3MiLCAiZml0V2l0aFBvaW50TGFiZWxzIiwgInNjYWxlIiwgIm9yaWciLCAibCIsICJsZWZ0IiwgIl9wYWRkaW5nIiwgInIiLCAicmlnaHQiLCAidCIsICJ0b3AiLCAiYiIsICJsaW1pdHMiLCAiT2JqZWN0IiwgImFzc2lnbiIsICJsYWJlbFNpemVzIiwgInZhbHVlQ291bnQiLCAiX3BvaW50TGFiZWxzIiwgInBvaW50TGFiZWxPcHRzIiwgInBvaW50TGFiZWxzIiwgImFkZGl0aW9uYWxBbmdsZSIsICJjZW50ZXJQb2ludExhYmVscyIsICJQSSIsICJpIiwgInNldENvbnRleHQiLCAiZ2V0UG9pbnRMYWJlbENvbnRleHQiLCAicG9pbnRQb3NpdGlvbiIsICJnZXRQb2ludFBvc2l0aW9uIiwgImRyYXdpbmdBcmVhIiwgInBsRm9udCIsICJ0b0ZvbnQiLCAidGV4dFNpemUiLCAiYW5nbGVSYWRpYW5zIiwgIl9ub3JtYWxpemVBbmdsZSIsICJnZXRJbmRleEFuZ2xlIiwgInRvRGVncmVlcyIsICJoTGltaXRzIiwgIngiLCAidkxpbWl0cyIsICJ5IiwgInVwZGF0ZUxpbWl0cyIsICJzZXRDZW50ZXJQb2ludCIsICJfcG9pbnRMYWJlbEl0ZW1zIiwgImJ1aWxkUG9pbnRMYWJlbEl0ZW1zIiwgIml0ZW1zIiwgImV4dHJhIiwgIm91dGVyRGlzdGFuY2UiLCAicG9pbnRMYWJlbFBvc2l0aW9uIiwgIkhBTEZfUEkiLCAieUZvckFuZ2xlIiwgInRleHRBbGlnbiIsICJnZXRUZXh0QWxpZ25Gb3JBbmdsZSIsICJsZWZ0Rm9yVGV4dEFsaWduIiwgImFsaWduIiwgImRyYXdQb2ludExhYmVscyIsICJsYWJlbENvdW50IiwgIm9wdHNBdEluZGV4IiwgImJhY2tkcm9wQ29sb3IiLCAiYm9yZGVyUmFkaXVzIiwgInRvVFJCTENvcm5lcnMiLCAiZmlsbFN0eWxlIiwgImJhY2tkcm9wTGVmdCIsICJiYWNrZHJvcFRvcCIsICJiYWNrZHJvcFdpZHRoIiwgImJhY2tkcm9wSGVpZ2h0IiwgInZhbHVlcyIsICJzb21lIiwgImJlZ2luUGF0aCIsICJhZGRSb3VuZGVkUmVjdFBhdGgiLCAicmFkaXVzIiwgImZpbGwiLCAiZmlsbFJlY3QiLCAicmVuZGVyVGV4dCIsICJjb2xvciIsICJ0ZXh0QmFzZWxpbmUiLCAicGF0aFJhZGl1c0xpbmUiLCAiY2lyY3VsYXIiLCAiYXJjIiwgInhDZW50ZXIiLCAieUNlbnRlciIsICJUQVUiLCAibW92ZVRvIiwgImxpbmVUbyIsICJkcmF3UmFkaXVzTGluZSIsICJncmlkTGluZU9wdHMiLCAiYm9yZGVyT3B0cyIsICJsaW5lV2lkdGgiLCAic2F2ZSIsICJzdHJva2VTdHlsZSIsICJzZXRMaW5lRGFzaCIsICJkYXNoIiwgImxpbmVEYXNoT2Zmc2V0IiwgImRhc2hPZmZzZXQiLCAiY2xvc2VQYXRoIiwgInN0cm9rZSIsICJyZXN0b3JlIiwgImNyZWF0ZVBvaW50TGFiZWxDb250ZXh0IiwgInBhcmVudCIsICJjcmVhdGVDb250ZXh0IiwgInR5cGUiLCAiUmFkaWFsTGluZWFyU2NhbGUiLCAic2V0RGltZW5zaW9ucyIsICJtYXhXaWR0aCIsICJtYXhIZWlnaHQiLCAiZ2VuZXJhdGVUaWNrTGFiZWxzIiwgIm1hcCIsICJjYWxsQ2FsbGJhY2siLCAiZmlsdGVyIiwgImdldERhdGFWaXNpYmlsaXR5IiwgImZpdCIsICJsZWZ0TW92ZW1lbnQiLCAicmlnaHRNb3ZlbWVudCIsICJ0b3BNb3ZlbWVudCIsICJib3R0b21Nb3ZlbWVudCIsICJhbmdsZU11bHRpcGxpZXIiLCAic3RhcnRBbmdsZSIsICJnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSIsICJzY2FsaW5nRmFjdG9yIiwgImdldFZhbHVlRm9yRGlzdGFuY2VGcm9tQ2VudGVyIiwgImRpc3RhbmNlIiwgInNjYWxlZERpc3RhbmNlIiwgInBvaW50TGFiZWwiLCAiZ2V0Q29udGV4dCIsICJkaXN0YW5jZUZyb21DZW50ZXIiLCAiZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlIiwgImdldEJhc2VQb3NpdGlvbiIsICJnZXRCYXNlVmFsdWUiLCAiZ2V0UG9pbnRMYWJlbFBvc2l0aW9uIiwgImRyYXdCYWNrZ3JvdW5kIiwgImJhY2tncm91bmRDb2xvciIsICJncmlkIiwgImRyYXdHcmlkIiwgImFuZ2xlTGluZXMiLCAiYm9yZGVyIiwgInBvc2l0aW9uIiwgImZvckVhY2giLCAidGljayIsICJjb250ZXh0IiwgIm9wdHNBdEluZGV4Qm9yZGVyIiwgImJvcmRlckRhc2giLCAiYm9yZGVyRGFzaE9mZnNldCIsICJkcmF3Qm9yZGVyIiwgImRyYXdMYWJlbHMiLCAidHJhbnNsYXRlIiwgInJvdGF0ZSIsICJzaG93TGFiZWxCYWNrZHJvcCIsICJtZWFzdXJlVGV4dCIsICJkcmF3VGl0bGUiLCAiYW5pbWF0ZSIsICJkZWZhdWx0Um91dGVzIiwgImRlc2NyaXB0b3JzIiwgIl9mYWxsYmFjayIsICJJTlRFUlZBTFMiLCAibWlsbGlzZWNvbmQiLCAiY29tbW9uIiwgInNlY29uZCIsICJtaW51dGUiLCAiaG91ciIsICJkYXkiLCAid2VlayIsICJtb250aCIsICJxdWFydGVyIiwgInllYXIiLCAiVU5JVFMiLCAia2V5cyIsICJzb3J0ZXIiLCAiYSIsICJpbnB1dCIsICJhZGFwdGVyIiwgIl9hZGFwdGVyIiwgInBhcnNlciIsICJpc29XZWVrZGF5IiwgIl9wYXJzZU9wdHMiLCAiaXNOdW1iZXIiLCAic3RhcnRPZiIsICJkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzIiwgIm1pblVuaXQiLCAiY2FwYWNpdHkiLCAiaWxlbiIsICJpbnRlcnZhbCIsICJNQVhfU0FGRV9JTlRFR0VSIiwgImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwgIm51bVRpY2tzIiwgImRpZmYiLCAiZGV0ZXJtaW5lTWFqb3JVbml0IiwgImFkZFRpY2siLCAidGltZSIsICJ0aW1lc3RhbXBzIiwgImxvIiwgImhpIiwgIl9sb29rdXAiLCAidGltZXN0YW1wIiwgInNldE1ham9yVGlja3MiLCAibWFqb3JVbml0IiwgImFkZCIsICJ0aWNrc0Zyb21UaW1lc3RhbXBzIiwgIlRpbWVTY2FsZSIsICJwcm9wcyIsICJfY2FjaGUiLCAiZGF0YSIsICJhbGwiLCAiX3VuaXQiLCAiX21ham9yVW5pdCIsICJfb2Zmc2V0cyIsICJfbm9ybWFsaXplZCIsICJzY2FsZU9wdHMiLCAiYWRhcHRlcnMiLCAiX2RhdGUiLCAiZGF0ZSIsICJtZXJnZUlmIiwgImRpc3BsYXlGb3JtYXRzIiwgImZvcm1hdHMiLCAibm9ybWFsaXplZCIsICJiZWZvcmVMYXlvdXQiLCAiX2FwcGx5Qm91bmRzIiwgIl9nZXRMYWJlbEJvdW5kcyIsICJzb3VyY2UiLCAiRGF0ZSIsICJub3ciLCAiZW5kT2YiLCAiYXJyIiwgImdldExhYmVsVGltZXN0YW1wcyIsICJORUdBVElWRV9JTkZJTklUWSIsICJ0aW1lT3B0cyIsICJfZ2VuZXJhdGUiLCAiX2ZpbHRlckJldHdlZW4iLCAiYXV0b1NraXAiLCAiX2dldExhYmVsQ2FwYWNpdHkiLCAiaW5pdE9mZnNldHMiLCAiYWZ0ZXJBdXRvU2tpcCIsICJvZmZzZXRBZnRlckF1dG9za2lwIiwgImdldERlY2ltYWxGb3JWYWx1ZSIsICJsaW1pdCIsICJtaW5vciIsICJ3ZWVrZGF5IiwgImhhc1dlZWtkYXkiLCAiRXJyb3IiLCAiZ2V0RGF0YVRpbWVzdGFtcHMiLCAic29ydCIsICJ0b29sdGlwRm9ybWF0IiwgImRhdGV0aW1lIiwgImZtdCIsICJfdGlja0Zvcm1hdEZ1bmN0aW9uIiwgImZvcm1hdHRlciIsICJtaW5vckZvcm1hdCIsICJtYWpvckZvcm1hdCIsICJvZmZzZXRzIiwgIl9nZXRMYWJlbFNpemUiLCAidGlja3NPcHRzIiwgInRpY2tMYWJlbFdpZHRoIiwgIm1heFJvdGF0aW9uIiwgImNvc1JvdGF0aW9uIiwgInNpblJvdGF0aW9uIiwgInRpY2tGb250U2l6ZSIsICJleGFtcGxlVGltZSIsICJleGFtcGxlTGFiZWwiLCAibWV0YXMiLCAiZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMiLCAiY29udHJvbGxlciIsICJnZXRBbGxQYXJzZWRWYWx1ZXMiLCAiY29uY2F0IiwgIm5vcm1hbGl6ZSIsICJfYXJyYXlVbmlxdWUiLCAiaW50ZXJwb2xhdGUiLCAidGFibGUiLCAidmFsIiwgInByZXZTb3VyY2UiLCAibmV4dFNvdXJjZSIsICJwcmV2VGFyZ2V0IiwgIm5leHRUYXJnZXQiLCAiX2xvb2t1cEJ5S2V5IiwgInNwYW4iLCAiVGltZVNlcmllc1NjYWxlIiwgIl90YWJsZSIsICJfbWluUG9zIiwgIl90YWJsZVJhbmdlIiwgIl9nZXRUaW1lc3RhbXBzRm9yVGFibGUiLCAiYnVpbGRMb29rdXBUYWJsZSIsICJwcmV2IiwgImN1cnIiLCAibmV4dCIsICJhcHAiLCAiaCIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgIm5hbWUiLCAiYXBwIiwgInBhcnNlIiwgImltcG9ydF9vYnNpZGlhbiIsICJyYW5rIiwgImVhc2UiLCAicGFyc2UiLCAic2libGluZ3MiXQp9Cg==
