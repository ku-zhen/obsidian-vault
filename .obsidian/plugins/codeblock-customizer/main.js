/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@simonwep/pickr/dist/pickr.min.js
var require_pickr_min = __commonJS({
  "node_modules/@simonwep/pickr/dist/pickr.min.js"(exports, module2) {
    !function(t, e) {
      "object" == typeof exports && "object" == typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.Pickr = e() : t.Pickr = e();
    }(self, function() {
      return (() => {
        "use strict";
        var t = { d: (e2, o2) => {
          for (var n2 in o2)
            t.o(o2, n2) && !t.o(e2, n2) && Object.defineProperty(e2, n2, { enumerable: true, get: o2[n2] });
        }, o: (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r: (t2) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
        } }, e = {};
        t.d(e, { default: () => L });
        var o = {};
        function n(t2, e2, o2, n2, i2 = {}) {
          e2 instanceof HTMLCollection || e2 instanceof NodeList ? e2 = Array.from(e2) : Array.isArray(e2) || (e2 = [e2]), Array.isArray(o2) || (o2 = [o2]);
          for (const s2 of e2)
            for (const e3 of o2)
              s2[t2](e3, n2, { capture: false, ...i2 });
          return Array.prototype.slice.call(arguments, 1);
        }
        t.r(o), t.d(o, { adjustableInputNumbers: () => p, createElementFromString: () => r, createFromTemplate: () => a, eventPath: () => l, off: () => s, on: () => i, resolveElement: () => c });
        const i = n.bind(null, "addEventListener"), s = n.bind(null, "removeEventListener");
        function r(t2) {
          const e2 = document.createElement("div");
          return e2.innerHTML = t2.trim(), e2.firstElementChild;
        }
        function a(t2) {
          const e2 = (t3, e3) => {
            const o3 = t3.getAttribute(e3);
            return t3.removeAttribute(e3), o3;
          }, o2 = (t3, n2 = {}) => {
            const i2 = e2(t3, ":obj"), s2 = e2(t3, ":ref"), r2 = i2 ? n2[i2] = {} : n2;
            s2 && (n2[s2] = t3);
            for (const n3 of Array.from(t3.children)) {
              const t4 = e2(n3, ":arr"), i3 = o2(n3, t4 ? {} : r2);
              t4 && (r2[t4] || (r2[t4] = [])).push(Object.keys(i3).length ? i3 : n3);
            }
            return n2;
          };
          return o2(r(t2));
        }
        function l(t2) {
          let e2 = t2.path || t2.composedPath && t2.composedPath();
          if (e2)
            return e2;
          let o2 = t2.target.parentElement;
          for (e2 = [t2.target, o2]; o2 = o2.parentElement; )
            e2.push(o2);
          return e2.push(document, window), e2;
        }
        function c(t2) {
          return t2 instanceof Element ? t2 : "string" == typeof t2 ? t2.split(/>>/g).reduce((t3, e2, o2, n2) => (t3 = t3.querySelector(e2), o2 < n2.length - 1 ? t3.shadowRoot : t3), document) : null;
        }
        function p(t2, e2 = (t3) => t3) {
          function o2(o3) {
            const n2 = [1e-3, 0.01, 0.1][Number(o3.shiftKey || 2 * o3.ctrlKey)] * (o3.deltaY < 0 ? 1 : -1);
            let i2 = 0, s2 = t2.selectionStart;
            t2.value = t2.value.replace(/[\d.]+/g, (t3, o4) => o4 <= s2 && o4 + t3.length >= s2 ? (s2 = o4, e2(Number(t3), n2, i2)) : (i2++, t3)), t2.focus(), t2.setSelectionRange(s2, s2), o3.preventDefault(), t2.dispatchEvent(new Event("input"));
          }
          i(t2, "focus", () => i(window, "wheel", o2, { passive: false })), i(t2, "blur", () => s(window, "wheel", o2));
        }
        const { min: u, max: h, floor: d, round: m } = Math;
        function f(t2, e2, o2) {
          e2 /= 100, o2 /= 100;
          const n2 = d(t2 = t2 / 360 * 6), i2 = t2 - n2, s2 = o2 * (1 - e2), r2 = o2 * (1 - i2 * e2), a2 = o2 * (1 - (1 - i2) * e2), l2 = n2 % 6;
          return [255 * [o2, r2, s2, s2, a2, o2][l2], 255 * [a2, o2, o2, r2, s2, s2][l2], 255 * [s2, s2, a2, o2, o2, r2][l2]];
        }
        function v(t2, e2, o2) {
          const n2 = (2 - (e2 /= 100)) * (o2 /= 100) / 2;
          return 0 !== n2 && (e2 = 1 === n2 ? 0 : n2 < 0.5 ? e2 * o2 / (2 * n2) : e2 * o2 / (2 - 2 * n2)), [t2, 100 * e2, 100 * n2];
        }
        function b(t2, e2, o2) {
          const n2 = u(t2 /= 255, e2 /= 255, o2 /= 255), i2 = h(t2, e2, o2), s2 = i2 - n2;
          let r2, a2;
          if (0 === s2)
            r2 = a2 = 0;
          else {
            a2 = s2 / i2;
            const n3 = ((i2 - t2) / 6 + s2 / 2) / s2, l2 = ((i2 - e2) / 6 + s2 / 2) / s2, c2 = ((i2 - o2) / 6 + s2 / 2) / s2;
            t2 === i2 ? r2 = c2 - l2 : e2 === i2 ? r2 = 1 / 3 + n3 - c2 : o2 === i2 && (r2 = 2 / 3 + l2 - n3), r2 < 0 ? r2 += 1 : r2 > 1 && (r2 -= 1);
          }
          return [360 * r2, 100 * a2, 100 * i2];
        }
        function y(t2, e2, o2, n2) {
          e2 /= 100, o2 /= 100;
          return [...b(255 * (1 - u(1, (t2 /= 100) * (1 - (n2 /= 100)) + n2)), 255 * (1 - u(1, e2 * (1 - n2) + n2)), 255 * (1 - u(1, o2 * (1 - n2) + n2)))];
        }
        function g(t2, e2, o2) {
          e2 /= 100;
          const n2 = 2 * (e2 *= (o2 /= 100) < 0.5 ? o2 : 1 - o2) / (o2 + e2) * 100, i2 = 100 * (o2 + e2);
          return [t2, isNaN(n2) ? 0 : n2, i2];
        }
        function _(t2) {
          return b(...t2.match(/.{2}/g).map((t3) => parseInt(t3, 16)));
        }
        function w(t2) {
          t2 = t2.match(/^[a-zA-Z]+$/) ? function(t3) {
            if ("black" === t3.toLowerCase())
              return "#000";
            const e3 = document.createElement("canvas").getContext("2d");
            return e3.fillStyle = t3, "#000" === e3.fillStyle ? null : e3.fillStyle;
          }(t2) : t2;
          const e2 = { cmyk: /^cmyk[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)/i, rgba: /^((rgba)|rgb)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i, hsla: /^((hsla)|hsl)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i, hsva: /^((hsva)|hsv)[\D]+([\d.]+)[\D]+([\d.]+)[\D]+([\d.]+)[\D]*?([\d.]+|$)/i, hexa: /^#?(([\dA-Fa-f]{3,4})|([\dA-Fa-f]{6})|([\dA-Fa-f]{8}))$/i }, o2 = (t3) => t3.map((t4) => /^(|\d+)\.\d+|\d+$/.test(t4) ? Number(t4) : void 0);
          let n2;
          t:
            for (const i2 in e2) {
              if (!(n2 = e2[i2].exec(t2)))
                continue;
              const s2 = (t3) => !!n2[2] == ("number" == typeof t3);
              switch (i2) {
                case "cmyk": {
                  const [, t3, e3, s3, r2] = o2(n2);
                  if (t3 > 100 || e3 > 100 || s3 > 100 || r2 > 100)
                    break t;
                  return { values: y(t3, e3, s3, r2), type: i2 };
                }
                case "rgba": {
                  const [, , , t3, e3, r2, a2] = o2(n2);
                  if (t3 > 255 || e3 > 255 || r2 > 255 || a2 < 0 || a2 > 1 || !s2(a2))
                    break t;
                  return { values: [...b(t3, e3, r2), a2], a: a2, type: i2 };
                }
                case "hexa": {
                  let [, t3] = n2;
                  4 !== t3.length && 3 !== t3.length || (t3 = t3.split("").map((t4) => t4 + t4).join(""));
                  const e3 = t3.substring(0, 6);
                  let o3 = t3.substring(6);
                  return o3 = o3 ? parseInt(o3, 16) / 255 : void 0, { values: [..._(e3), o3], a: o3, type: i2 };
                }
                case "hsla": {
                  const [, , , t3, e3, r2, a2] = o2(n2);
                  if (t3 > 360 || e3 > 100 || r2 > 100 || a2 < 0 || a2 > 1 || !s2(a2))
                    break t;
                  return { values: [...g(t3, e3, r2), a2], a: a2, type: i2 };
                }
                case "hsva": {
                  const [, , , t3, e3, r2, a2] = o2(n2);
                  if (t3 > 360 || e3 > 100 || r2 > 100 || a2 < 0 || a2 > 1 || !s2(a2))
                    break t;
                  return { values: [t3, e3, r2, a2], a: a2, type: i2 };
                }
              }
            }
          return { values: null, type: null };
        }
        function A(t2 = 0, e2 = 0, o2 = 0, n2 = 1) {
          const i2 = (t3, e3) => (o3 = -1) => e3(~o3 ? t3.map((t4) => Number(t4.toFixed(o3))) : t3), s2 = { h: t2, s: e2, v: o2, a: n2, toHSVA() {
            const t3 = [s2.h, s2.s, s2.v, s2.a];
            return t3.toString = i2(t3, (t4) => `hsva(${t4[0]}, ${t4[1]}%, ${t4[2]}%, ${s2.a})`), t3;
          }, toHSLA() {
            const t3 = [...v(s2.h, s2.s, s2.v), s2.a];
            return t3.toString = i2(t3, (t4) => `hsla(${t4[0]}, ${t4[1]}%, ${t4[2]}%, ${s2.a})`), t3;
          }, toRGBA() {
            const t3 = [...f(s2.h, s2.s, s2.v), s2.a];
            return t3.toString = i2(t3, (t4) => `rgba(${t4[0]}, ${t4[1]}, ${t4[2]}, ${s2.a})`), t3;
          }, toCMYK() {
            const t3 = function(t4, e3, o3) {
              const n3 = f(t4, e3, o3), i3 = n3[0] / 255, s3 = n3[1] / 255, r2 = n3[2] / 255, a2 = u(1 - i3, 1 - s3, 1 - r2);
              return [100 * (1 === a2 ? 0 : (1 - i3 - a2) / (1 - a2)), 100 * (1 === a2 ? 0 : (1 - s3 - a2) / (1 - a2)), 100 * (1 === a2 ? 0 : (1 - r2 - a2) / (1 - a2)), 100 * a2];
            }(s2.h, s2.s, s2.v);
            return t3.toString = i2(t3, (t4) => `cmyk(${t4[0]}%, ${t4[1]}%, ${t4[2]}%, ${t4[3]}%)`), t3;
          }, toHEXA() {
            const t3 = function(t4, e4, o3) {
              return f(t4, e4, o3).map((t5) => m(t5).toString(16).padStart(2, "0"));
            }(s2.h, s2.s, s2.v), e3 = s2.a >= 1 ? "" : Number((255 * s2.a).toFixed(0)).toString(16).toUpperCase().padStart(2, "0");
            return e3 && t3.push(e3), t3.toString = () => `#${t3.join("").toUpperCase()}`, t3;
          }, clone: () => A(s2.h, s2.s, s2.v, s2.a) };
          return s2;
        }
        const C = (t2) => Math.max(Math.min(t2, 1), 0);
        function $(t2) {
          const e2 = { options: Object.assign({ lock: null, onchange: () => 0, onstop: () => 0 }, t2), _keyboard(t3) {
            const { options: o3 } = e2, { type: n3, key: i2 } = t3;
            if (document.activeElement === o3.wrapper) {
              const { lock: o4 } = e2.options, s2 = "ArrowUp" === i2, r3 = "ArrowRight" === i2, a2 = "ArrowDown" === i2, l2 = "ArrowLeft" === i2;
              if ("keydown" === n3 && (s2 || r3 || a2 || l2)) {
                let n4 = 0, i3 = 0;
                "v" === o4 ? n4 = s2 || r3 ? 1 : -1 : "h" === o4 ? n4 = s2 || r3 ? -1 : 1 : (i3 = s2 ? -1 : a2 ? 1 : 0, n4 = l2 ? -1 : r3 ? 1 : 0), e2.update(C(e2.cache.x + 0.01 * n4), C(e2.cache.y + 0.01 * i3)), t3.preventDefault();
              } else
                i2.startsWith("Arrow") && (e2.options.onstop(), t3.preventDefault());
            }
          }, _tapstart(t3) {
            i(document, ["mouseup", "touchend", "touchcancel"], e2._tapstop), i(document, ["mousemove", "touchmove"], e2._tapmove), t3.cancelable && t3.preventDefault(), e2._tapmove(t3);
          }, _tapmove(t3) {
            const { options: o3, cache: n3 } = e2, { lock: i2, element: s2, wrapper: r3 } = o3, a2 = r3.getBoundingClientRect();
            let l2 = 0, c2 = 0;
            if (t3) {
              const e3 = t3 && t3.touches && t3.touches[0];
              l2 = t3 ? (e3 || t3).clientX : 0, c2 = t3 ? (e3 || t3).clientY : 0, l2 < a2.left ? l2 = a2.left : l2 > a2.left + a2.width && (l2 = a2.left + a2.width), c2 < a2.top ? c2 = a2.top : c2 > a2.top + a2.height && (c2 = a2.top + a2.height), l2 -= a2.left, c2 -= a2.top;
            } else
              n3 && (l2 = n3.x * a2.width, c2 = n3.y * a2.height);
            "h" !== i2 && (s2.style.left = `calc(${l2 / a2.width * 100}% - ${s2.offsetWidth / 2}px)`), "v" !== i2 && (s2.style.top = `calc(${c2 / a2.height * 100}% - ${s2.offsetHeight / 2}px)`), e2.cache = { x: l2 / a2.width, y: c2 / a2.height };
            const p2 = C(l2 / a2.width), u2 = C(c2 / a2.height);
            switch (i2) {
              case "v":
                return o3.onchange(p2);
              case "h":
                return o3.onchange(u2);
              default:
                return o3.onchange(p2, u2);
            }
          }, _tapstop() {
            e2.options.onstop(), s(document, ["mouseup", "touchend", "touchcancel"], e2._tapstop), s(document, ["mousemove", "touchmove"], e2._tapmove);
          }, trigger() {
            e2._tapmove();
          }, update(t3 = 0, o3 = 0) {
            const { left: n3, top: i2, width: s2, height: r3 } = e2.options.wrapper.getBoundingClientRect();
            "h" === e2.options.lock && (o3 = t3), e2._tapmove({ clientX: n3 + s2 * t3, clientY: i2 + r3 * o3 });
          }, destroy() {
            const { options: t3, _tapstart: o3, _keyboard: n3 } = e2;
            s(document, ["keydown", "keyup"], n3), s([t3.wrapper, t3.element], "mousedown", o3), s([t3.wrapper, t3.element], "touchstart", o3, { passive: false });
          } }, { options: o2, _tapstart: n2, _keyboard: r2 } = e2;
          return i([o2.wrapper, o2.element], "mousedown", n2), i([o2.wrapper, o2.element], "touchstart", n2, { passive: false }), i(document, ["keydown", "keyup"], r2), e2;
        }
        function k(t2 = {}) {
          t2 = Object.assign({ onchange: () => 0, className: "", elements: [] }, t2);
          const e2 = i(t2.elements, "click", (e3) => {
            t2.elements.forEach((o2) => o2.classList[e3.target === o2 ? "add" : "remove"](t2.className)), t2.onchange(e3), e3.stopPropagation();
          });
          return { destroy: () => s(...e2) };
        }
        const S = { variantFlipOrder: { start: "sme", middle: "mse", end: "ems" }, positionFlipOrder: { top: "tbrl", right: "rltb", bottom: "btrl", left: "lrbt" }, position: "bottom", margin: 8 }, O = (t2, e2, o2) => {
          const { container: n2, margin: i2, position: s2, variantFlipOrder: r2, positionFlipOrder: a2 } = { container: document.documentElement.getBoundingClientRect(), ...S, ...o2 }, { left: l2, top: c2 } = e2.style;
          e2.style.left = "0", e2.style.top = "0";
          const p2 = t2.getBoundingClientRect(), u2 = e2.getBoundingClientRect(), h2 = { t: p2.top - u2.height - i2, b: p2.bottom + i2, r: p2.right + i2, l: p2.left - u2.width - i2 }, d2 = { vs: p2.left, vm: p2.left + p2.width / 2 + -u2.width / 2, ve: p2.left + p2.width - u2.width, hs: p2.top, hm: p2.bottom - p2.height / 2 - u2.height / 2, he: p2.bottom - u2.height }, [m2, f2 = "middle"] = s2.split("-"), v2 = a2[m2], b2 = r2[f2], { top: y2, left: g2, bottom: _2, right: w2 } = n2;
          for (const t3 of v2) {
            const o3 = "t" === t3 || "b" === t3, n3 = h2[t3], [i3, s3] = o3 ? ["top", "left"] : ["left", "top"], [r3, a3] = o3 ? [u2.height, u2.width] : [u2.width, u2.height], [l3, c3] = o3 ? [_2, w2] : [w2, _2], [p3, m3] = o3 ? [y2, g2] : [g2, y2];
            if (!(n3 < p3 || n3 + r3 > l3))
              for (const r4 of b2) {
                const l4 = d2[(o3 ? "v" : "h") + r4];
                if (!(l4 < m3 || l4 + a3 > c3))
                  return e2.style[s3] = l4 - u2[s3] + "px", e2.style[i3] = n3 - u2[i3] + "px", t3 + r4;
              }
          }
          return e2.style.left = l2, e2.style.top = c2, null;
        };
        function E(t2, e2, o2) {
          return e2 in t2 ? Object.defineProperty(t2, e2, { value: o2, enumerable: true, configurable: true, writable: true }) : t2[e2] = o2, t2;
        }
        class L {
          constructor(t2) {
            E(this, "_initializingActive", true), E(this, "_recalc", true), E(this, "_nanopop", null), E(this, "_root", null), E(this, "_color", A()), E(this, "_lastColor", A()), E(this, "_swatchColors", []), E(this, "_setupAnimationFrame", null), E(this, "_eventListener", { init: [], save: [], hide: [], show: [], clear: [], change: [], changestop: [], cancel: [], swatchselect: [] }), this.options = t2 = Object.assign({ ...L.DEFAULT_OPTIONS }, t2);
            const { swatches: e2, components: o2, theme: n2, sliders: i2, lockOpacity: s2, padding: r2 } = t2;
            ["nano", "monolith"].includes(n2) && !i2 && (t2.sliders = "h"), o2.interaction || (o2.interaction = {});
            const { preview: a2, opacity: l2, hue: c2, palette: p2 } = o2;
            o2.opacity = !s2 && l2, o2.palette = p2 || a2 || l2 || c2, this._preBuild(), this._buildComponents(), this._bindEvents(), this._finalBuild(), e2 && e2.length && e2.forEach((t3) => this.addSwatch(t3));
            const { button: u2, app: h2 } = this._root;
            this._nanopop = ((t3, e3, o3) => {
              const n3 = "object" != typeof t3 || t3 instanceof HTMLElement ? { reference: t3, popper: e3, ...o3 } : t3;
              return { update(t4 = n3) {
                const { reference: e4, popper: o4 } = Object.assign(n3, t4);
                if (!o4 || !e4)
                  throw new Error("Popper- or reference-element missing.");
                return O(e4, o4, n3);
              } };
            })(u2, h2, { margin: r2 }), u2.setAttribute("role", "button"), u2.setAttribute("aria-label", this._t("btn:toggle"));
            const d2 = this;
            this._setupAnimationFrame = requestAnimationFrame(function e3() {
              if (!h2.offsetWidth)
                return requestAnimationFrame(e3);
              d2.setColor(t2.default), d2._rePositioningPicker(), t2.defaultRepresentation && (d2._representation = t2.defaultRepresentation, d2.setColorRepresentation(d2._representation)), t2.showAlways && d2.show(), d2._initializingActive = false, d2._emit("init");
            });
          }
          _preBuild() {
            const { options: t2 } = this;
            for (const e2 of ["el", "container"])
              t2[e2] = c(t2[e2]);
            this._root = ((t3) => {
              const { components: e2, useAsButton: o2, inline: n2, appClass: i2, theme: s2, lockOpacity: r2 } = t3.options, l2 = (t4) => t4 ? "" : 'style="display:none" hidden', c2 = (e3) => t3._t(e3), p2 = a(`
      <div :ref="root" class="pickr">

        ${o2 ? "" : '<button type="button" :ref="button" class="pcr-button"></button>'}

        <div :ref="app" class="pcr-app ${i2 || ""}" data-theme="${s2}" ${n2 ? 'style="position: unset"' : ""} aria-label="${c2("ui:dialog")}" role="window">
          <div class="pcr-selection" ${l2(e2.palette)}>
            <div :obj="preview" class="pcr-color-preview" ${l2(e2.preview)}>
              <button type="button" :ref="lastColor" class="pcr-last-color" aria-label="${c2("btn:last-color")}"></button>
              <div :ref="currentColor" class="pcr-current-color"></div>
            </div>

            <div :obj="palette" class="pcr-color-palette">
              <div :ref="picker" class="pcr-picker"></div>
              <div :ref="palette" class="pcr-palette" tabindex="0" aria-label="${c2("aria:palette")}" role="listbox"></div>
            </div>

            <div :obj="hue" class="pcr-color-chooser" ${l2(e2.hue)}>
              <div :ref="picker" class="pcr-picker"></div>
              <div :ref="slider" class="pcr-hue pcr-slider" tabindex="0" aria-label="${c2("aria:hue")}" role="slider"></div>
            </div>

            <div :obj="opacity" class="pcr-color-opacity" ${l2(e2.opacity)}>
              <div :ref="picker" class="pcr-picker"></div>
              <div :ref="slider" class="pcr-opacity pcr-slider" tabindex="0" aria-label="${c2("aria:opacity")}" role="slider"></div>
            </div>
          </div>

          <div class="pcr-swatches ${e2.palette ? "" : "pcr-last"}" :ref="swatches"></div>

          <div :obj="interaction" class="pcr-interaction" ${l2(Object.keys(e2.interaction).length)}>
            <input :ref="result" class="pcr-result" type="text" spellcheck="false" ${l2(e2.interaction.input)} aria-label="${c2("aria:input")}">

            <input :arr="options" class="pcr-type" data-type="HEXA" value="${r2 ? "HEX" : "HEXA"}" type="button" ${l2(e2.interaction.hex)}>
            <input :arr="options" class="pcr-type" data-type="RGBA" value="${r2 ? "RGB" : "RGBA"}" type="button" ${l2(e2.interaction.rgba)}>
            <input :arr="options" class="pcr-type" data-type="HSLA" value="${r2 ? "HSL" : "HSLA"}" type="button" ${l2(e2.interaction.hsla)}>
            <input :arr="options" class="pcr-type" data-type="HSVA" value="${r2 ? "HSV" : "HSVA"}" type="button" ${l2(e2.interaction.hsva)}>
            <input :arr="options" class="pcr-type" data-type="CMYK" value="CMYK" type="button" ${l2(e2.interaction.cmyk)}>

            <input :ref="save" class="pcr-save" value="${c2("btn:save")}" type="button" ${l2(e2.interaction.save)} aria-label="${c2("aria:btn:save")}">
            <input :ref="cancel" class="pcr-cancel" value="${c2("btn:cancel")}" type="button" ${l2(e2.interaction.cancel)} aria-label="${c2("aria:btn:cancel")}">
            <input :ref="clear" class="pcr-clear" value="${c2("btn:clear")}" type="button" ${l2(e2.interaction.clear)} aria-label="${c2("aria:btn:clear")}">
          </div>
        </div>
      </div>
    `), u2 = p2.interaction;
              return u2.options.find((t4) => !t4.hidden && !t4.classList.add("active")), u2.type = () => u2.options.find((t4) => t4.classList.contains("active")), p2;
            })(this), t2.useAsButton && (this._root.button = t2.el), t2.container.appendChild(this._root.root);
          }
          _finalBuild() {
            const t2 = this.options, e2 = this._root;
            if (t2.container.removeChild(e2.root), t2.inline) {
              const o2 = t2.el.parentElement;
              t2.el.nextSibling ? o2.insertBefore(e2.app, t2.el.nextSibling) : o2.appendChild(e2.app);
            } else
              t2.container.appendChild(e2.app);
            t2.useAsButton ? t2.inline && t2.el.remove() : t2.el.parentNode.replaceChild(e2.root, t2.el), t2.disabled && this.disable(), t2.comparison || (e2.button.style.transition = "none", t2.useAsButton || (e2.preview.lastColor.style.transition = "none")), this.hide();
          }
          _buildComponents() {
            const t2 = this, e2 = this.options.components, o2 = (t2.options.sliders || "v").repeat(2), [n2, i2] = o2.match(/^[vh]+$/g) ? o2 : [], s2 = () => this._color || (this._color = this._lastColor.clone()), r2 = { palette: $({ element: t2._root.palette.picker, wrapper: t2._root.palette.palette, onstop: () => t2._emit("changestop", "slider", t2), onchange(o3, n3) {
              if (!e2.palette)
                return;
              const i3 = s2(), { _root: r3, options: a2 } = t2, { lastColor: l2, currentColor: c2 } = r3.preview;
              t2._recalc && (i3.s = 100 * o3, i3.v = 100 - 100 * n3, i3.v < 0 && (i3.v = 0), t2._updateOutput("slider"));
              const p2 = i3.toRGBA().toString(0);
              this.element.style.background = p2, this.wrapper.style.background = `
                        linear-gradient(to top, rgba(0, 0, 0, ${i3.a}), transparent),
                        linear-gradient(to left, hsla(${i3.h}, 100%, 50%, ${i3.a}), rgba(255, 255, 255, ${i3.a}))
                    `, a2.comparison ? a2.useAsButton || t2._lastColor || l2.style.setProperty("--pcr-color", p2) : (r3.button.style.setProperty("--pcr-color", p2), r3.button.classList.remove("clear"));
              const u2 = i3.toHEXA().toString();
              for (const { el: e3, color: o4 } of t2._swatchColors)
                e3.classList[u2 === o4.toHEXA().toString() ? "add" : "remove"]("pcr-active");
              c2.style.setProperty("--pcr-color", p2);
            } }), hue: $({ lock: "v" === i2 ? "h" : "v", element: t2._root.hue.picker, wrapper: t2._root.hue.slider, onstop: () => t2._emit("changestop", "slider", t2), onchange(o3) {
              if (!e2.hue || !e2.palette)
                return;
              const n3 = s2();
              t2._recalc && (n3.h = 360 * o3), this.element.style.backgroundColor = `hsl(${n3.h}, 100%, 50%)`, r2.palette.trigger();
            } }), opacity: $({ lock: "v" === n2 ? "h" : "v", element: t2._root.opacity.picker, wrapper: t2._root.opacity.slider, onstop: () => t2._emit("changestop", "slider", t2), onchange(o3) {
              if (!e2.opacity || !e2.palette)
                return;
              const n3 = s2();
              t2._recalc && (n3.a = Math.round(100 * o3) / 100), this.element.style.background = `rgba(0, 0, 0, ${n3.a})`, r2.palette.trigger();
            } }), selectable: k({ elements: t2._root.interaction.options, className: "active", onchange(e3) {
              t2._representation = e3.target.getAttribute("data-type").toUpperCase(), t2._recalc && t2._updateOutput("swatch");
            } }) };
            this._components = r2;
          }
          _bindEvents() {
            const { _root: t2, options: e2 } = this, o2 = [i(t2.interaction.clear, "click", () => this._clearColor()), i([t2.interaction.cancel, t2.preview.lastColor], "click", () => {
              this.setHSVA(...(this._lastColor || this._color).toHSVA(), true), this._emit("cancel");
            }), i(t2.interaction.save, "click", () => {
              !this.applyColor() && !e2.showAlways && this.hide();
            }), i(t2.interaction.result, ["keyup", "input"], (t3) => {
              this.setColor(t3.target.value, true) && !this._initializingActive && (this._emit("change", this._color, "input", this), this._emit("changestop", "input", this)), t3.stopImmediatePropagation();
            }), i(t2.interaction.result, ["focus", "blur"], (t3) => {
              this._recalc = "blur" === t3.type, this._recalc && this._updateOutput(null);
            }), i([t2.palette.palette, t2.palette.picker, t2.hue.slider, t2.hue.picker, t2.opacity.slider, t2.opacity.picker], ["mousedown", "touchstart"], () => this._recalc = true, { passive: true })];
            if (!e2.showAlways) {
              const n2 = e2.closeWithKey;
              o2.push(i(t2.button, "click", () => this.isOpen() ? this.hide() : this.show()), i(document, "keyup", (t3) => this.isOpen() && (t3.key === n2 || t3.code === n2) && this.hide()), i(document, ["touchstart", "mousedown"], (e3) => {
                this.isOpen() && !l(e3).some((e4) => e4 === t2.app || e4 === t2.button) && this.hide();
              }, { capture: true }));
            }
            if (e2.adjustableNumbers) {
              const e3 = { rgba: [255, 255, 255, 1], hsva: [360, 100, 100, 1], hsla: [360, 100, 100, 1], cmyk: [100, 100, 100, 100] };
              p(t2.interaction.result, (t3, o3, n2) => {
                const i2 = e3[this.getColorRepresentation().toLowerCase()];
                if (i2) {
                  const e4 = i2[n2], s2 = t3 + (e4 >= 100 ? 1e3 * o3 : o3);
                  return s2 <= 0 ? 0 : Number((s2 < e4 ? s2 : e4).toPrecision(3));
                }
                return t3;
              });
            }
            if (e2.autoReposition && !e2.inline) {
              let t3 = null;
              const n2 = this;
              o2.push(i(window, ["scroll", "resize"], () => {
                n2.isOpen() && (e2.closeOnScroll && n2.hide(), null === t3 ? (t3 = setTimeout(() => t3 = null, 100), requestAnimationFrame(function e3() {
                  n2._rePositioningPicker(), null !== t3 && requestAnimationFrame(e3);
                })) : (clearTimeout(t3), t3 = setTimeout(() => t3 = null, 100)));
              }, { capture: true }));
            }
            this._eventBindings = o2;
          }
          _rePositioningPicker() {
            const { options: t2 } = this;
            if (!t2.inline) {
              if (!this._nanopop.update({ container: document.body.getBoundingClientRect(), position: t2.position })) {
                const t3 = this._root.app, e2 = t3.getBoundingClientRect();
                t3.style.top = (window.innerHeight - e2.height) / 2 + "px", t3.style.left = (window.innerWidth - e2.width) / 2 + "px";
              }
            }
          }
          _updateOutput(t2) {
            const { _root: e2, _color: o2, options: n2 } = this;
            if (e2.interaction.type()) {
              const t3 = `to${e2.interaction.type().getAttribute("data-type")}`;
              e2.interaction.result.value = "function" == typeof o2[t3] ? o2[t3]().toString(n2.outputPrecision) : "";
            }
            !this._initializingActive && this._recalc && this._emit("change", o2, t2, this);
          }
          _clearColor(t2 = false) {
            const { _root: e2, options: o2 } = this;
            o2.useAsButton || e2.button.style.setProperty("--pcr-color", "rgba(0, 0, 0, 0.15)"), e2.button.classList.add("clear"), o2.showAlways || this.hide(), this._lastColor = null, this._initializingActive || t2 || (this._emit("save", null), this._emit("clear"));
          }
          _parseLocalColor(t2) {
            const { values: e2, type: o2, a: n2 } = w(t2), { lockOpacity: i2 } = this.options, s2 = void 0 !== n2 && 1 !== n2;
            return e2 && 3 === e2.length && (e2[3] = void 0), { values: !e2 || i2 && s2 ? null : e2, type: o2 };
          }
          _t(t2) {
            return this.options.i18n[t2] || L.I18N_DEFAULTS[t2];
          }
          _emit(t2, ...e2) {
            this._eventListener[t2].forEach((t3) => t3(...e2, this));
          }
          on(t2, e2) {
            return this._eventListener[t2].push(e2), this;
          }
          off(t2, e2) {
            const o2 = this._eventListener[t2] || [], n2 = o2.indexOf(e2);
            return ~n2 && o2.splice(n2, 1), this;
          }
          addSwatch(t2) {
            const { values: e2 } = this._parseLocalColor(t2);
            if (e2) {
              const { _swatchColors: t3, _root: o2 } = this, n2 = A(...e2), s2 = r(`<button type="button" style="--pcr-color: ${n2.toRGBA().toString(0)}" aria-label="${this._t("btn:swatch")}"/>`);
              return o2.swatches.appendChild(s2), t3.push({ el: s2, color: n2 }), this._eventBindings.push(i(s2, "click", () => {
                this.setHSVA(...n2.toHSVA(), true), this._emit("swatchselect", n2), this._emit("change", n2, "swatch", this);
              })), true;
            }
            return false;
          }
          removeSwatch(t2) {
            const e2 = this._swatchColors[t2];
            if (e2) {
              const { el: o2 } = e2;
              return this._root.swatches.removeChild(o2), this._swatchColors.splice(t2, 1), true;
            }
            return false;
          }
          applyColor(t2 = false) {
            const { preview: e2, button: o2 } = this._root, n2 = this._color.toRGBA().toString(0);
            return e2.lastColor.style.setProperty("--pcr-color", n2), this.options.useAsButton || o2.style.setProperty("--pcr-color", n2), o2.classList.remove("clear"), this._lastColor = this._color.clone(), this._initializingActive || t2 || this._emit("save", this._color), this;
          }
          destroy() {
            cancelAnimationFrame(this._setupAnimationFrame), this._eventBindings.forEach((t2) => s(...t2)), Object.keys(this._components).forEach((t2) => this._components[t2].destroy());
          }
          destroyAndRemove() {
            this.destroy();
            const { root: t2, app: e2 } = this._root;
            t2.parentElement && t2.parentElement.removeChild(t2), e2.parentElement.removeChild(e2), Object.keys(this).forEach((t3) => this[t3] = null);
          }
          hide() {
            return !!this.isOpen() && (this._root.app.classList.remove("visible"), this._emit("hide"), true);
          }
          show() {
            return !this.options.disabled && !this.isOpen() && (this._root.app.classList.add("visible"), this._rePositioningPicker(), this._emit("show", this._color), this);
          }
          isOpen() {
            return this._root.app.classList.contains("visible");
          }
          setHSVA(t2 = 360, e2 = 0, o2 = 0, n2 = 1, i2 = false) {
            const s2 = this._recalc;
            if (this._recalc = false, t2 < 0 || t2 > 360 || e2 < 0 || e2 > 100 || o2 < 0 || o2 > 100 || n2 < 0 || n2 > 1)
              return false;
            this._color = A(t2, e2, o2, n2);
            const { hue: r2, opacity: a2, palette: l2 } = this._components;
            return r2.update(t2 / 360), a2.update(n2), l2.update(e2 / 100, 1 - o2 / 100), i2 || this.applyColor(), s2 && this._updateOutput(), this._recalc = s2, true;
          }
          setColor(t2, e2 = false) {
            if (null === t2)
              return this._clearColor(e2), true;
            const { values: o2, type: n2 } = this._parseLocalColor(t2);
            if (o2) {
              const t3 = n2.toUpperCase(), { options: i2 } = this._root.interaction, s2 = i2.find((e3) => e3.getAttribute("data-type") === t3);
              if (s2 && !s2.hidden)
                for (const t4 of i2)
                  t4.classList[t4 === s2 ? "add" : "remove"]("active");
              return !!this.setHSVA(...o2, e2) && this.setColorRepresentation(t3);
            }
            return false;
          }
          setColorRepresentation(t2) {
            return t2 = t2.toUpperCase(), !!this._root.interaction.options.find((e2) => e2.getAttribute("data-type").startsWith(t2) && !e2.click());
          }
          getColorRepresentation() {
            return this._representation;
          }
          getColor() {
            return this._color;
          }
          getSelectedColor() {
            return this._lastColor;
          }
          getRoot() {
            return this._root;
          }
          disable() {
            return this.hide(), this.options.disabled = true, this._root.button.classList.add("disabled"), this;
          }
          enable() {
            return this.options.disabled = false, this._root.button.classList.remove("disabled"), this;
          }
        }
        return E(L, "utils", o), E(L, "version", "1.8.2"), E(L, "I18N_DEFAULTS", { "ui:dialog": "color picker dialog", "btn:toggle": "toggle color picker dialog", "btn:swatch": "color swatch", "btn:last-color": "use previous color", "btn:save": "Save", "btn:cancel": "Cancel", "btn:clear": "Clear", "aria:btn:save": "save and close", "aria:btn:cancel": "cancel and close", "aria:btn:clear": "clear and close", "aria:input": "color input field", "aria:palette": "color selection area", "aria:hue": "hue selection slider", "aria:opacity": "selection slider" }), E(L, "DEFAULT_OPTIONS", { appClass: null, theme: "classic", useAsButton: false, padding: 8, disabled: false, comparison: true, closeOnScroll: false, outputPrecision: 0, lockOpacity: false, autoReposition: true, container: "body", components: { interaction: {} }, i18n: {}, swatches: null, inline: false, sliders: null, default: "#42445a", defaultRepresentation: null, position: "bottom-middle", adjustableNumbers: true, showAlways: false, closeWithKey: "Escape" }), E(L, "create", (t2) => new L(t2)), e = e.default;
      })();
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeBlockCustomizerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/Settings.ts
var D_ACTIVE_CODEBLOCK_LINE_COLOR = "#073642";
var D_ACTIVE_LINE_COLOR = "#468eeb33";
var D_BACKGROUND_COLOR = "#002B36";
var D_HIGHLIGHT_COLOR = "#054b5c";
var D_HEADER_COLOR = "#0a4554";
var D_HEADER_TEXT_COLOR = "#DADADA";
var D_HEADER_LINE_COLOR = "#46cced";
var D_GUTTER_TEXT_COLOR = "#6c6c6c";
var D_GUTTER_BACKGROUND_COLOR = "#073642";
var D_LANG_COLOR = "#000000";
var D_LANG_BACKGROUND_COLOR = "#008080";
var L_ACTIVE_CODEBLOCK_LINE_COLOR = "#EDE8D6";
var L_ACTIVE_LINE_COLOR = "#60460633";
var L_BACKGROUND_COLOR = "#FCF6E4";
var L_HIGHLIGHT_COLOR = "#E9DFBA";
var L_HEADER_COLOR = "#D5CCB4";
var L_HEADER_TEXT_COLOR = "#866704";
var L_HEADER_LINE_COLOR = "#EDD489";
var L_GUTTER_TEXT_COLOR = "#6c6c6c";
var L_GUTTER_BACKGROUND_COLOR = "#EDE8D6";
var L_LANG_COLOR = "#C25F30";
var L_LANG_BACKGROUND_COLOR = "#B8B5AA";
var DEFAULT_SETTINGS = {
  bEnableLineNumbers: true,
  bActiveCodeblockLineHighlight: true,
  bActiveLineHighlight: true,
  bGutterHighlight: false,
  ExcludeLangs: "dataview",
  activeCodeBlockLineColor: D_ACTIVE_CODEBLOCK_LINE_COLOR,
  activeLineColor: D_ACTIVE_LINE_COLOR,
  backgroundColor: D_BACKGROUND_COLOR,
  highlightColor: D_HIGHLIGHT_COLOR,
  bDisplayCodeBlockLanguage: true,
  gutterTextColor: D_GUTTER_TEXT_COLOR,
  gutterBackgroundColor: D_GUTTER_BACKGROUND_COLOR,
  SelectedTheme: "Dark Theme",
  header: {
    //kell eZ?????????????
    bHeaderBold: false,
    bHeaderItalic: false,
    bCodeblockLangBold: true,
    bCodeblockLangItalic: true,
    bAlwaysDisplayCodeblockLang: false,
    color: D_HEADER_COLOR,
    textColor: D_HEADER_TEXT_COLOR,
    lineColor: D_HEADER_LINE_COLOR,
    codeBlockLangColor: D_LANG_COLOR,
    codeBlockLangBackgroundColor: D_LANG_BACKGROUND_COLOR
  },
  colorThemes: [
    {
      name: "Dark Theme",
      colors: {
        activeCodeBlockLineColor: D_ACTIVE_CODEBLOCK_LINE_COLOR,
        activeLineColor: D_ACTIVE_LINE_COLOR,
        backgroundColor: D_BACKGROUND_COLOR,
        highlightColor: D_HIGHLIGHT_COLOR,
        gutterTextColor: D_GUTTER_TEXT_COLOR,
        gutterBackgroundColor: D_GUTTER_BACKGROUND_COLOR,
        header: {
          bHeaderBold: false,
          bHeaderItalic: false,
          bCodeblockLangBold: true,
          bCodeblockLangItalic: true,
          bAlwaysDisplayCodeblockLang: false,
          color: D_HEADER_COLOR,
          textColor: D_HEADER_TEXT_COLOR,
          lineColor: D_HEADER_LINE_COLOR,
          codeBlockLangColor: D_LANG_COLOR,
          codeBlockLangBackgroundColor: D_LANG_BACKGROUND_COLOR
        }
      }
    },
    {
      name: "Light Theme",
      colors: {
        activeCodeBlockLineColor: L_ACTIVE_CODEBLOCK_LINE_COLOR,
        activeLineColor: L_ACTIVE_LINE_COLOR,
        backgroundColor: L_BACKGROUND_COLOR,
        highlightColor: L_HIGHLIGHT_COLOR,
        gutterTextColor: L_GUTTER_TEXT_COLOR,
        gutterBackgroundColor: L_GUTTER_BACKGROUND_COLOR,
        header: {
          bHeaderBold: false,
          bHeaderItalic: false,
          bCodeblockLangBold: true,
          bCodeblockLangItalic: true,
          bAlwaysDisplayCodeblockLang: false,
          color: L_HEADER_COLOR,
          textColor: L_HEADER_TEXT_COLOR,
          lineColor: L_HEADER_LINE_COLOR,
          codeBlockLangColor: L_LANG_COLOR,
          codeBlockLangBackgroundColor: L_LANG_BACKGROUND_COLOR
        }
      }
    }
  ]
};

// src/ActiveLineHighlight.ts
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var import_language = require("@codemirror/language");

// src/Utils.ts
function splitAndTrimString(str) {
  if (!str) {
    return [];
  }
  if (!str.includes(",")) {
    return [str];
  }
  return str.split(",").map((s) => s.trim());
}
function searchString(str, searchTerm) {
  str = str.toLowerCase();
  searchTerm = searchTerm.toLowerCase();
  if (searchTerm === "file:") {
    if (str.includes(searchTerm)) {
      const startIndex = str.indexOf(searchTerm) + searchTerm.length;
      let result = "";
      if (str[startIndex] === '"') {
        const endIndex = str.indexOf('"', startIndex + 1);
        if (endIndex !== -1) {
          result = str.substring(startIndex + 1, endIndex);
        } else {
          result = str.substring(startIndex + 1);
        }
      } else {
        const endIndex = str.indexOf(" ", startIndex);
        if (endIndex !== -1) {
          result = str.substring(startIndex, endIndex);
        } else {
          result = str.substring(startIndex);
        }
      }
      return result.trim();
    }
  } else if (searchTerm === "```") {
    if (str.startsWith(searchTerm)) {
      const startIndex = searchTerm.length;
      const endIndex = str.indexOf(" ", startIndex);
      let word = "";
      if (endIndex !== -1) {
        word = str.substring(startIndex, endIndex);
      } else {
        word = str.substring(startIndex);
      }
      if (!word.includes(":")) {
        if (word === "fold")
          return null;
        else
          return word;
      }
    }
  } else if (searchTerm === "fold") {
    if (str.includes(" fold ")) {
      return true;
    }
    const index = str.indexOf(searchTerm);
    if (index !== -1 && index === str.length - searchTerm.length && str[index - 1] === " ") {
      return true;
    }
    if (str.includes("```fold ")) {
      return true;
    }
    if (str.includes("```fold") && str.indexOf("```fold") + "```fold".length === str.length) {
      return true;
    }
    return false;
  } else {
    if (str.includes(searchTerm)) {
      const startIndex = str.indexOf(searchTerm) + searchTerm.length;
      const endIndex = str.indexOf(" ", startIndex);
      if (endIndex !== -1) {
        return str.substring(startIndex, endIndex).trim();
      } else {
        return str.substring(startIndex).trim();
      }
    }
  }
  return null;
}
function getHighlightedLines(params) {
  if (!params) {
    return [];
  }
  const trimmedParams = params.trim();
  const lines = trimmedParams.split(",");
  return lines.map((line) => {
    if (line.includes("-")) {
      const range = line.split("-");
      const start = parseInt(range[0], 10);
      const end = parseInt(range[1], 10);
      return Array.from({ length: end - start + 1 }, (_, i) => start + i);
    }
    return parseInt(line, 10);
  }).flat();
}
function isExcluded(lineText, excludeLangs) {
  const codeBlockLang = searchString(lineText, "```");
  const Langs = splitAndTrimString(excludeLangs);
  if (codeBlockLang && Langs.includes(codeBlockLang.toLowerCase())) {
    return true;
  }
  return false;
}
function getLanguageName(code) {
  const Languages = {
    "none": "Plain text",
    "plain": "Plain text",
    "plaintext": "Plain text",
    "text": "Plain text",
    "txt": "Plain text",
    "html": "HTML",
    "xml": "XML",
    "svg": "SVG",
    "mathml": "MathML",
    "ssml": "SSML",
    "rss": "RSS",
    "css": "CSS",
    "clike": "C-like",
    "js": "JavaScript",
    "abap": "ABAP",
    "abnf": "ABNF",
    "al": "AL",
    "antlr4": "ANTLR4",
    "g4": "ANTLR4",
    "apacheconf": "Apache Configuration",
    "apl": "APL",
    "aql": "AQL",
    "ino": "Arduino",
    "arff": "ARFF",
    "armasm": "ARM Assembly",
    "arm-asm": "ARM Assembly",
    "art": "Arturo",
    "asciidoc": "AsciiDoc",
    "adoc": "AsciiDoc",
    "aspnet": "ASP.NET (C#)",
    "asm6502": "6502 Assembly",
    "asmatmel": "Atmel AVR Assembly",
    "autohotkey": "AutoHotkey",
    "autoit": "AutoIt",
    "avisynth": "AviSynth",
    "avs": "AviSynth",
    "avro-idl": "Avro IDL",
    "avdl": "Avro IDL",
    "awk": "AWK",
    "gawk": "GAWK",
    "sh": "Shell",
    "basic": "BASIC",
    "bbcode": "BBcode",
    "bbj": "BBj",
    "bnf": "BNF",
    "rbnf": "RBNF",
    "bqn": "BQN",
    "bsl": "BSL (1C:Enterprise)",
    "oscript": "OneScript",
    "csharp": "C#",
    "cs": "C#",
    "dotnet": "C#",
    "cpp": "C++",
    "cfscript": "CFScript",
    "cfc": "CFScript",
    "cil": "CIL",
    "cilkc": "Cilk/C",
    "cilk-c": "Cilk/C",
    "cilkcpp": "Cilk/C++",
    "cilk-cpp": "Cilk/C++",
    "cilk": "Cilk/C++",
    "cmake": "CMake",
    "cobol": "COBOL",
    "coffee": "CoffeeScript",
    "conc": "Concurnas",
    "csp": "Content-Security-Policy",
    "css-extras": "CSS Extras",
    "csv": "CSV",
    "cue": "CUE",
    "dataweave": "DataWeave",
    "dax": "DAX",
    "django": "Django/Jinja2",
    "jinja2": "Django/Jinja2",
    "dns-zone-file": "DNS zone file",
    "dns-zone": "DNS zone file",
    "dockerfile": "Docker",
    "dot": "DOT (Graphviz)",
    "gv": "DOT (Graphviz)",
    "ebnf": "EBNF",
    "editorconfig": "EditorConfig",
    "ejs": "EJS",
    "etlua": "Embedded Lua templating",
    "erb": "ERB",
    "excel-formula": "Excel Formula",
    "xlsx": "Excel Formula",
    "xls": "Excel Formula",
    "fsharp": "F#",
    "firestore-security-rules": "Firestore security rules",
    "ftl": "FreeMarker Template Language",
    "gml": "GameMaker Language",
    "gamemakerlanguage": "GameMaker Language",
    "gap": "GAP (CAS)",
    "gcode": "G-code",
    "gdscript": "GDScript",
    "gedcom": "GEDCOM",
    "gettext": "gettext",
    "po": "gettext",
    "glsl": "GLSL",
    "gn": "GN",
    "gni": "GN",
    "linker-script": "GNU Linker Script",
    "ld": "GNU Linker Script",
    "go-module": "Go module",
    "go-mod": "Go module",
    "graphql": "GraphQL",
    "hbs": "Handlebars",
    "hs": "Haskell",
    "hcl": "HCL",
    "hlsl": "HLSL",
    "http": "HTTP",
    "hpkp": "HTTP Public-Key-Pins",
    "hsts": "HTTP Strict-Transport-Security",
    "ichigojam": "IchigoJam",
    "icu-message-format": "ICU Message Format",
    "idr": "Idris",
    "ignore": ".ignore",
    "gitignore": ".gitignore",
    "hgignore": ".hgignore",
    "npmignore": ".npmignore",
    "inform7": "Inform 7",
    "javadoc": "JavaDoc",
    "javadoclike": "JavaDoc-like",
    "javastacktrace": "Java stack trace",
    "jq": "JQ",
    "jsdoc": "JSDoc",
    "js-extras": "JS Extras",
    "json": "JSON",
    "webmanifest": "Web App Manifest",
    "json5": "JSON5",
    "jsonp": "JSONP",
    "jsstacktrace": "JS stack trace",
    "js-templates": "JS Templates",
    "keepalived": "Keepalived Configure",
    "kts": "Kotlin Script",
    "kt": "Kotlin",
    "kumir": "KuMir (\u041A\u0443\u041C\u0438\u0440)",
    "kum": "KuMir (\u041A\u0443\u041C\u0438\u0440)",
    "latex": "LaTeX",
    "tex": "TeX",
    "context": "ConTeXt",
    "lilypond": "LilyPond",
    "ly": "LilyPond",
    "emacs": "Lisp",
    "elisp": "Lisp",
    "emacs-lisp": "Lisp",
    "llvm": "LLVM IR",
    "log": "Log file",
    "lolcode": "LOLCODE",
    "magma": "Magma (CAS)",
    "md": "Markdown",
    "markup-templating": "Markup templating",
    "matlab": "MATLAB",
    "maxscript": "MAXScript",
    "mel": "MEL",
    "metafont": "METAFONT",
    "mongodb": "MongoDB",
    "moon": "MoonScript",
    "n1ql": "N1QL",
    "n4js": "N4JS",
    "n4jsd": "N4JS",
    "nand2tetris-hdl": "Nand To Tetris HDL",
    "naniscript": "Naninovel Script",
    "nani": "Naninovel Script",
    "nasm": "NASM",
    "neon": "NEON",
    "nginx": "nginx",
    "nsis": "NSIS",
    "objectivec": "Objective-C",
    "objc": "Objective-C",
    "ocaml": "OCaml",
    "opencl": "OpenCL",
    "openqasm": "OpenQasm",
    "qasm": "OpenQasm",
    "parigp": "PARI/GP",
    "objectpascal": "Object Pascal",
    "psl": "PATROL Scripting Language",
    "pcaxis": "PC-Axis",
    "px": "PC-Axis",
    "peoplecode": "PeopleCode",
    "pcode": "PeopleCode",
    "php": "PHP",
    "phpdoc": "PHPDoc",
    "php-extras": "PHP Extras",
    "plant-uml": "PlantUML",
    "plantuml": "PlantUML",
    "plsql": "PL/SQL",
    "powerquery": "PowerQuery",
    "pq": "PowerQuery",
    "mscript": "PowerQuery",
    "powershell": "PowerShell",
    "promql": "PromQL",
    "properties": ".properties",
    "protobuf": "Protocol Buffers",
    "purebasic": "PureBasic",
    "pbfasm": "PureBasic",
    "purs": "PureScript",
    "py": "Python",
    "qsharp": "Q#",
    "qs": "Q#",
    "q": "Q (kdb+ database)",
    "qml": "QML",
    "rkt": "Racket",
    "cshtml": "Razor C#",
    "razor": "Razor C#",
    "jsx": "React JSX",
    "tsx": "React TSX",
    "renpy": "Ren'py",
    "rpy": "Ren'py",
    "res": "ReScript",
    "rest": "reST (reStructuredText)",
    "robotframework": "Robot Framework",
    "robot": "Robot Framework",
    "rb": "Ruby",
    "sas": "SAS",
    "sass": "Sass (Sass)",
    "scss": "Sass (SCSS)",
    "shell-session": "Shell session",
    "sh-session": "Shell session",
    "shellsession": "Shell session",
    "sml": "SML",
    "smlnj": "SML/NJ",
    "solidity": "Solidity (Ethereum)",
    "sol": "Solidity (Ethereum)",
    "solution-file": "Solution file",
    "sln": "Solution file",
    "soy": "Soy (Closure Template)",
    "sparql": "SPARQL",
    "rq": "SPARQL",
    "splunk-spl": "Splunk SPL",
    "sqf": "SQF: Status Quo Function (Arma 3)",
    "sql": "SQL",
    "stata": "Stata Ado",
    "iecst": "Structured Text (IEC 61131-3)",
    "supercollider": "SuperCollider",
    "sclang": "SuperCollider",
    "systemd": "Systemd configuration file",
    "t4-templating": "T4 templating",
    "t4-cs": "T4 Text Templates (C#)",
    "t4": "T4 Text Templates (C#)",
    "t4-vb": "T4 Text Templates (VB)",
    "tap": "TAP",
    "tt2": "Template Toolkit 2",
    "toml": "TOML",
    "trickle": "trickle",
    "troy": "troy",
    "trig": "TriG",
    "ts": "TypeScript",
    "tsconfig": "TSConfig",
    "uscript": "UnrealScript",
    "uc": "UnrealScript",
    "uorazor": "UO Razor Script",
    "uri": "URI",
    "url": "URL",
    "vbnet": "VB.Net",
    "vhdl": "VHDL",
    "vim": "vim",
    "visual-basic": "Visual Basic",
    "vba": "VBA",
    "vb": "Visual Basic",
    "wasm": "WebAssembly",
    "web-idl": "Web IDL",
    "webidl": "Web IDL",
    "wgsl": "WGSL",
    "wiki": "Wiki markup",
    "wolfram": "Wolfram language",
    "nb": "Mathematica Notebook",
    "wl": "Wolfram language",
    "xeoracube": "XeoraCube",
    "xml-doc": "XML doc (.net)",
    "xojo": "Xojo (REALbasic)",
    "xquery": "XQuery",
    "yaml": "YAML",
    "yml": "YAML",
    "yang": "YANG"
  };
  const manualLang = {
    "css": "CSS",
    "clike": "C-like",
    "javascript": "JavaScript",
    "js": "JavaScript",
    "abap": "ABAP",
    "abnf": "ABNF",
    "actionscript": "ActionScript",
    "ada": "Ada",
    "agda": "Agda",
    "al": "AL",
    "antlr4": "ANTLR4",
    "g4": "ANTLR4",
    "apacheconf": "Apache Configuration",
    "apex": "Apex",
    "apl": "APL",
    "applescript": "AppleScript",
    "aql": "AQL",
    "arduino": "Arduino",
    "ino": "Arduino",
    "arff": "ARFF",
    "armasm": "ARM Assembly",
    "arm-asm": "ARM Assembly",
    "arturo": "Arturo",
    "art": "Arturo",
    "asciidoc": "AsciiDoc",
    "adoc": "AsciiDoc",
    "aspnet": "ASP.NET (C#)",
    "asm6502": "6502 Assembly",
    "asmatmel": "Atmel AVR Assembly",
    "autohotkey": "AutoHotkey",
    "autoit": "AutoIt",
    "avisynth": "AviSynth",
    "avs": "AviSynth",
    "avro-idl": "Avro IDL",
    "avdl": "Avro IDL",
    "awk": "AWK",
    "gawk": "GAWK",
    "bash": "Shell",
    "sh": "Shell",
    "shell": "Shell",
    "basic": "BASIC",
    "batch": "Batch",
    "bbcode": "BBcode",
    "shortcode": "BBcode",
    "bbj": "BBj",
    "birb": "Birb",
    "bison": "Bison",
    "bnf": "BNF",
    "rbnf": "BNF",
    "bqn": "BQN",
    "brainfuck": "Brainfuck",
    "brightscript": "BrightScript",
    "bro": "Bro",
    "bsl": "BSL (1C",
    "oscript": "BSL (1C",
    "c": "C",
    "csharp": "C#",
    "cs": "C#",
    "dotnet": "C#",
    "cpp": "C++",
    "cfscript": "CFScript",
    "cfc": "CFScript",
    "chaiscript": "ChaiScript",
    "cil": "CIL",
    "cilkc": "Cilk/C",
    "cilk-c": "Cilk/C",
    "cilkcpp": "Cilk/C++",
    "cilk-cpp": "Cilk/C++",
    "cilk": "Cilk/C++",
    "clojure": "Clojure",
    "cmake": "CMake",
    "cobol": "COBOL",
    "coffeescript": "CoffeeScript",
    "coffee": "CoffeeScript",
    "concurnas": "Concurnas",
    "conc": "Concurnas",
    "csp": "Content-Security-Policy",
    "cooklang": "Cooklang",
    "coq": "Coq",
    "crystal": "Crystal",
    "css-extras": "CSS Extras",
    "csv": "CSV",
    "cue": "CUE",
    "cypher": "Cypher",
    "d": "D",
    "dart": "Dart",
    "dataweave": "DataWeave",
    "dax": "DAX",
    "dhall": "Dhall",
    "diff": "Diff",
    "django": "Django/Jinja2",
    "jinja2": "Django/Jinja2",
    "dns-zone-file": "DNS zone file",
    "dns-zone": "DNS zone file",
    "docker": "Docker",
    "dockerfile": "Docker",
    "dot": "DOT (Graphviz)",
    "gv": "DOT (Graphviz)",
    "ebnf": "EBNF",
    "editorconfig": "EditorConfig",
    "eiffel": "Eiffel",
    "ejs": "EJS",
    "eta": "EJS",
    "elixir": "Elixir",
    "elm": "Elm",
    "etlua": "Embedded Lua templating",
    "erb": "ERB",
    "erlang": "Erlang",
    "excel-formula": "Excel Formula",
    "xlsx": "Excel Formula",
    "xls": "Excel Formula",
    "fsharp": "F#",
    "factor": "Factor",
    "false": "False",
    "firestore-security-rules": "Firestore security rules",
    "flow": "Flow",
    "fortran": "Fortran",
    "ftl": "FreeMarker Template Language",
    "gml": "GameMaker Language",
    "gamemakerlanguage": "GameMaker Language",
    "gap": "GAP (CAS)",
    "gcode": "G-code",
    "gdscript": "GDScript",
    "gedcom": "GEDCOM",
    "gettext": "gettext",
    "po": "gettext",
    "gherkin": "Gherkin",
    "git": "Git",
    "glsl": "GLSL",
    "gn": "GN",
    "gni": "GN",
    "linker-script": "GNU Linker Script",
    "ld": "GNU Linker Script",
    "go": "Go",
    "go-module": "Go module",
    "go-mod": "Go module",
    "gradle": "Gradle",
    "graphql": "GraphQL",
    "groovy": "Groovy",
    "haml": "Haml",
    "handlebars": "Handlebars",
    "hbs": "Handlebars",
    "mustache": "Handlebars",
    "haskell": "Haskell",
    "hs": "Haskell",
    "haxe": "Haxe",
    "hcl": "HCL",
    "hlsl": "HLSL",
    "hoon": "Hoon",
    "http": "HTTP",
    "hpkp": "HTTP Public-Key-Pins",
    "hsts": "HTTP Strict-Transport-Security",
    "ichigojam": "IchigoJam",
    "icon": "Icon",
    "icu-message-format": "ICU Message Format",
    "idris": "Idris",
    "idr": "Idris",
    "ignore": ".ignore",
    "gitignore": ".ignore",
    "hgignore": ".ignore",
    "npmignore": ".ignore",
    "inform7": "Inform 7",
    "ini": "Ini",
    "io": "Io",
    "j": "J",
    "java": "Java",
    "javadoc": "JavaDoc",
    "javadoclike": "JavaDoc-like",
    "javastacktrace": "Java stack trace",
    "jexl": "Jexl",
    "jolie": "Jolie",
    "jq": "JQ",
    "jsdoc": "JSDoc",
    "js-extras": "JS Extras",
    "json": "JSON",
    "webmanifest": "JSON",
    "json5": "JSON5",
    "jsonp": "JSONP",
    "jsstacktrace": "JS stack trace",
    "js-templates": "JS Templates",
    "julia": "Julia",
    "keepalived": "Keepalived Configure",
    "keyman": "Keyman",
    "kotlin": "Kotlin",
    "kt": "Kotlin",
    "kts": "Kotlin",
    "kumir": "KuMir (\u041A\u0443\u041C\u0438\u0440)",
    "kum": "KuMir (\u041A\u0443\u041C\u0438\u0440)",
    "kusto": "Kusto",
    "latex": "LaTeX",
    "tex": "LaTeX",
    "context": "LaTeX",
    "latte": "Latte",
    "less": "Less",
    "lilypond": "LilyPond",
    "ly": "LilyPond",
    "liquid": "Liquid",
    "lisp": "Lisp",
    "emacs": "Lisp",
    "elisp": "Lisp",
    "emacs-lisp": "Lisp",
    "livescript": "LiveScript",
    "llvm": "LLVM IR",
    "log": "Log file",
    "lolcode": "LOLCODE",
    "lua": "Lua",
    "magma": "Magma (CAS)",
    "makefile": "Makefile",
    "markdown": "Markdown",
    "md": "Markdown",
    "markup-templating": "Markup templating",
    "mata": "Mata",
    "matlab": "MATLAB",
    "maxscript": "MAXScript",
    "mel": "MEL",
    "mermaid": "Mermaid",
    "metafont": "METAFONT",
    "mizar": "Mizar",
    "mongodb": "MongoDB",
    "monkey": "Monkey",
    "moonscript": "MoonScript",
    "moon": "MoonScript",
    "n1ql": "N1QL",
    "n4js": "N4JS",
    "n4jsd": "N4JS",
    "nand2tetris-hdl": "Nand To Tetris HDL",
    "naniscript": "Naninovel Script",
    "nani": "Naninovel Script",
    "nasm": "NASM",
    "neon": "NEON",
    "nevod": "Nevod",
    "nginx": "nginx",
    "nim": "Nim",
    "nix": "Nix",
    "nsis": "NSIS",
    "objectivec": "Objective-C",
    "objc": "Objective-C",
    "ocaml": "OCaml",
    "odin": "Odin",
    "opencl": "OpenCL",
    "openqasm": "OpenQasm",
    "qasm": "OpenQasm",
    "oz": "Oz",
    "parigp": "PARI/GP",
    "parser": "Parser",
    "pascal": "Pascal",
    "objectpascal": "Pascal",
    "pascaligo": "Pascaligo",
    "psl": "PATROL Scripting Language",
    "pcaxis": "PC-Axis",
    "px": "PC-Axis",
    "peoplecode": "PeopleCode",
    "pcode": "PeopleCode",
    "perl": "Perl",
    "php": "PHP",
    "phpdoc": "PHPDoc",
    "php-extras": "PHP Extras",
    "plant-uml": "PlantUML",
    "plantuml": "PlantUML",
    "plsql": "PL/SQL",
    "powerquery": "PowerQuery",
    "pq": "PowerQuery",
    "mscript": "PowerQuery",
    "powershell": "PowerShell",
    "processing": "Processing",
    "prolog": "Prolog",
    "promql": "PromQL",
    "properties": ".properties",
    "protobuf": "Protocol Buffers",
    "pug": "Pug",
    "puppet": "Puppet",
    "pure": "Pure",
    "purebasic": "PureBasic",
    "pbfasm": "PureBasic",
    "purescript": "PureScript",
    "purs": "PureScript",
    "python": "Python",
    "py": "Python",
    "qsharp": "Q#",
    "qs": "Q#",
    "q": "Q (kdb+ database)",
    "qml": "QML",
    "qore": "Qore",
    "r": "R",
    "racket": "Racket",
    "rkt": "Racket",
    "cshtml": "Razor C#",
    "jsx": "React JSX",
    "tsx": "React TSX",
    "reason": "Reason",
    "regex": "Regex",
    "rego": "Rego",
    "renpy": "Ren'py",
    "rpy": "Ren'py",
    "rescript": "ReScript",
    "res": "ReScript",
    "rest": "reST (reStructuredText)",
    "rip": "Rip",
    "roboconf": "Roboconf",
    "robotframework": "Robot Framework",
    "robot": "Robot Framework",
    "ruby": "Ruby",
    "rb": "Ruby",
    "rust": "Rust",
    "sas": "SAS",
    "sass": "Sass (Sass)",
    "scss": "Sass (SCSS)",
    "scala": "Scala",
    "scheme": "Scheme",
    "shell-session": "Shell session",
    "sh-session": "Shell session",
    "shellsession": "Shell session",
    "smali": "Smali",
    "smalltalk": "Smalltalk",
    "smarty": "Smarty",
    "sml": "SML",
    "smlnj": "SML",
    "solidity": "Solidity (Ethereum)",
    "sol": "Solidity (Ethereum)",
    "solution-file": "Solution file",
    "sln": "Solution file",
    "soy": "Soy (Closure Template)",
    "sparql": "SPARQL",
    "rq": "SPARQL",
    "splunk-spl": "Splunk SPL",
    "sqf": "SQF",
    "sql": "SQL",
    "squirrel": "Squirrel",
    "stan": "Stan",
    "stata": "Stata Ado",
    "iecst": "Structured Text (IEC 61131-3)",
    "stylus": "Stylus",
    "supercollider": "SuperCollider",
    "sclang": "SuperCollider",
    "swift": "Swift",
    "systemd": "Systemd configuration file",
    "t4-templating": "T4 templating",
    "t4-cs": "T4 Text Templates (C#)",
    "t4": "T4 Text Templates (C#)",
    "t4-vb": "T4 Text Templates (VB)",
    "tap": "TAP",
    "tcl": "Tcl",
    "tt2": "Template Toolkit 2",
    "textile": "Textile",
    "toml": "TOML",
    "tremor": "Tremor",
    "trickle": "Tremor",
    "troy": "Tremor",
    "turtle": "Turtle",
    "trig": "Turtle",
    "twig": "Twig",
    "typescript": "TypeScript",
    "ts": "TypeScript",
    "typoscript": "TypoScript",
    "tsconfig": "TypoScript",
    "unrealscript": "UnrealScript",
    "uscript": "UnrealScript",
    "uc": "UnrealScript",
    "uorazor": "UO Razor Script",
    "uri": "URI",
    "url": "URI",
    "v": "V",
    "vala": "Vala",
    "vbnet": "VB.Net",
    "velocity": "Velocity",
    "verilog": "Verilog",
    "vhdl": "VHDL",
    "vim": "vim",
    "visual-basic": "Visual Basic",
    "vb": "Visual Basic",
    "vba": "Visual Basic",
    "warpscript": "WarpScript",
    "wasm": "WebAssembly",
    "web-idl": "Web IDL",
    "webidl": "Web IDL",
    "wgsl": "WGSL",
    "wiki": "Wiki markup",
    "wolfram": "Wolfram language",
    "mathematica": "Wolfram language",
    "nb": "Wolfram language",
    "wl": "Wolfram language",
    "wren": "Wren",
    "xeora": "Xeora",
    "xeoracube": "Xeora",
    "xml-doc": "XML doc (.net)",
    "xojo": "Xojo (REALbasic)",
    "xquery": "XQuery",
    "yaml": "YAML",
    "yml": "YAML",
    "yang": "YANG",
    "zig": "Zig"
  };
  if (!code)
    return "";
  code = code.toLowerCase();
  if (Languages.hasOwnProperty(code)) {
    return Languages[code];
  } else if (manualLang.hasOwnProperty(code)) {
    return manualLang[code];
  } else if (code) {
    return code.charAt(0).toUpperCase() + code.slice(1);
  }
  return "";
}

// src/ActiveLineHighlight.ts
var prevEditorLineColor;
var prevCBLineColor;
var previousLineNumber = -1;
function codeblockActiveLingHighlight(settings) {
  const viewPlugin = import_view.ViewPlugin.fromClass(
    class {
      constructor(view) {
        this.settings = settings;
        this.decorations = this.buildDecorations(view);
      }
      update(update) {
        const currentEditorLineColor = this.settings.activeLineColor;
        const currentCBLineColor = this.settings.activeCodeBlockLineColor;
        const currentLineNumber = update.view.state.doc.lineAt(update.view.state.selection.main.head).number;
        if (update.docChanged || update.viewportChanged || previousLineNumber != currentLineNumber || currentEditorLineColor !== prevEditorLineColor || prevCBLineColor !== currentCBLineColor) {
          previousLineNumber = currentLineNumber;
          prevEditorLineColor = this.settings.activeLineColor;
          prevCBLineColor = this.settings.activeCodeBlockLineColor;
          this.decorations = this.buildDecorations(update.view);
        }
      }
      buildDecorations(view) {
        const builder = new import_state.RangeSetBuilder();
        const Exclude = this.settings.ExcludeLangs;
        const ExcludeLangs = splitAndTrimString(Exclude);
        let bExclude = false;
        for (const { from, to } of view.visibleRanges) {
          const activeCodeBlockColor = this.settings.activeCodeBlockLineColor;
          const activeEditorColor = this.settings.activeLineColor;
          const bEditorColor = this.settings.bActiveLineHighlight;
          const bCodeBlockColor = this.settings.bActiveCodeblockLineHighlight;
          const Selection = view.state.selection.main.head;
          const start = view.state.doc.lineAt(Selection).from;
          let editorLineHighlighted = false;
          (0, import_language.syntaxTree)(view.state).iterate({
            from,
            to,
            enter(node) {
              const line = view.state.doc.lineAt(node.from);
              const lineText = view.state.sliceDoc(line.from, line.to);
              const lang = searchString(lineText, "```");
              if (lang && ExcludeLangs.includes(lang.toLowerCase())) {
                bExclude = true;
              }
              if (
                /*!codeBlockLineHighlighted &&*/
                bCodeBlockColor && start === node.from && (node.type.name.includes("HyperMD-codeblock-begin") || node.type.name === "HyperMD-codeblock_HyperMD-codeblock-bg" || node.type.name.includes("HyperMD-codeblock-end"))
              ) {
                if (bExclude)
                  return;
                builder.add(line.from, line.from, import_view.Decoration.line({
                  attributes: { class: "codeblock-customizer-activeLine", style: `background-color: ${activeCodeBlockColor} !important` }
                }));
              }
              if (node.type.name.includes("HyperMD-codeblock-end"))
                bExclude = false;
              if (!editorLineHighlighted && bEditorColor) {
                const flag = bCodeBlockColor ? "" : " !important";
                builder.add(start, start, import_view.Decoration.line({
                  attributes: { class: "codeblock-customizer-editor-activeLine", style: `background-color: ${activeEditorColor}${flag}` }
                }));
                editorLineHighlighted = true;
              }
            }
            // enter
          });
        }
        return builder.finish();
      }
      // buildDecorations
      destroy() {
      }
    },
    //class
    {
      decorations: (value) => value.decorations
    }
  );
  viewPlugin.name = "codeblockActiveLingHighlight";
  return viewPlugin;
}

// src/CodeBlockHighlight.ts
var import_view2 = require("@codemirror/view");
var import_state2 = require("@codemirror/state");
var import_language2 = require("@codemirror/language");
var prevBGColor;
var prevHLColor;
var prevExcludeLangs;
function codeblockHighlight(settings) {
  const viewPlugin = import_view2.ViewPlugin.fromClass(
    class {
      constructor(view) {
        this.settings = settings;
        this.decorations = this.buildDecorations(view);
      }
      update(update) {
        const currentBGColor = this.settings.backgroundColor;
        const currentHLColor = this.settings.highlightColor;
        const currentExcludeLangs = this.settings.ExcludeLangs;
        if (update.docChanged || update.viewportChanged || currentBGColor !== prevBGColor || currentHLColor !== prevHLColor || currentExcludeLangs !== prevExcludeLangs) {
          prevBGColor = this.settings.backgroundColor;
          prevHLColor = this.settings.highlightColor;
          prevExcludeLangs = this.settings.ExlcudeLangs;
          this.decorations = this.buildDecorations(update.view);
        }
      }
      destroy() {
      }
      buildDecorations(view) {
        const builder = new import_state2.RangeSetBuilder();
        let lineNumber = 1;
        let HL = [];
        const BgColor = this.settings.backgroundColor;
        const HLColor = this.settings.highlightColor;
        const Exclude = this.settings.ExcludeLangs;
        const bGutter = this.settings.bEnableLineNumbers;
        const ExcludeLangs = splitAndTrimString(Exclude);
        let bExclude = false;
        for (const { from, to } of view.visibleRanges) {
          (0, import_language2.syntaxTree)(view.state).iterate({
            from,
            to,
            enter(node) {
              const line = view.state.doc.lineAt(node.from);
              const lineText = view.state.sliceDoc(line.from, line.to);
              const lang = searchString(lineText, "```");
              if (lang && ExcludeLangs.includes(lang.toLowerCase())) {
                bExclude = true;
              }
              if (node.type.name.includes("HyperMD-codeblock-begin")) {
                if (bExclude)
                  return;
                const params = searchString(lineText, "HL:");
                HL = getHighlightedLines(params);
                const radius = bGutter ? `border-top-left-radius: 0px` : "";
                builder.add(node.from, node.from, import_view2.Decoration.line({
                  attributes: { class: "codeblock-customizer-line-background", style: `background-color: ${BgColor}; ${radius}` }
                }));
              }
              if (node.type.name === "HyperMD-codeblock_HyperMD-codeblock-bg") {
                if (bExclude)
                  return;
                const backgroundClass = HL != null && HL.includes(lineNumber) ? "codeblock-customizer-line-highlighted" : "codeblock-customizer-line-background";
                const Color = backgroundClass === "codeblock-customizer-line-background" ? BgColor : HLColor;
                builder.add(node.from, node.from, import_view2.Decoration.line({
                  attributes: { class: backgroundClass, style: `background-color: ${Color};` }
                }));
                lineNumber++;
              }
              if (node.type.name.includes("HyperMD-codeblock-end")) {
                if (bExclude) {
                  bExclude = false;
                  return;
                }
                const radius = bGutter ? `border-bottom-left-radius: 0px` : "";
                builder.add(node.from, node.from, import_view2.Decoration.line({
                  attributes: { class: "codeblock-customizer-line-background", style: `background-color: ${BgColor};  ${radius}` }
                }));
                lineNumber = 1;
              }
            }
            // enter            
          });
        }
        return builder.finish();
      }
      // buildDecorations
    },
    // LineNumberPlugin
    {
      decorations: (value) => value.decorations
    }
  );
  viewPlugin.name = "codeblockHighlight";
  return viewPlugin;
}

// src/Gutter.ts
var import_view3 = require("@codemirror/view");
var import_language3 = require("@codemirror/language");
var import_state3 = require("@codemirror/state");
var LineNumberMarker = class extends import_view3.GutterMarker {
  constructor(metaInfo) {
    super();
    this.metaInfo = metaInfo;
    this.handleMutation = (mutations, view) => {
      mutations.forEach((mutation) => {
        if (mutation.target.hasAttribute("color-changed")) {
          this.updateParentElementStyles(mutation.target);
        }
      });
    };
    this.elementClass = "codeblock-customizer-gutterElements";
    this.observer = new MutationObserver(this.handleMutation);
  }
  updateParentElementStyles(target) {
    const parent = target.closest(".codeblock-customizer-gutterElements");
    if (parent) {
      parent.style.backgroundColor = this.metaInfo.gutterBackgroundColor;
      if (this.metaInfo.bFirstLine) {
        parent.style.borderTopLeftRadius = "5px";
      } else {
        parent.style.borderTopLeftRadius = "0px";
      }
      if (this.metaInfo.bLastLine) {
        parent.style.borderBottomLeftRadius = "5px";
      } else {
        parent.style.borderBottomLeftRadius = "0px";
      }
    }
  }
  // updateParentElementStyles
  eq(other) {
    return other.metaInfo.lineNumber == this.metaInfo.lineNumber && other.metaInfo.gutterTextColor == this.metaInfo.gutterTextColor && other.metaInfo.gutterBackgroundColor == this.metaInfo.gutterBackgroundColor && other.metaInfo.bFirstLine == this.metaInfo.bFirstLine && other.metaInfo.bLastLine == this.metaInfo.bLastLine;
  }
  toDOM(view) {
    const element = document.createElement("div");
    element.textContent = this.metaInfo.lineNumber == -1 ? "" : this.metaInfo.lineNumber;
    element.style.color = this.metaInfo.gutterTextColor;
    this.observer.observe(element, { attributes: true, childList: true });
    element.setAttribute("color-changed", "true");
    return element;
  }
  destroy(dom) {
    dom.removeAttribute("color-changed");
    dom.removeAttribute("FirstLine");
    dom.removeAttribute("LastLine");
    dom.removeEventListener("DOMNodeInserted", this.handleMutation);
    this.observer.disconnect();
  }
};
var emptyMarker = new class extends import_view3.GutterMarker {
  constructor() {
    super(...arguments);
    this.elementClass = "codeblock-customizer-gutterElements_empty";
  }
  toDOM(view) {
    return document.createTextNode("");
  }
}();
function codeblockGutter(settings) {
  const Exclude = settings.ExcludeLangs;
  const ExcludeLangs = splitAndTrimString(Exclude);
  const ret = (0, import_view3.gutter)({
    class: "codeblock-customizer-gutter",
    markers(view) {
      let lineNumber = 1;
      let bExclude = false;
      const GutterTextColor = settings.gutterTextColor;
      const GutterBackgroundColor = settings.gutterBackgroundColor;
      const GutterHighlightColor = settings.highlightColor;
      const GutterHighlight = settings.bGutterHighlight;
      let lang = "";
      let metaInfo;
      let HL = [];
      const builder = new import_state3.RangeSetBuilder();
      (0, import_language3.syntaxTree)(view.state).iterate({
        //from, to,
        enter(node) {
          const line = view.state.doc.lineAt(node.from);
          const lineText = view.state.sliceDoc(line.from, line.to);
          lang = searchString(lineText, "```");
          if (lang && ExcludeLangs.includes(lang.toLowerCase())) {
            bExclude = true;
          }
          if (node.type.name.includes("HyperMD-codeblock-begin")) {
            if (!bExclude) {
              const params = searchString(lineText, "HL:");
              HL = getHighlightedLines(params);
              metaInfo = { lineNumber: -1, gutterTextColor: GutterTextColor, gutterBackgroundColor: GutterBackgroundColor, bFirstLine: true, bLastLine: false };
              builder.add(node.from, node.to, new LineNumberMarker(metaInfo));
            }
          } else if (node.type.name === "HyperMD-codeblock_HyperMD-codeblock-bg") {
            if (!bExclude) {
              if (GutterHighlight && HL != null && HL.includes(lineNumber)) {
                metaInfo = { lineNumber, gutterTextColor: GutterTextColor, gutterBackgroundColor: GutterHighlightColor, bFirstLine: false, bLastLine: false };
              } else {
                metaInfo = { lineNumber, gutterTextColor: GutterTextColor, gutterBackgroundColor: GutterBackgroundColor, bFirstLine: false, bLastLine: false };
              }
              builder.add(node.from, node.to, new LineNumberMarker(metaInfo));
              lineNumber++;
            }
          } else if (node.type.name.includes("HyperMD-codeblock-end")) {
            if (!bExclude) {
              metaInfo = { lineNumber: -1, gutterTextColor: GutterTextColor, gutterBackgroundColor: GutterBackgroundColor, bFirstLine: false, bLastLine: true };
              builder.add(node.from, node.to, new LineNumberMarker(metaInfo));
              lineNumber = 1;
            }
            bExclude = false;
          }
        }
      });
      return builder.finish();
    },
    initialSpacer: () => emptyMarker
  });
  ret.name = "codeblockGutter";
  return ret;
}

// src/Header.ts
var import_state4 = require("@codemirror/state");
var import_view4 = require("@codemirror/view");
function defaultFold(state, settings) {
  let CollapseStart = null;
  let CollapseEnd = null;
  let Fold = false;
  let blockFound = false;
  let bExclude = false;
  const builder = new import_state4.RangeSetBuilder();
  for (let i = 1; i < state.doc.lines; i++) {
    bExclude = false;
    const lineText = state.doc.line(i).text.toString();
    const line = state.doc.line(i);
    bExclude = isExcluded(lineText, settings.ExcludeLangs);
    if (lineText.startsWith("```") && lineText.indexOf("```", 3) === -1) {
      if (bExclude)
        continue;
      if (CollapseStart === null) {
        Fold = searchString(lineText, "fold");
        if (Fold)
          CollapseStart = line.from;
      } else {
        blockFound = true;
        CollapseEnd = line.to;
      }
    }
    if (blockFound) {
      if (CollapseStart != null && CollapseEnd != null) {
        const decoration = import_view4.Decoration.replace({ effect: Collapse.of([doFold.range(CollapseStart, CollapseEnd)]), block: true, side: -1 });
        builder.add(CollapseStart, CollapseEnd, decoration);
        CollapseStart = null;
        CollapseEnd = null;
      }
      blockFound = false;
    }
  }
  return builder.finish();
}
var codeblockHeader = import_state4.StateField.define({
  create(state) {
    return import_view4.Decoration.none;
  },
  update(oldState, transaction) {
    const builder = new import_state4.RangeSetBuilder();
    let WidgetStart = null;
    let Fold = false;
    let fileName = null;
    let bExclude = false;
    for (let i = 1; i < transaction.state.doc.lines; i++) {
      bExclude = false;
      const lineText = transaction.state.doc.line(i).text.toString();
      const line = transaction.state.doc.line(i);
      const lang = searchString(lineText, "```");
      bExclude = isExcluded(lineText, this.settings.ExcludeLangs);
      if (lineText.startsWith("```") && lineText.indexOf("```", 3) === -1) {
        if (WidgetStart === null) {
          WidgetStart = line;
          fileName = searchString(lineText, "file:");
          Fold = searchString(lineText, "fold");
          const metaInfo = {
            color: this.settings.header.color,
            textColor: this.settings.header.textColor,
            lineColor: this.settings.header.lineColor,
            codeBlockLangColor: this.settings.header.codeBlockLangColor,
            codeBlockLangBackgroundColor: this.settings.header.codeBlockLangBackgroundColor,
            bCodeblockLangBold: this.settings.header.bCodeblockLangBold,
            bCodeblockLangItalic: this.settings.header.bCodeblockLangItalic,
            bHeaderBold: this.settings.header.bHeaderBold,
            bHeaderItalic: this.settings.header.bHeaderItalic
          };
          const [retVal, Text] = shouldAddWidget(bExclude, fileName, lang, Fold, this.settings);
          if (retVal) {
            builder.add(WidgetStart.from, WidgetStart.from, createDecorationWidget(Text, getLanguageName(lang), metaInfo, this.settings.bDisplayCodeBlockLanguage));
          }
        } else {
          WidgetStart = null;
          Fold = false;
          fileName = null;
        }
      }
    }
    return builder.finish();
  },
  // update
  provide(field) {
    return import_view4.EditorView.decorations.from(field);
  }
  // provide
});
function shouldAddWidget(bExclude, fileName, codeblockLanguage, fold, settings) {
  if (!bExclude && fileName !== null && fileName !== "") {
    return [true, fileName];
  } else if (!bExclude && fold) {
    return [true, "Collapsed code"];
  } else if (!bExclude && settings.bDisplayCodeBlockLanguage && settings.header.bAlwaysDisplayCodeblockLang && codeblockLanguage) {
    return [true, ""];
  }
  return [false, ""];
}
function createDecorationWidget(textToDisplay, languageName, metaInfo, bDisplayCodeBlockLanguage) {
  return import_view4.Decoration.widget({
    widget: new TextAboveCodeblockWidget(textToDisplay, languageName, metaInfo, bDisplayCodeBlockLanguage),
    block: true
  });
}
var Collapse = import_state4.StateEffect.define();
var UnCollapse = import_state4.StateEffect.define();
var collapseField = import_state4.StateField.define({
  create(state) {
    return defaultFold(state, collapseField.pluginSettings);
  },
  update(value, tr) {
    value = value.map(tr.changes);
    for (const effect of tr.effects) {
      if (effect.is(Collapse))
        value = value.update({ add: effect.value, sort: true });
      else if (effect.is(UnCollapse))
        value = value.update({ filter: effect.value });
    }
    return value;
  },
  provide: (f) => import_view4.EditorView.decorations.from(f)
});
var doFold = import_view4.Decoration.replace({ block: true });
var TextAboveCodeblockWidget = class extends import_view4.WidgetType {
  constructor(text, Lang, Header, bDisplayCodeBlockLanguage) {
    super();
    this.handleMutation = (mutations, view) => {
      mutations.forEach((mutation) => {
        if (mutation.target.hasAttribute("data-clicked")) {
          handleClick(this.view, mutation.target);
        }
      });
    };
    this.text = text;
    this.Lang = Lang;
    this.Header = Header;
    this.bDisplayCodeBlockLanguage = bDisplayCodeBlockLanguage;
    this.observer = new MutationObserver(this.handleMutation);
  }
  eq(other) {
    return other.text == this.text && other.Lang == this.Lang && other.Header.color == this.Header.color && other.Header.lineColor == this.Header.lineColor && other.Header.textColor == this.Header.textColor && other.Header.codeBlockLangBackgroundColor == this.Header.codeBlockLangBackgroundColor && other.Header.codeBlockLangColor == this.Header.codeBlockLangColor && other.bDisplayCodeBlockLanguage == this.bDisplayCodeBlockLanguage && other.Header.bCodeblockLangBold == this.Header.bCodeblockLangBold && other.Header.bCodeblockLangItalic == this.Header.bCodeblockLangItalic && other.Header.bHeaderBold == this.Header.bHeaderBold && other.Header.bHeaderItalic == this.Header.bHeaderItalic;
  }
  toDOM(view) {
    this.view = view;
    const container = createContainer(this.Header);
    const wrapper = createWrapper();
    if (this.Lang && this.bDisplayCodeBlockLanguage) {
      wrapper.appendChild(createCodeblockLang(this.Lang, this.Header));
    }
    wrapper.appendChild(createFileName(this.text, this.Header));
    container.appendChild(wrapper);
    this.observer.view = view;
    this.observer.observe(container, { attributes: true });
    container.addEventListener("mousedown", (event) => {
      container.setAttribute("data-clicked", "true");
    });
    return container;
  }
  destroy(dom) {
    dom.removeAttribute("data-clicked");
    dom.removeEventListener("mousedown", handleClick);
    this.observer.disconnect();
  }
  ignoreEvent() {
    return false;
  }
};
function createContainer(header) {
  const container = document.createElement("div");
  container.classList.add("codeblock-customizer-header-container");
  container.style.cssText = "user-select: none";
  container.style.borderTopLeftRadius = "5px";
  container.style.borderTopRightRadius = "5px";
  container.style.backgroundColor = header.color;
  container.style.borderBottom = "2px";
  container.style.borderBottomStyle = "groove";
  container.style.borderBottomColor = header.lineColor;
  return container;
}
function createWrapper() {
  const wrapper = document.createElement("div");
  wrapper.style.display = "flex";
  return wrapper;
}
function createCodeblockLang(lang, header) {
  const codeblockLang = document.createElement("div");
  codeblockLang.classList.add("codeblock-customizer-header-language-tag");
  codeblockLang.style.backgroundColor = header.codeBlockLangBackgroundColor;
  codeblockLang.style.color = header.codeBlockLangColor;
  codeblockLang.style.borderRadius = "5px 5px 5px 0px";
  codeblockLang.innerText = lang;
  if (header.bCodeblockLangBold)
    codeblockLang.style.fontWeight = "bold";
  if (header.bCodeblockLangItalic)
    codeblockLang.style.fontStyle = "italic";
  return codeblockLang;
}
function createFileName(text, header) {
  const fileName = document.createElement("div");
  fileName.innerText = text;
  fileName.classList.add("codeblock-customizer-header-text");
  fileName.style.color = header.textColor;
  if (header.bHeaderBold)
    fileName.style.fontWeight = "bold";
  if (header.bHeaderItalic)
    fileName.style.fontStyle = "italic";
  return fileName;
}
function handleClick(view, target) {
  const Pos = view.posAtDOM(target);
  const effect = view.state.field(collapseField, false);
  let isFolded = false;
  effect.between(Pos, Pos, () => {
    isFolded = true;
  });
  let CollapseStart = null;
  let CollapseEnd = null;
  let WidgetStart = null;
  let blockFound = false;
  for (let i = 1; i < view.state.doc.lines; i++) {
    const lineText = view.state.doc.line(i).text.toString();
    const line = view.state.doc.line(i);
    if (lineText.startsWith("```") && lineText.indexOf("```", 3) === -1) {
      if (WidgetStart === null) {
        WidgetStart = line.from;
        if (Pos === line.from) {
          CollapseStart = line.from;
        }
      } else {
        blockFound = true;
        CollapseEnd = line.to;
      }
    }
    if (blockFound) {
      if (CollapseStart != null && CollapseEnd != null) {
        if (isFolded) {
          view.dispatch({ effects: UnCollapse.of((from, to) => to <= CollapseStart || from >= CollapseEnd) });
        } else {
          view.dispatch({ effects: Collapse.of([doFold.range(CollapseStart, CollapseEnd)]) });
        }
        view.requestMeasure();
        CollapseStart = null;
        CollapseEnd = null;
      }
      WidgetStart = null;
      blockFound = false;
    }
  }
}

// src/ReadingView.ts
var import_obsidian = require("obsidian");
async function ReadingView(codeBlockElement, context, plugin) {
  const pluginSettings = plugin.settings;
  const codeElm = codeBlockElement.querySelector("pre > code");
  if (!codeElm)
    return;
  const classRegex = /^language-\S+/;
  const match = Array.from(codeElm.classList).some((className) => classRegex.test(className));
  if (match)
    while (!codeElm.classList.contains("is-loaded"))
      await sleep(2);
  const codeblocks = codeBlockElement.querySelectorAll("code");
  const codeBlockSectionInfo = context.getSectionInfo(codeElm);
  let codeBlockFirstLine = "";
  if (codeBlockSectionInfo) {
    const view = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    codeBlockFirstLine = view.editor.getLine(codeBlockSectionInfo.lineStart);
  }
  const codeBlockLang = searchString(codeBlockFirstLine, "```");
  const highlightedLinesParams = searchString(codeBlockFirstLine, "HL:");
  const linesToHighlight = getHighlightedLines(highlightedLinesParams);
  const FileName = searchString(codeBlockFirstLine, "file:");
  const Fold = searchString(codeBlockFirstLine, "fold");
  let isCodeBlockExcluded = false;
  isCodeBlockExcluded = isExcluded(codeBlockFirstLine, pluginSettings.ExcludeLangs);
  if (!isCodeBlockExcluded) {
    for (let index = 0; index < codeblocks.length; index++) {
      const Currentcodeblock = codeblocks.item(index);
      Currentcodeblock.parentElement.style.backgroundColor = pluginSettings.backgroundColor;
    }
  }
  const codeElements = codeBlockElement.getElementsByTagName("code");
  const codeBlockPreElement = codeBlockElement.querySelector("pre:not(.frontmatter)");
  if (!isCodeBlockExcluded) {
    let isCodeBlockHeaderEnabled = false;
    if (FileName !== "" && FileName !== null) {
      isCodeBlockHeaderEnabled = true;
      HeaderWidget(codeBlockPreElement, FileName, getLanguageName(codeBlockLang), pluginSettings.header, pluginSettings.bDisplayCodeBlockLanguage, Fold);
    } else if (Fold) {
      isCodeBlockHeaderEnabled = true;
      HeaderWidget(codeBlockPreElement, "Collapsed code", getLanguageName(codeBlockLang), pluginSettings.header, pluginSettings.bDisplayCodeBlockLanguage, Fold);
    } else if (pluginSettings.bDisplayCodeBlockLanguage && pluginSettings.header.bAlwaysDisplayCodeblockLang && codeBlockLang) {
      isCodeBlockHeaderEnabled = true;
      HeaderWidget(codeBlockPreElement, "", getLanguageName(codeBlockLang), pluginSettings.header, pluginSettings.bDisplayCodeBlockLanguage, Fold);
    }
    highlightLines(codeElements, linesToHighlight, pluginSettings);
    if (!isCodeBlockHeaderEnabled && pluginSettings.bEnableLineNumbers) {
      codeBlockPreElement.style.borderTopLeftRadius = "5px";
      codeBlockPreElement.style.borderBottomLeftRadius = "5px";
    } else if (isCodeBlockHeaderEnabled) {
      codeBlockPreElement.style.borderTopLeftRadius = "0px";
      codeBlockPreElement.style.borderTopRightRadius = "0px";
    }
  }
}
function HeaderWidget(preElements, textToDisplay, codeblockLanguage, metaInfo, bDisplayCodeBlockLanguage, Collapse2) {
  preElements.style.marginTop = "0px";
  const parent = preElements.parentNode;
  const container = createContainer2(metaInfo);
  const wrapper = createWrapper2();
  if (codeblockLanguage && bDisplayCodeBlockLanguage) {
    wrapper.appendChild(createCodeblockLang2(codeblockLanguage, metaInfo));
  }
  wrapper.appendChild(createFileName2(textToDisplay, metaInfo));
  container.appendChild(wrapper);
  container.style.marginTop = "16px";
  parent.insertBefore(container, preElements);
  container.addEventListener("click", function() {
    preElements.classList.toggle("collapsed");
  });
  if (Collapse2) {
    preElements.classList.add("collapsed");
  }
  const style = document.createElement("style");
  style.innerHTML = ` .collapsed { display: none; }`;
  document.head.appendChild(style);
}
function createContainer2(header) {
  const container = document.createElement("div");
  container.classList.add("codeblock-customizer-header-container");
  container.style.cssText = "user-select: none";
  container.style.borderTopLeftRadius = "5px";
  container.style.borderTopRightRadius = "5px";
  container.style.backgroundColor = header.color;
  container.style.borderBottom = "2px";
  container.style.borderBottomStyle = "groove";
  container.style.borderBottomColor = header.lineColor;
  return container;
}
function createWrapper2() {
  const wrapper = document.createElement("div");
  wrapper.style.display = "flex";
  return wrapper;
}
function createCodeblockLang2(lang, header) {
  const codeblockLang = document.createElement("div");
  codeblockLang.classList.add("codeblock-customizer-header-language-tag");
  codeblockLang.style.backgroundColor = header.codeBlockLangBackgroundColor;
  codeblockLang.style.color = header.codeBlockLangColor;
  codeblockLang.style.borderRadius = "5px 5px 5px 0px";
  codeblockLang.innerText = lang;
  if (header.bCodeblockLangBold)
    codeblockLang.style.fontWeight = "bold";
  if (header.bCodeblockLangItalic)
    codeblockLang.style.fontStyle = "italic";
  return codeblockLang;
}
function createFileName2(text, header) {
  const fileName = document.createElement("div");
  fileName.innerText = text;
  fileName.classList.add("codeblock-customizer-header-text");
  fileName.style.color = header.textColor;
  if (header.bHeaderBold)
    fileName.style.fontWeight = "bold";
  if (header.bHeaderItalic)
    fileName.style.fontStyle = "italic";
  return fileName;
}
function createLineNumberElement(lineNumber, settings, isHighlighted) {
  const lineNumberWrapper = document.createElement("div");
  lineNumberWrapper.classList.add("codeblock-customizer-line-number");
  lineNumberWrapper.style.backgroundColor = settings.gutterBackgroundColor;
  lineNumberWrapper.style.color = settings.gutterTextColor;
  if (isHighlighted && settings.bGutterHighlight) {
    lineNumberWrapper.classList.add("codeblock-customizer-line-highlighted");
    lineNumberWrapper.style.backgroundColor = settings.highlightColor;
  }
  lineNumberWrapper.innerHTML = lineNumber;
  return lineNumberWrapper;
}
function createLineTextElement(line, lineNumber, lastLine) {
  const lineContentWrapper = document.createElement("div");
  lineContentWrapper.classList.add("codeblock-customizer-line-text");
  lineContentWrapper.style.paddingLeft = "16px";
  lineContentWrapper.innerHTML = line;
  return lineContentWrapper;
}
function highlightLines(codeElements, linesToHighlight, settings) {
  for (let i = 0; i < codeElements.length; i++) {
    const lines = codeElements[i].innerHTML.split("\n");
    const preElm = codeElements[i].parentNode;
    if (preElm) {
      preElm.style.paddingRight = "0px";
      preElm.style.paddingLeft = "0px";
    }
    const codeWrapper = document.createElement("div");
    for (let j = 0; j < lines.length - 1; j++) {
      const line = lines[j];
      const lineNumber = j + 1;
      const isHighlighted = linesToHighlight.includes(lineNumber);
      const lineWrapper = document.createElement("div");
      lineWrapper.classList.add("codeblock-customizer-line");
      if (isHighlighted) {
        lineWrapper.classList.add("codeblock-customizer-line-highlighted");
        lineWrapper.style.backgroundColor = settings.highlightColor;
      }
      codeWrapper.appendChild(lineWrapper);
      if (settings.bEnableLineNumbers) {
        const lineNumberEl = createLineNumberElement(lineNumber, settings, isHighlighted);
        lineWrapper.appendChild(lineNumberEl);
      }
      const lineTextEl = createLineTextElement(line, lineNumber, lines.length - 1);
      lineWrapper.appendChild(lineTextEl);
    }
    codeElements[i].innerHTML = "";
    codeElements[i].appendChild(codeWrapper);
  }
}

// src/SettingsTab.ts
var import_obsidian2 = require("obsidian");
var import_pickr = __toESM(require_pickr_min());
var SettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    // setAndSavePickrSetting
    this.createDonateButton = (link) => {
      const a = createEl("a");
      a.setAttribute("href", link);
      a.addClass("buymeacoffee-ThePirateKing-img");
      a.innerHTML = `<img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=ThePirateKing&button_colour=e3e7ef&font_colour=262626&font_family=Inter&outline_colour=262626&coffee_colour=ff0000" height="42px">`;
      return a;
    };
    this.plugin = plugin;
    this.pickerInstances = [];
    this.headerLangToggles = [];
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "Codeblock Customizer Settings" });
    let dropdown;
    new import_obsidian2.Setting(containerEl).setName("Theme").setDesc("Select which theme to use").addDropdown((dropdownObj) => {
      this.plugin.settings.colorThemes.forEach((theme) => {
        dropdownObj.addOption(theme.color, theme.name);
      });
      dropdownObj.setValue(this.plugin.settings.SelectedTheme);
      dropdownObj.onChange((value) => {
        this.plugin.settings.SelectedTheme = value;
        this.applyTheme();
        this.setColorsForPickers(value);
        this.plugin.saveSettings();
      });
      dropdown = dropdownObj;
    }).addExtraButton((button) => {
      button.setTooltip("Delete theme");
      button.setIcon("trash");
      button.onClick(() => {
        if (this.plugin.settings.SelectedTheme.trim().length === 0) {
          new Notice("Select a theme first to delete");
        } else if (this.plugin.settings.SelectedTheme === "Dark Theme" || this.plugin.settings.SelectedTheme === "Light Theme") {
          new Notice("You cannot delete the default themes");
        } else {
          const index = this.plugin.settings.colorThemes.findIndex((t) => t.name === this.plugin.settings.SelectedTheme);
          this.plugin.settings.colorThemes.splice(index, 1);
          new Notice(`${this.plugin.settings.SelectedTheme} theme deleted successfully!`);
          this.plugin.settings.SelectedTheme = "";
          dropdown.selectEl.empty();
          for (const theme of this.plugin.settings.colorThemes) {
            dropdown.addOption(theme.color, theme.name);
          }
          if (this.plugin.settings.colorThemes.length > 0) {
            this.plugin.settings.SelectedTheme = this.plugin.settings.colorThemes[0].name;
            dropdown.setValue(this.plugin.settings.SelectedTheme);
          }
          this.applyTheme();
          this.setColorsForPickers(this.plugin.settings.SelectedTheme);
          this.plugin.saveSettings();
        }
      });
    });
    let text;
    new import_obsidian2.Setting(containerEl).setName("Create your theme").setDesc("Save or update your current colors as a theme").addText((input) => {
      text = input;
      text.setPlaceholder("Name for your theme").setValue(this.plugin.settings.ThemeName).onChange(async (value) => {
        this.plugin.settings.ThemeName = value;
        await this.plugin.saveSettings();
      });
    }).addExtraButton((button) => {
      button.setTooltip("Save theme");
      button.setIcon("plus");
      button.onClick(() => {
        if (this.plugin.settings.ThemeName.trim().length === 0)
          new Notice("Set a name for your theme!");
        else if (this.plugin.settings.ThemeName === "Dark Theme" || this.plugin.settings.ThemeName === "Light Theme") {
          new Notice("You can't overwrite default themes");
        } else {
          const currentColors = {
            activeCodeBlockLineColor: this.plugin.settings.activeCodeBlockLineColor,
            activeLineColor: this.plugin.settings.activeLineColor,
            backgroundColor: this.plugin.settings.backgroundColor,
            highlightColor: this.plugin.settings.highlightColor,
            gutterTextColor: this.plugin.settings.gutterTextColor,
            gutterBackgroundColor: this.plugin.settings.gutterBackgroundColor,
            header: {
              color: this.plugin.settings.header.color,
              textColor: this.plugin.settings.header.textColor,
              lineColor: this.plugin.settings.header.lineColor,
              codeBlockLangColor: this.plugin.settings.header.codeBlockLangColor,
              codeBlockLangBackgroundColor: this.plugin.settings.header.codeBlockLangBackgroundColor
            }
          };
          const existingTheme = this.plugin.settings.colorThemes.find((t) => t.name === this.plugin.settings.ThemeName);
          if (existingTheme) {
            existingTheme.colors = currentColors;
            new Notice(`${this.plugin.settings.SelectedTheme} theme updated successfully!`);
          } else {
            this.plugin.settings.colorThemes.push({
              name: this.plugin.settings.ThemeName,
              colors: currentColors
            });
            this.plugin.settings.SelectedTheme = "";
            dropdown.selectEl.empty();
            for (const theme of this.plugin.settings.colorThemes) {
              dropdown.addOption(theme.color, theme.name);
            }
            this.plugin.settings.SelectedTheme = this.plugin.settings.ThemeName;
            dropdown.setValue(this.plugin.settings.SelectedTheme);
            this.applyTheme();
            new Notice(`${this.plugin.settings.SelectedTheme} theme saved successfully!`);
          }
          this.plugin.settings.ThemeName = "";
          text.setValue("");
          this.plugin.saveSettings();
        }
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Enable editor active line highlight").setDesc("If enabled, you can set the color for the active line (including codeblocks).").addToggle((toggle) => toggle.setValue(this.plugin.settings.bActiveLineHighlight).onChange(async (value) => {
      if (!value && !this.plugin.settings.bActiveCodeblockLineHighlight) {
        this.removeExtension(codeblockActiveLingHighlight.name);
      } else if (!this.plugin.extensions.find((ext) => ext.name === codeblockActiveLingHighlight.name)) {
        this.plugin.extensions.push(codeblockActiveLingHighlight(this.plugin.settings));
      }
      this.plugin.settings.bActiveLineHighlight = value;
      await this.plugin.saveSettings();
    }));
    this.createPickrSetting(
      containerEl,
      "Editor active line color",
      'To set this color, enable the option "Enable editor active line highlighting" first.',
      D_ACTIVE_LINE_COLOR,
      "activeLineColor"
    );
    new import_obsidian2.Setting(containerEl).setName("Exclude languages").setDesc("Define languages, separated by a comma, to which the plugin will not apply.").addText((text2) => text2.setPlaceholder("e.g. dataview, python etc.").setValue(this.plugin.settings.ExcludeLangs).onChange(async (value) => {
      this.plugin.settings.ExcludeLangs = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Codeblock settings" });
    new import_obsidian2.Setting(containerEl).setName("Enable line numbers").addToggle((toggle) => toggle.setValue(this.plugin.settings.bEnableLineNumbers).onChange(async (value) => {
      if (value) {
        if (!this.plugin.extensions.find((ext) => ext.name === codeblockGutter.name)) {
          this.plugin.extensions.push(codeblockGutter(this.plugin.settings));
        }
      } else {
        this.removeExtension(codeblockGutter.name);
      }
      this.plugin.settings.bEnableLineNumbers = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Enable codeblock active line hihglight").setDesc("If enabled, you can set the color for the active line inside codeblocks only.").addToggle((toggle) => toggle.setValue(this.plugin.settings.bActiveCodeblockLineHighlight).onChange(async (value) => {
      if (!value && !this.plugin.settings.bActiveLineHighlight) {
        this.removeExtension(codeblockActiveLingHighlight.name);
      } else if (!this.plugin.extensions.find((ext) => ext.name === codeblockActiveLingHighlight.name)) {
        this.plugin.extensions.push(codeblockActiveLingHighlight(this.plugin.settings));
      }
      this.plugin.settings.bActiveCodeblockLineHighlight = value;
      await this.plugin.saveSettings();
    }));
    this.createPickrSetting(
      containerEl,
      "Codeblock active line color",
      'To set this color, enable the option "Enable codeblock active line highlight" first.',
      D_ACTIVE_CODEBLOCK_LINE_COLOR,
      "activeCodeBlockLineColor"
    );
    this.createPickrSetting(containerEl, "Background color", "", D_BACKGROUND_COLOR, "backgroundColor");
    this.createPickrSetting(containerEl, "Highlight color", "", D_HIGHLIGHT_COLOR, "highlightColor");
    containerEl.createEl("h3", { text: "Header settings" });
    this.createPickrSetting(containerEl, "Header color", "", D_HEADER_COLOR, "headerColor");
    this.createPickrSetting(containerEl, "Header text color", "", D_HEADER_TEXT_COLOR, "headerTextColor");
    new import_obsidian2.Setting(containerEl).setName("Header bold text").setDesc("If enabled, the header text will be set to bold.").addToggle((toggle) => toggle.setValue(this.plugin.settings.header.bHeaderBold).onChange(async (value) => {
      this.plugin.settings.header.bHeaderBold = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Header italic text").setDesc("If enabled, the header text will be set to italic.").addToggle((toggle) => toggle.setValue(this.plugin.settings.header.bHeaderItalic).onChange(async (value) => {
      this.plugin.settings.header.bHeaderItalic = value;
      await this.plugin.saveSettings();
    }));
    this.createPickrSetting(containerEl, "Header line color", "", D_HEADER_LINE_COLOR, "headerLineColor");
    containerEl.createEl("h3", { text: "Header language settings" });
    new import_obsidian2.Setting(containerEl).setName("Display codeblock language (if language is defined)").setDesc("If enabled, the codeblock language will be displayed in the header. If disabled, all below settings are disabled as well!").addToggle((toggle) => toggle.setValue(this.plugin.settings.bDisplayCodeBlockLanguage).onChange(async (value) => {
      this.headerLangToggles.forEach((item) => {
        item.setDisabled(!value);
      });
      this.plugin.settings.bDisplayCodeBlockLanguage = value;
      await this.plugin.saveSettings();
    }));
    this.createPickrSetting(containerEl, "Codeblock language text color", 'To set this color, enable the option "Display codeblock language" first.', D_LANG_COLOR, "codeBlockLangColor");
    this.createPickrSetting(containerEl, "Codeblock language background color", 'To set this color, enable the option "Display codeblock language" first.', D_LANG_BACKGROUND_COLOR, "codeBlockLangBackgroundColor");
    const boldToggle = new import_obsidian2.Setting(containerEl).setName("Bold text").setDesc("If enabled, the codeblock language text will be set to bold.").addToggle((toggle) => toggle.setValue(this.plugin.settings.header.bCodeblockLangBold).onChange(async (value) => {
      this.plugin.settings.header.bCodeblockLangBold = value;
      await this.plugin.saveSettings();
    }));
    this.headerLangToggles.push(boldToggle);
    const italicToggle = new import_obsidian2.Setting(containerEl).setName("Italic text").setDesc("If enabled, the codeblock language text will be set to italic.").addToggle((toggle) => toggle.setValue(this.plugin.settings.header.bCodeblockLangItalic).onChange(async (value) => {
      this.plugin.settings.header.bCodeblockLangItalic = value;
      await this.plugin.saveSettings();
    }));
    this.headerLangToggles.push(italicToggle);
    const alwaysDisplayToggle = new import_obsidian2.Setting(containerEl).setName("Always display codeblock language").setDesc("If enabled, the codeblock language will always displayed (if a language is defined), even if the file parameter is not specified.").addToggle((toggle) => toggle.setValue(this.plugin.settings.header.bAlwaysDisplayCodeblockLang).onChange(async (value) => {
      this.plugin.settings.header.bAlwaysDisplayCodeblockLang = value;
      await this.plugin.saveSettings();
    }));
    this.headerLangToggles.push(alwaysDisplayToggle);
    if (!this.plugin.settings.bDisplayCodeBlockLanguage) {
      this.headerLangToggles.forEach((item) => {
        item.setDisabled(true);
      });
    }
    containerEl.createEl("h3", { text: "Gutter settings" });
    new import_obsidian2.Setting(containerEl).setName("Highlight gutter").setDesc("If enabled, highlighted lines will also highlight the gutter (line number), not just the line.").addToggle((toggle) => toggle.setValue(this.plugin.settings.bGutterHighlight).onChange(async (value) => {
      this.plugin.settings.bGutterHighlight = value;
      await this.plugin.saveSettings();
    }));
    this.createPickrSetting(containerEl, "Gutter text color", "", D_GUTTER_TEXT_COLOR, "gutterTextColor");
    this.createPickrSetting(containerEl, "Gutter background color", "", D_GUTTER_BACKGROUND_COLOR, "gutterBackgroundColor");
    const cDonationDiv = containerEl.createEl("div", { cls: "codeblock-customizer-Donation" });
    const credit = createEl("p");
    const donateText = createEl("p");
    donateText.appendText("If you like this plugin, and would like to help support continued development, use the button below!");
    credit.setAttribute("style", "color: var(--text-muted)");
    cDonationDiv.appendChild(donateText);
    cDonationDiv.appendChild(credit);
    cDonationDiv.appendChild(
      this.createDonateButton("https://www.buymeacoffee.com/ThePirateKing")
    );
  }
  // display
  removeExtension(name) {
    for (const ext of this.plugin.extensions) {
      if (ext.name === name)
        this.plugin.extensions.remove(ext);
    }
  }
  // removeExtension
  applyTheme() {
    const selectedTheme = this.plugin.settings.colorThemes.find((t) => t.name === this.plugin.settings.SelectedTheme);
    this.plugin.settings.activeCodeBlockLineColor = selectedTheme.colors.activeCodeBlockLineColor;
    this.plugin.settings.activeLineColor = selectedTheme.colors.activeLineColor;
    this.plugin.settings.backgroundColor = selectedTheme.colors.backgroundColor;
    this.plugin.settings.highlightColor = selectedTheme.colors.highlightColor;
    this.plugin.settings.header.color = selectedTheme.colors.header.color;
    this.plugin.settings.header.textColor = selectedTheme.colors.header.textColor;
    this.plugin.settings.header.lineColor = selectedTheme.colors.header.lineColor;
    this.plugin.settings.gutterTextColor = selectedTheme.colors.gutterTextColor;
    this.plugin.settings.gutterBackgroundColor = selectedTheme.colors.gutterBackgroundColor;
    this.plugin.settings.header.codeBlockLangColor = selectedTheme.colors.header.codeBlockLangColor;
    this.plugin.settings.header.codeBlockLangBackgroundColor = selectedTheme.colors.header.codeBlockLangBackgroundColor;
  }
  // applyTheme
  setColorsForPickers(themeName) {
    const selectedTheme = this.plugin.settings.colorThemes.find((t) => t.name === themeName);
    if (!selectedTheme)
      return;
    this.pickerInstances.forEach((picker) => {
      const color = getColorByClass(picker.options.appClass, selectedTheme);
      if (color) {
        picker.setColor(color);
      }
    });
  }
  // setColorsForPickers
  createPickrSetting(containerEl, name, description, defaultColor, pickrClass) {
    let pickrDefault = this.plugin.settings[pickrClass] || defaultColor;
    let pickr;
    let desc = "";
    if (description != "")
      desc = description;
    const mySetting = new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc).then((setting) => {
      pickr = import_pickr.default.create({
        el: setting.controlEl.createDiv({ cls: "picker" }),
        container: containerEl.parentNode,
        appClass: pickrClass,
        theme: "nano",
        position: "left-middle",
        lockOpacity: false,
        // If true, the user won't be able to adjust any opacity.
        default: pickrDefault,
        // Default color
        swatches: [],
        // Optional color swatches
        components: {
          preview: true,
          hue: true,
          opacity: true,
          interaction: {
            hex: true,
            rgba: true,
            hsla: false,
            input: true,
            cancel: true,
            save: true
          }
        }
      }).on("show", (color, instance) => {
        if (!this.plugin.settings.bActiveCodeblockLineHighlight && pickrClass === "activeCodeBlockLineColor" || !this.plugin.settings.bActiveLineHighlight && pickrClass === "activeLineColor" || !this.plugin.settings.bDisplayCodeBlockLanguage && pickrClass === "codeBlockLangColor" || !this.plugin.settings.bDisplayCodeBlockLanguage && pickrClass === "codeBlockLangBackgroundColor") {
          pickr == null ? void 0 : pickr.hide();
        }
        const { result } = pickr.getRoot().interaction;
        requestAnimationFrame(
          () => requestAnimationFrame(() => result.select())
        );
      }).on("save", (color, instance) => {
        if (!color)
          return;
        instance.hide();
        const savedColor = color.toHEXA().toString();
        instance.addSwatch(savedColor);
        this.setAndSavePickrSetting(pickrClass, savedColor);
      }).on("cancel", (instance) => {
        instance.hide();
      });
    }).addExtraButton((btn) => {
      btn.setIcon("reset").onClick(() => {
        if (this.plugin.settings.SelectedTheme === "Light Theme") {
          if (pickrClass === "activeCodeBlockLineColor") {
            pickrDefault = L_ACTIVE_CODEBLOCK_LINE_COLOR;
          } else if (pickrClass === "activeLineColor") {
            pickrDefault = L_ACTIVE_LINE_COLOR;
          } else if (pickrClass === "backgroundColor") {
            pickrDefault = L_BACKGROUND_COLOR;
          } else if (pickrClass === "highlightColor") {
            pickrDefault = L_HIGHLIGHT_COLOR;
          } else if (pickrClass === "headerColor") {
            pickrDefault = L_HEADER_COLOR;
          } else if (pickrClass === "headerTextColor") {
            pickrDefault = L_HEADER_TEXT_COLOR;
          } else if (pickrClass === "headerLineColor") {
            pickrDefault = L_HEADER_LINE_COLOR;
          } else if (pickrClass === "gutterTextColor") {
            pickrDefault = L_GUTTER_TEXT_COLOR;
          } else if (pickrClass === "gutterBackgroundColor") {
            pickrDefault = L_GUTTER_BACKGROUND_COLOR;
          } else if (pickrClass === "codeBlockLangColor") {
            pickrDefault = L_LANG_COLOR;
          } else if (pickrClass === "codeBlockLangBackgroundColor") {
            pickrDefault = L_LANG_BACKGROUND_COLOR;
          } else {
            pickrDefault = defaultColor;
          }
          pickr.setColor(pickrDefault);
          this.setAndSavePickrSetting(pickrClass, pickrDefault);
        } else if (this.plugin.settings.SelectedTheme === "Dark Theme") {
          pickr.setColor(defaultColor);
          this.setAndSavePickrSetting(pickrClass, defaultColor);
        }
      }).setTooltip("restore default color");
    });
    this.pickerInstances.push(pickr);
    return mySetting;
  }
  // createPickrSetting
  setAndSavePickrSetting(className, savedColor) {
    if (className === "activeCodeBlockLineColor") {
      this.plugin.settings.activeCodeBlockLineColor = savedColor;
    } else if (className === "activeLineColor") {
      this.plugin.settings.activeLineColor = savedColor;
    } else if (className === "backgroundColor") {
      this.plugin.settings.backgroundColor = savedColor;
    } else if (className === "highlightColor") {
      this.plugin.settings.highlightColor = savedColor;
    } else if (className === "headerColor") {
      this.plugin.settings.header.color = savedColor;
    } else if (className === "headerTextColor") {
      this.plugin.settings.header.textColor = savedColor;
    } else if (className === "headerLineColor") {
      this.plugin.settings.header.lineColor = savedColor;
    } else if (className === "gutterTextColor") {
      this.plugin.settings.gutterTextColor = savedColor;
    } else if (className === "gutterBackgroundColor") {
      this.plugin.settings.gutterBackgroundColor = savedColor;
    } else if (className === "codeBlockLangColor") {
      this.plugin.settings.header.codeBlockLangColor = savedColor;
    } else if (className === "codeBlockLangBackgroundColor") {
      this.plugin.settings.header.codeBlockLangBackgroundColor = savedColor;
    }
    this.plugin.saveSettings();
  }
  // createDonateButton
};
function getColorByClass(pickerClass, theme) {
  switch (pickerClass) {
    case "activeCodeBlockLineColor":
      return theme.colors.activeCodeBlockLineColor;
    case "activeLineColor":
      return theme.colors.activeLineColor;
    case "backgroundColor":
      return theme.colors.backgroundColor;
    case "highlightColor":
      return theme.colors.highlightColor;
    case "headerColor":
      return theme.colors.header.color;
    case "headerTextColor":
      return theme.colors.header.textColor;
    case "headerLineColor":
      return theme.colors.header.lineColor;
    case "gutterTextColor":
      return theme.colors.gutterTextColor;
    case "gutterBackgroundColor":
      return theme.colors.gutterBackgroundColor;
    case "codeBlockLangColor":
      return theme.colors.header.codeBlockLangColor;
    case "codeBlockLangBackgroundColor":
      return theme.colors.header.codeBlockLangBackgroundColor;
    default:
      return null;
  }
}

// src/main.ts
var CodeBlockCustomizerPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.extensions = [];
    codeblockHeader.settings = this.settings;
    this.extensions.push(codeblockHeader);
    collapseField.pluginSettings = this.settings;
    this.extensions.push(collapseField);
    this.extensions.push(codeblockHighlight(this.settings));
    if (this.settings.bEnableLineNumbers)
      this.extensions.push(codeblockGutter(this.settings));
    if (this.settings.bActiveCodeblockLineHighlight || this.settings.bActiveLineHighlight)
      this.extensions.push(codeblockActiveLingHighlight(this.settings));
    this.registerEditorExtension(this.extensions);
    this.addSettingTab(new SettingsTab(this.app, this));
    this.registerMarkdownPostProcessor((el, ctx) => {
      ReadingView(el, ctx, this);
    });
    console.log("loading CodeBlock Customizer plugin");
  }
  onunload() {
    console.log("unloading CodeBlock Customizer plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.app.workspace.updateOptions();
  }
};
/*! Bundled license information:

@simonwep/pickr/dist/pickr.min.js:
  (*! Pickr 1.8.2 MIT | https://github.com/Simonwep/pickr *)
*/
//# sourceMappingURL=data:application/json;base64,
